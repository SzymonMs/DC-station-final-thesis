
Krokowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d1c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08007efc  08007efc  00017efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f78  08007f78  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007f78  08007f78  00017f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f80  08007f80  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f80  08007f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f84  08007f84  00017f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000074  08007ffc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08007ffc  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e94  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bfd  00000000  00000000  00036f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00039b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ff6  00000000  00000000  0003c040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e9c  00000000  00000000  0005d036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e054d  00000000  00000000  00071ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015241f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005580  00000000  00000000  00152474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007ee4 	.word	0x08007ee4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08007ee4 	.word	0x08007ee4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96e 	b.w	8000bc0 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468c      	mov	ip, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8083 	bne.w	8000a12 <__udivmoddi4+0x116>
 800090c:	428a      	cmp	r2, r1
 800090e:	4617      	mov	r7, r2
 8000910:	d947      	bls.n	80009a2 <__udivmoddi4+0xa6>
 8000912:	fab2 f282 	clz	r2, r2
 8000916:	b142      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000918:	f1c2 0020 	rsb	r0, r2, #32
 800091c:	fa24 f000 	lsr.w	r0, r4, r0
 8000920:	4091      	lsls	r1, r2
 8000922:	4097      	lsls	r7, r2
 8000924:	ea40 0c01 	orr.w	ip, r0, r1
 8000928:	4094      	lsls	r4, r2
 800092a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800092e:	0c23      	lsrs	r3, r4, #16
 8000930:	fbbc f6f8 	udiv	r6, ip, r8
 8000934:	fa1f fe87 	uxth.w	lr, r7
 8000938:	fb08 c116 	mls	r1, r8, r6, ip
 800093c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000940:	fb06 f10e 	mul.w	r1, r6, lr
 8000944:	4299      	cmp	r1, r3
 8000946:	d909      	bls.n	800095c <__udivmoddi4+0x60>
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	f106 30ff 	add.w	r0, r6, #4294967295
 800094e:	f080 8119 	bcs.w	8000b84 <__udivmoddi4+0x288>
 8000952:	4299      	cmp	r1, r3
 8000954:	f240 8116 	bls.w	8000b84 <__udivmoddi4+0x288>
 8000958:	3e02      	subs	r6, #2
 800095a:	443b      	add	r3, r7
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	b2a4      	uxth	r4, r4
 8000960:	fbb3 f0f8 	udiv	r0, r3, r8
 8000964:	fb08 3310 	mls	r3, r8, r0, r3
 8000968:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800096c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000970:	45a6      	cmp	lr, r4
 8000972:	d909      	bls.n	8000988 <__udivmoddi4+0x8c>
 8000974:	193c      	adds	r4, r7, r4
 8000976:	f100 33ff 	add.w	r3, r0, #4294967295
 800097a:	f080 8105 	bcs.w	8000b88 <__udivmoddi4+0x28c>
 800097e:	45a6      	cmp	lr, r4
 8000980:	f240 8102 	bls.w	8000b88 <__udivmoddi4+0x28c>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098c:	eba4 040e 	sub.w	r4, r4, lr
 8000990:	2600      	movs	r6, #0
 8000992:	b11d      	cbz	r5, 800099c <__udivmoddi4+0xa0>
 8000994:	40d4      	lsrs	r4, r2
 8000996:	2300      	movs	r3, #0
 8000998:	e9c5 4300 	strd	r4, r3, [r5]
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	b902      	cbnz	r2, 80009a6 <__udivmoddi4+0xaa>
 80009a4:	deff      	udf	#255	; 0xff
 80009a6:	fab2 f282 	clz	r2, r2
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d150      	bne.n	8000a50 <__udivmoddi4+0x154>
 80009ae:	1bcb      	subs	r3, r1, r7
 80009b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b4:	fa1f f887 	uxth.w	r8, r7
 80009b8:	2601      	movs	r6, #1
 80009ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80009be:	0c21      	lsrs	r1, r4, #16
 80009c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c8:	fb08 f30c 	mul.w	r3, r8, ip
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d907      	bls.n	80009e0 <__udivmoddi4+0xe4>
 80009d0:	1879      	adds	r1, r7, r1
 80009d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0xe2>
 80009d8:	428b      	cmp	r3, r1
 80009da:	f200 80e9 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 80009de:	4684      	mov	ip, r0
 80009e0:	1ac9      	subs	r1, r1, r3
 80009e2:	b2a3      	uxth	r3, r4
 80009e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009f0:	fb08 f800 	mul.w	r8, r8, r0
 80009f4:	45a0      	cmp	r8, r4
 80009f6:	d907      	bls.n	8000a08 <__udivmoddi4+0x10c>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x10a>
 8000a00:	45a0      	cmp	r8, r4
 8000a02:	f200 80d9 	bhi.w	8000bb8 <__udivmoddi4+0x2bc>
 8000a06:	4618      	mov	r0, r3
 8000a08:	eba4 0408 	sub.w	r4, r4, r8
 8000a0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a10:	e7bf      	b.n	8000992 <__udivmoddi4+0x96>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x12e>
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	f000 80b1 	beq.w	8000b7e <__udivmoddi4+0x282>
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a22:	4630      	mov	r0, r6
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	fab3 f683 	clz	r6, r3
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d14a      	bne.n	8000ac8 <__udivmoddi4+0x1cc>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d302      	bcc.n	8000a3c <__udivmoddi4+0x140>
 8000a36:	4282      	cmp	r2, r0
 8000a38:	f200 80b8 	bhi.w	8000bac <__udivmoddi4+0x2b0>
 8000a3c:	1a84      	subs	r4, r0, r2
 8000a3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a42:	2001      	movs	r0, #1
 8000a44:	468c      	mov	ip, r1
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d0a8      	beq.n	800099c <__udivmoddi4+0xa0>
 8000a4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a4e:	e7a5      	b.n	800099c <__udivmoddi4+0xa0>
 8000a50:	f1c2 0320 	rsb	r3, r2, #32
 8000a54:	fa20 f603 	lsr.w	r6, r0, r3
 8000a58:	4097      	lsls	r7, r2
 8000a5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a62:	40d9      	lsrs	r1, r3
 8000a64:	4330      	orrs	r0, r6
 8000a66:	0c03      	lsrs	r3, r0, #16
 8000a68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a6c:	fa1f f887 	uxth.w	r8, r7
 8000a70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f108 	mul.w	r1, r6, r8
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a82:	d909      	bls.n	8000a98 <__udivmoddi4+0x19c>
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a8a:	f080 808d 	bcs.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 808a 	bls.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	443b      	add	r3, r7
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b281      	uxth	r1, r0
 8000a9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb00 f308 	mul.w	r3, r0, r8
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ab6:	d273      	bcs.n	8000ba0 <__udivmoddi4+0x2a4>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	d971      	bls.n	8000ba0 <__udivmoddi4+0x2a4>
 8000abc:	3802      	subs	r0, #2
 8000abe:	4439      	add	r1, r7
 8000ac0:	1acb      	subs	r3, r1, r3
 8000ac2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ac6:	e778      	b.n	80009ba <__udivmoddi4+0xbe>
 8000ac8:	f1c6 0c20 	rsb	ip, r6, #32
 8000acc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ad0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ad4:	431c      	orrs	r4, r3
 8000ad6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ada:	fa01 f306 	lsl.w	r3, r1, r6
 8000ade:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ae2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	0c3b      	lsrs	r3, r7, #16
 8000aea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aee:	fa1f f884 	uxth.w	r8, r4
 8000af2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000af6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000afa:	fb09 fa08 	mul.w	sl, r9, r8
 8000afe:	458a      	cmp	sl, r1
 8000b00:	fa02 f206 	lsl.w	r2, r2, r6
 8000b04:	fa00 f306 	lsl.w	r3, r0, r6
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x220>
 8000b0a:	1861      	adds	r1, r4, r1
 8000b0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b10:	d248      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b12:	458a      	cmp	sl, r1
 8000b14:	d946      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b16:	f1a9 0902 	sub.w	r9, r9, #2
 8000b1a:	4421      	add	r1, r4
 8000b1c:	eba1 010a 	sub.w	r1, r1, sl
 8000b20:	b2bf      	uxth	r7, r7
 8000b22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b2e:	fb00 f808 	mul.w	r8, r0, r8
 8000b32:	45b8      	cmp	r8, r7
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x24a>
 8000b36:	19e7      	adds	r7, r4, r7
 8000b38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b3c:	d22e      	bcs.n	8000b9c <__udivmoddi4+0x2a0>
 8000b3e:	45b8      	cmp	r8, r7
 8000b40:	d92c      	bls.n	8000b9c <__udivmoddi4+0x2a0>
 8000b42:	3802      	subs	r0, #2
 8000b44:	4427      	add	r7, r4
 8000b46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b4a:	eba7 0708 	sub.w	r7, r7, r8
 8000b4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b52:	454f      	cmp	r7, r9
 8000b54:	46c6      	mov	lr, r8
 8000b56:	4649      	mov	r1, r9
 8000b58:	d31a      	bcc.n	8000b90 <__udivmoddi4+0x294>
 8000b5a:	d017      	beq.n	8000b8c <__udivmoddi4+0x290>
 8000b5c:	b15d      	cbz	r5, 8000b76 <__udivmoddi4+0x27a>
 8000b5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b62:	eb67 0701 	sbc.w	r7, r7, r1
 8000b66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b6a:	40f2      	lsrs	r2, r6
 8000b6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b70:	40f7      	lsrs	r7, r6
 8000b72:	e9c5 2700 	strd	r2, r7, [r5]
 8000b76:	2600      	movs	r6, #0
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	462e      	mov	r6, r5
 8000b80:	4628      	mov	r0, r5
 8000b82:	e70b      	b.n	800099c <__udivmoddi4+0xa0>
 8000b84:	4606      	mov	r6, r0
 8000b86:	e6e9      	b.n	800095c <__udivmoddi4+0x60>
 8000b88:	4618      	mov	r0, r3
 8000b8a:	e6fd      	b.n	8000988 <__udivmoddi4+0x8c>
 8000b8c:	4543      	cmp	r3, r8
 8000b8e:	d2e5      	bcs.n	8000b5c <__udivmoddi4+0x260>
 8000b90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b94:	eb69 0104 	sbc.w	r1, r9, r4
 8000b98:	3801      	subs	r0, #1
 8000b9a:	e7df      	b.n	8000b5c <__udivmoddi4+0x260>
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e7d2      	b.n	8000b46 <__udivmoddi4+0x24a>
 8000ba0:	4660      	mov	r0, ip
 8000ba2:	e78d      	b.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ba4:	4681      	mov	r9, r0
 8000ba6:	e7b9      	b.n	8000b1c <__udivmoddi4+0x220>
 8000ba8:	4666      	mov	r6, ip
 8000baa:	e775      	b.n	8000a98 <__udivmoddi4+0x19c>
 8000bac:	4630      	mov	r0, r6
 8000bae:	e74a      	b.n	8000a46 <__udivmoddi4+0x14a>
 8000bb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bb4:	4439      	add	r1, r7
 8000bb6:	e713      	b.n	80009e0 <__udivmoddi4+0xe4>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	443c      	add	r4, r7
 8000bbc:	e724      	b.n	8000a08 <__udivmoddi4+0x10c>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_idiv0>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2220      	movs	r2, #32
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f006 fd51 	bl	8007678 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000bd8:	4a2b      	ldr	r2, [pc, #172]	; (8000c88 <MX_ADC3_Init+0xc4>)
 8000bda:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000bde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000be2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c3e:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000c40:	f001 fcac 	bl	800259c <HAL_ADC_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000c4a:	f000 fb07 	bl	800125c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_ADC3_Init+0xc8>)
 8000c50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c52:	2306      	movs	r3, #6
 8000c54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c5a:	237f      	movs	r3, #127	; 0x7f
 8000c5c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_ADC3_Init+0xc0>)
 8000c6c:	f002 f816 	bl	8002c9c <HAL_ADC_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000c76:	f000 faf1 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000c4 	.word	0x200000c4
 8000c88:	50000400 	.word	0x50000400
 8000c8c:	04300002 	.word	0x04300002

08000c90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <HAL_ADC_MspInit+0x74>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d123      	bne.n	8000cfa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_ADC_MspInit+0x78>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_ADC_MspInit+0x78>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_ADC_MspInit+0x78>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_ADC_MspInit+0x78>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_ADC_MspInit+0x78>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_ADC_MspInit+0x78>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_ADC_MspInit+0x7c>)
 8000cf6:	f002 fd6f 	bl	80037d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	50000400 	.word	0x50000400
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48000400 	.word	0x48000400

08000d10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <MX_GPIO_Init+0x130>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a45      	ldr	r2, [pc, #276]	; (8000e40 <MX_GPIO_Init+0x130>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <MX_GPIO_Init+0x130>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3e:	4b40      	ldr	r3, [pc, #256]	; (8000e40 <MX_GPIO_Init+0x130>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a3f      	ldr	r2, [pc, #252]	; (8000e40 <MX_GPIO_Init+0x130>)
 8000d44:	f043 0320 	orr.w	r3, r3, #32
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <MX_GPIO_Init+0x130>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0320 	and.w	r3, r3, #32
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <MX_GPIO_Init+0x130>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a39      	ldr	r2, [pc, #228]	; (8000e40 <MX_GPIO_Init+0x130>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <MX_GPIO_Init+0x130>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <MX_GPIO_Init+0x130>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4a33      	ldr	r2, [pc, #204]	; (8000e40 <MX_GPIO_Init+0x130>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <MX_GPIO_Init+0x130>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2120      	movs	r1, #32
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f002 febd 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d98:	482a      	ldr	r0, [pc, #168]	; (8000e44 <MX_GPIO_Init+0x134>)
 8000d9a:	f002 feb7 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <MX_GPIO_Init+0x138>)
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4826      	ldr	r0, [pc, #152]	; (8000e4c <MX_GPIO_Init+0x13c>)
 8000db4:	f002 fd10 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db8:	2320      	movs	r3, #32
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f002 fd01 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dd6:	2340      	movs	r3, #64	; 0x40
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f002 fcf4 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000df0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	480e      	ldr	r0, [pc, #56]	; (8000e44 <MX_GPIO_Init+0x134>)
 8000e0a:	f002 fce5 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH1_Pin;
 8000e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <MX_GPIO_Init+0x134>)
 8000e24:	f002 fcd8 	bl	80037d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2028      	movs	r0, #40	; 0x28
 8000e2e:	f002 fc9e 	bl	800376e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e32:	2028      	movs	r0, #40	; 0x28
 8000e34:	f002 fcb5 	bl	80037a2 <HAL_NVIC_EnableIRQ>

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48000400 	.word	0x48000400
 8000e48:	10110000 	.word	0x10110000
 8000e4c:	48000800 	.word	0x48000800

08000e50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim15.Instance) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d151      	bne.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0xb8>
		if (sign == 1) {
 8000e64:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d11f      	bne.n	8000eac <HAL_TIM_PeriodElapsedCallback+0x5c>
			count = __HAL_TIM_GET_COUNTER(&htim4);
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e76:	601a      	str	r2, [r3, #0]
			speed = number * count / 4; //obr min
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000e86:	edd3 7a00 	vldr	s15, [r3]
 8000e8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e8e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000e92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e9a:	ee17 3a90 	vmov	r3, s15
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ea2:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
		}

//obroty prawe
		if (sign == -1) {
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb4:	d128      	bne.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0xb8>
			count = __HAL_TIM_GET_COUNTER(&htim4);
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ec0:	601a      	str	r2, [r3, #0]
			count = 65000 - count;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f5c3 437d 	rsb	r3, r3, #64768	; 0xfd00
 8000eca:	33e8      	adds	r3, #232	; 0xe8
 8000ecc:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ece:	6013      	str	r3, [r2, #0]
			speed = -number * count / 4; //obr min
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ed2:	edd3 7a00 	vldr	s15, [r3]
 8000ed6:	eeb1 7a67 	vneg.f32	s14, s15
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	ee07 3a90 	vmov	s15, r3
 8000ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eea:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000eee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ef6:	ee17 3a90 	vmov	r3, s15
 8000efa:	b21a      	sxth	r2, r3
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000efe:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	200001cc 	.word	0x200001cc
 8000f18:	200000b4 	.word	0x200000b4
 8000f1c:	20000180 	.word	0x20000180
 8000f20:	20000178 	.word	0x20000178
 8000f24:	20000000 	.word	0x20000000
 8000f28:	2000017c 	.word	0x2000017c

08000f2c <map>:
int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	69b9      	ldr	r1, [r7, #24]
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	1a8a      	subs	r2, r1, r2
 8000f46:	fb02 f203 	mul.w	r2, r2, r3
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	fb92 f2f3 	sdiv	r2, r2, r3
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	4413      	add	r3, r2
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f001 f858 	bl	800201e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f8e5 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f7ff fecd 	bl	8000d10 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f76:	f000 fb5b 	bl	8001630 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000f7a:	f000 ff67 	bl	8001e4c <MX_USART1_UART_Init>
  MX_TIM17_Init();
 8000f7e:	f000 fcaf 	bl	80018e0 <MX_TIM17_Init>
  MX_TIM15_Init();
 8000f82:	f000 fc5b 	bl	800183c <MX_TIM15_Init>
  MX_TIM20_Init();
 8000f86:	f000 fd25 	bl	80019d4 <MX_TIM20_Init>
  MX_TIM4_Init();
 8000f8a:	f000 fc01 	bl	8001790 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000f8e:	f000 fba9 	bl	80016e4 <MX_TIM3_Init>
  MX_LPUART1_UART_Init();
 8000f92:	f000 ff11 	bl	8001db8 <MX_LPUART1_UART_Init>
  MX_ADC3_Init();
 8000f96:	f7ff fe15 	bl	8000bc4 <MX_ADC3_Init>
	// HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
#if STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_SLAVE_TIM
  stepper_init(&stepper, &htim2, TIM_CHANNEL_3, &htim1);

#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
	stepper_init(&stepper, &htim2, TIM_CHANNEL_3);
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	4952      	ldr	r1, [pc, #328]	; (80010e8 <main+0x184>)
 8000f9e:	4853      	ldr	r0, [pc, #332]	; (80010ec <main+0x188>)
 8000fa0:	f000 f961 	bl	8001266 <stepper_init>
#endif
	direction dir = CW;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	71fb      	strb	r3, [r7, #7]
//stepper_set_continous(&stepper, dir, 10);

//----------------------------------------SILNIK DC------------------------------------------

	//timer do PWM DC
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4851      	ldr	r0, [pc, #324]	; (80010f0 <main+0x18c>)
 8000fac:	f003 ff2e 	bl	8004e0c <HAL_TIM_PWM_Start>
	//	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 500);
	// timer do przerwań- pomiar predkosci silnika dc
	HAL_TIM_Base_Start_IT(&htim15);
 8000fb0:	4850      	ldr	r0, [pc, #320]	; (80010f4 <main+0x190>)
 8000fb2:	f003 fe63 	bl	8004c7c <HAL_TIM_Base_Start_IT>

	// timer do enkodera DC
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000fb6:	213c      	movs	r1, #60	; 0x3c
 8000fb8:	484f      	ldr	r0, [pc, #316]	; (80010f8 <main+0x194>)
 8000fba:	f004 fac7 	bl	800554c <HAL_TIM_Encoder_Start>

	// timer enkodera do krokowego
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000fbe:	213c      	movs	r1, #60	; 0x3c
 8000fc0:	484e      	ldr	r0, [pc, #312]	; (80010fc <main+0x198>)
 8000fc2:	f004 fac3 	bl	800554c <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// USTAWIANIE PWM PRZEZ ADC
			  HAL_ADC_Start(&hadc3);
 8000fc6:	484e      	ldr	r0, [pc, #312]	; (8001100 <main+0x19c>)
 8000fc8:	f001 fc9c 	bl	8002904 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc3, 100);
 8000fcc:	2164      	movs	r1, #100	; 0x64
 8000fce:	484c      	ldr	r0, [pc, #304]	; (8001100 <main+0x19c>)
 8000fd0:	f001 fd62 	bl	8002a98 <HAL_ADC_PollForConversion>
			  ADC_measurment=HAL_ADC_GetValue(&hadc3);
 8000fd4:	484a      	ldr	r0, [pc, #296]	; (8001100 <main+0x19c>)
 8000fd6:	f001 fe53 	bl	8002c80 <HAL_ADC_GetValue>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a49      	ldr	r2, [pc, #292]	; (8001104 <main+0x1a0>)
 8000fde:	6013      	str	r3, [r2, #0]
			  ADC_voltage = ((float)ADC_measurment/(float)ADC_REG_MAX)*ADC_VOLTAGE_MAX;
 8000fe0:	4b48      	ldr	r3, [pc, #288]	; (8001104 <main+0x1a0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000fec:	eddf 7a46 	vldr	s15, [pc, #280]	; 8001108 <main+0x1a4>
 8000ff0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ff8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800110c <main+0x1a8>
 8000ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001000:	4b43      	ldr	r3, [pc, #268]	; (8001110 <main+0x1ac>)
 8001002:	edc3 7a00 	vstr	s15, [r3]
			  ADC_voltage_mV = (uint32_t)(1000.0*ADC_voltage);
 8001006:	4b42      	ldr	r3, [pc, #264]	; (8001110 <main+0x1ac>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fbe6 	bl	80007dc <__aeabi_f2d>
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b3f      	ldr	r3, [pc, #252]	; (8001114 <main+0x1b0>)
 8001016:	f7ff f953 	bl	80002c0 <__aeabi_dmul>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fc33 	bl	800088c <__aeabi_d2uiz>
 8001026:	4603      	mov	r3, r0
 8001028:	4a3b      	ldr	r2, [pc, #236]	; (8001118 <main+0x1b4>)
 800102a:	6013      	str	r3, [r2, #0]
			  pwm=map(ADC_voltage_mV,100,1550,0,100);
 800102c:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <main+0x1b4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2300      	movs	r3, #0
 8001038:	f240 620e 	movw	r2, #1550	; 0x60e
 800103c:	2164      	movs	r1, #100	; 0x64
 800103e:	f7ff ff75 	bl	8000f2c <map>
 8001042:	4603      	mov	r3, r0
 8001044:	4a35      	ldr	r2, [pc, #212]	; (800111c <main+0x1b8>)
 8001046:	6013      	str	r3, [r2, #0]
			  __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, pwm*10);
 8001048:	4b34      	ldr	r3, [pc, #208]	; (800111c <main+0x1b8>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	461a      	mov	r2, r3
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <main+0x18c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	635a      	str	r2, [r3, #52]	; 0x34
			  count_stepper = __HAL_TIM_GET_COUNTER(&htim3);
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <main+0x198>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	461a      	mov	r2, r3
 8001064:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <main+0x1bc>)
 8001066:	601a      	str	r2, [r3, #0]

			  HAL_Delay(1000);
 8001068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800106c:	f001 f848 	bl	8002100 <HAL_Delay>

			  // KROKOWY NA PRZYCISK

			  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 8001070:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001074:	482b      	ldr	r0, [pc, #172]	; (8001124 <main+0x1c0>)
 8001076:	f002 fd31 	bl	8003adc <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d009      	beq.n	8001094 <main+0x130>
				  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <main+0x198>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
				  stepper_set_angle(&stepper, dir, 10, 200); // ilosć krokow jako 4 argument
 8001088:	79f9      	ldrb	r1, [r7, #7]
 800108a:	23c8      	movs	r3, #200	; 0xc8
 800108c:	220a      	movs	r2, #10
 800108e:	4817      	ldr	r0, [pc, #92]	; (80010ec <main+0x188>)
 8001090:	f000 f8fc 	bl	800128c <stepper_set_angle>
			  }

			  if (HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin)) {
 8001094:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001098:	4823      	ldr	r0, [pc, #140]	; (8001128 <main+0x1c4>)
 800109a:	f002 fd1f 	bl	8003adc <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d009      	beq.n	80010b8 <main+0x154>
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2120      	movs	r1, #32
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ac:	f002 fd2e 	bl	8003b0c <HAL_GPIO_WritePin>
				  sign = 1;
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <main+0x1c8>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e009      	b.n	80010cc <main+0x168>
			  }
			  else {
				  sign = -1;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <main+0x1c8>)
 80010ba:	f04f 32ff 	mov.w	r2, #4294967295
 80010be:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2120      	movs	r1, #32
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c8:	f002 fd20 	bl	8003b0c <HAL_GPIO_WritePin>
			  //				HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), 1000);
			  //				sprintf((char*) msg, "%d \r\n", speed);
			  //				HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), 1000);

			  // UART TEST
			  sprintf((char*) msg, "%d \r\n", 12);
 80010cc:	220c      	movs	r2, #12
 80010ce:	4918      	ldr	r1, [pc, #96]	; (8001130 <main+0x1cc>)
 80010d0:	4818      	ldr	r0, [pc, #96]	; (8001134 <main+0x1d0>)
 80010d2:	f006 fad9 	bl	8007688 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*) msg, 10, 1000);
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	220a      	movs	r2, #10
 80010dc:	4915      	ldr	r1, [pc, #84]	; (8001134 <main+0x1d0>)
 80010de:	4816      	ldr	r0, [pc, #88]	; (8001138 <main+0x1d4>)
 80010e0:	f005 fcd0 	bl	8006a84 <HAL_UART_Transmit>
	while (1) {
 80010e4:	e76f      	b.n	8000fc6 <main+0x62>
 80010e6:	bf00      	nop
 80010e8:	200002fc 	.word	0x200002fc
 80010ec:	200000a0 	.word	0x200000a0
 80010f0:	20000218 	.word	0x20000218
 80010f4:	200001cc 	.word	0x200001cc
 80010f8:	20000180 	.word	0x20000180
 80010fc:	20000264 	.word	0x20000264
 8001100:	200000c4 	.word	0x200000c4
 8001104:	20000090 	.word	0x20000090
 8001108:	00000fff 	.word	0x00000fff
 800110c:	40533333 	.word	0x40533333
 8001110:	20000094 	.word	0x20000094
 8001114:	408f4000 	.word	0x408f4000
 8001118:	20000098 	.word	0x20000098
 800111c:	2000009c 	.word	0x2000009c
 8001120:	20000174 	.word	0x20000174
 8001124:	48000800 	.word	0x48000800
 8001128:	48000400 	.word	0x48000400
 800112c:	200000b4 	.word	0x200000b4
 8001130:	08007efc 	.word	0x08007efc
 8001134:	20000134 	.word	0x20000134
 8001138:	200003d8 	.word	0x200003d8

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0a8      	sub	sp, #160	; 0xa0
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001146:	2238      	movs	r2, #56	; 0x38
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f006 fa94 	bl	8007678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2250      	movs	r2, #80	; 0x50
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f006 fa86 	bl	8007678 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001170:	f002 fd08 	bl	8003b84 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001174:	2302      	movs	r3, #2
 8001176:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117e:	2340      	movs	r3, #64	; 0x40
 8001180:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800118e:	2301      	movs	r3, #1
 8001190:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001194:	230a      	movs	r3, #10
 8001196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 fd9b 	bl	8003cec <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011bc:	f000 f84e 	bl	800125c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2303      	movs	r3, #3
 80011c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011d8:	2102      	movs	r1, #2
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 f89e 	bl	800431c <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011e6:	f000 f839 	bl	800125c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <SystemClock_Config+0xdc>)
 80011ec:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80011f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 faa8 	bl	8004754 <HAL_RCCEx_PeriphCLKConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800120a:	f000 f827 	bl	800125c <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	37a0      	adds	r7, #160	; 0xa0
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	00010021 	.word	0x00010021

0800121c <HAL_TIM_PWM_PulseFinishedCallback>:
	{
		stepper_stop(&stepper);
	}
}
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	if (htim->Instance == stepper.timer.htim->Instance) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d10d      	bne.n	800124e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		stepper.step_counter++;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	3301      	adds	r3, #1
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800123a:	60d3      	str	r3, [r2, #12]

		if (stepper.step_counter >= stepper.steps_to_count) {
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	429a      	cmp	r2, r3
 8001246:	d302      	bcc.n	800124e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
			stepper_stop(&stepper);
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800124a:	f000 f855 	bl	80012f8 <stepper_stop>
		}
	}
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200000a0 	.word	0x200000a0

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001264:	e7fe      	b.n	8001264 <Error_Handler+0x8>

08001266 <stepper_init>:
	_stepper->timer.channel = _channel;
	_stepper->slave_timer.htim = _slave_timer;
}
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
void stepper_init(struct stepper_s *_stepper, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
	_stepper->timer.htim = _htim;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	601a      	str	r2, [r3, #0]
	_stepper->timer.channel = _channel;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	605a      	str	r2, [r3, #4]
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <stepper_set_angle>:

	HAL_TIM_PWM_Start(_stepper->timer.htim, _stepper->timer.channel);
}

void stepper_set_angle(struct stepper_s *_stepper, direction _dir, uint32_t _speed, uint32_t _angle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	460b      	mov	r3, r1
 800129a:	72fb      	strb	r3, [r7, #11]
	_stepper->mode = angle;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2201      	movs	r2, #1
 80012a0:	721a      	strb	r2, [r3, #8]

	stepper_set_direction(_stepper, _dir);
 80012a2:	7afb      	ldrb	r3, [r7, #11]
 80012a4:	4619      	mov	r1, r3
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 f870 	bl	800138c <stepper_set_direction>
	stepper_set_speed(_stepper, _speed);
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 f88c 	bl	80013cc <stepper_set_speed>

	_stepper->step_counter = 0;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
	_stepper->steps_to_count = _angle * (STEP_PER_REVOLUTION * MICRO_STEP)/200;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	22c8      	movs	r2, #200	; 0xc8
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <stepper_set_angle+0x68>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	099a      	lsrs	r2, r3, #6
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	611a      	str	r2, [r3, #16]

	if(0 == _stepper->steps_to_count)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <stepper_set_angle+0x50>
	{
		stepper_stop(_stepper);
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 f80e 	bl	80012f8 <stepper_stop>
	__HAL_TIM_SET_AUTORELOAD(_stepper->slave_timer.htim, _stepper->steps_to_count - 1);
	HAL_TIM_Base_Start_IT(_stepper->slave_timer.htim);

	HAL_TIM_PWM_Start(_stepper->timer.htim, _stepper->timer.channel);
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4619      	mov	r1, r3
 80012e6:	4610      	mov	r0, r2
 80012e8:	f003 ff38 	bl	800515c <HAL_TIM_PWM_Start_IT>
#endif
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	51eb851f 	.word	0x51eb851f

080012f8 <stepper_stop>:

void stepper_stop(struct stepper_s *_stepper)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	_stepper->mode = idle;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	721a      	strb	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, 0);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <stepper_stop+0x22>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
 8001318:	e02c      	b.n	8001374 <stepper_stop+0x7c>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b04      	cmp	r3, #4
 8001320:	d105      	bne.n	800132e <stepper_stop+0x36>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2300      	movs	r3, #0
 800132a:	6393      	str	r3, [r2, #56]	; 0x38
 800132c:	e022      	b.n	8001374 <stepper_stop+0x7c>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b08      	cmp	r3, #8
 8001334:	d105      	bne.n	8001342 <stepper_stop+0x4a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2300      	movs	r3, #0
 800133e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001340:	e018      	b.n	8001374 <stepper_stop+0x7c>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d105      	bne.n	8001356 <stepper_stop+0x5e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
 8001354:	e00e      	b.n	8001374 <stepper_stop+0x7c>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b10      	cmp	r3, #16
 800135c:	d105      	bne.n	800136a <stepper_stop+0x72>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2300      	movs	r3, #0
 8001366:	6493      	str	r3, [r2, #72]	; 0x48
 8001368:	e004      	b.n	8001374 <stepper_stop+0x7c>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	64d3      	str	r3, [r2, #76]	; 0x4c
	HAL_TIM_PWM_Stop(_stepper->timer.htim, _stepper->timer.channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4619      	mov	r1, r3
 800137e:	4610      	mov	r0, r2
 8001380:	f003 fe50 	bl	8005024 <HAL_TIM_PWM_Stop>

#if STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_SLAVE_TIM
	HAL_TIM_Base_Stop_IT(_stepper->slave_timer.htim);
#endif
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <stepper_set_direction>:

void stepper_set_direction(struct stepper_s *_stepper, direction _dir)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
	if(_dir == CCW)
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <stepper_set_direction+0x20>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CCW);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <stepper_set_direction+0x3c>)
 80013a6:	f002 fbb1 	bl	8003b0c <HAL_GPIO_WritePin>
	else if(_dir == CW)
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
}
 80013aa:	e008      	b.n	80013be <stepper_set_direction+0x32>
	else if(_dir == CW)
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d105      	bne.n	80013be <stepper_set_direction+0x32>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <stepper_set_direction+0x3c>)
 80013ba:	f002 fba7 	bl	8003b0c <HAL_GPIO_WritePin>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	48000400 	.word	0x48000400

080013cc <stepper_set_speed>:

void stepper_set_speed(struct stepper_s *_stepper, uint32_t _speed)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
	uint32_t counter, freq;

	if(_speed > 100)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	2b64      	cmp	r3, #100	; 0x64
 80013da:	d902      	bls.n	80013e2 <stepper_set_speed+0x16>
	{
		_speed = 100;
 80013dc:	2364      	movs	r3, #100	; 0x64
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	e006      	b.n	80013f0 <stepper_set_speed+0x24>
	}
	else if(_speed == 0)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d103      	bne.n	80013f0 <stepper_set_speed+0x24>
	{
		stepper_stop(_stepper);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff85 	bl	80012f8 <stepper_stop>
		return;
 80013ee:	e068      	b.n	80014c2 <stepper_set_speed+0xf6>
	}

	freq = (_speed * (STEPPER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ))/STEPPER_MOTOR_MAX_SPEED;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f240 726c 	movw	r2, #1900	; 0x76c
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <stepper_set_speed+0xfc>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	095b      	lsrs	r3, r3, #5
 8001402:	60fb      	str	r3, [r7, #12]
	counter = HAL_RCC_GetPCLK1Freq() / (_stepper->timer.htim->Init.Prescaler * freq);
 8001404:	f003 f934 	bl	8004670 <HAL_RCC_GetPCLK1Freq>
 8001408:	4601      	mov	r1, r0
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	fbb1 f3f3 	udiv	r3, r1, r3
 800141a:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(_stepper->timer.htim, 0);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(_stepper->timer.htim, counter - 1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	3a01      	subs	r2, #1
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	3a01      	subs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, (counter/2) - 1);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d107      	bne.n	8001454 <stepper_set_speed+0x88>
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	085a      	lsrs	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3a01      	subs	r2, #1
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
 8001452:	e036      	b.n	80014c2 <stepper_set_speed+0xf6>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d107      	bne.n	800146c <stepper_set_speed+0xa0>
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	085b      	lsrs	r3, r3, #1
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	3b01      	subs	r3, #1
 8001468:	6393      	str	r3, [r2, #56]	; 0x38
 800146a:	e02a      	b.n	80014c2 <stepper_set_speed+0xf6>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b08      	cmp	r3, #8
 8001472:	d107      	bne.n	8001484 <stepper_set_speed+0xb8>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	085b      	lsrs	r3, r3, #1
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	3b01      	subs	r3, #1
 8001480:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001482:	e01e      	b.n	80014c2 <stepper_set_speed+0xf6>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b0c      	cmp	r3, #12
 800148a:	d107      	bne.n	800149c <stepper_set_speed+0xd0>
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	3b01      	subs	r3, #1
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	e012      	b.n	80014c2 <stepper_set_speed+0xf6>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b10      	cmp	r3, #16
 80014a2:	d107      	bne.n	80014b4 <stepper_set_speed+0xe8>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6493      	str	r3, [r2, #72]	; 0x48
 80014b2:	e006      	b.n	80014c2 <stepper_set_speed+0xf6>
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	3b01      	subs	r3, #1
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	51eb851f 	.word	0x51eb851f

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_MspInit+0x44>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_MspInit+0x44>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6613      	str	r3, [r2, #96]	; 0x60
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_MspInit+0x44>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_MspInit+0x44>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x44>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6593      	str	r3, [r2, #88]	; 0x58
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x44>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001502:	f002 fbe3 	bl	8003ccc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <NMI_Handler+0x4>

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler+0x4>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <UsageFault_Handler+0x4>

08001532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001560:	f000 fdb0 	bl	80020c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800156e:	f004 f87b 	bl	8005668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200001cc 	.word	0x200001cc

0800157c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <TIM2_IRQHandler+0x10>)
 8001582:	f004 f871 	bl	8005668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200002fc 	.word	0x200002fc

08001590 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001594:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001598:	f002 fad0 	bl	8003b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a8:	4a14      	ldr	r2, [pc, #80]	; (80015fc <_sbrk+0x5c>)
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <_sbrk+0x60>)
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <_sbrk+0x64>)
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <_sbrk+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d207      	bcs.n	80015e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d0:	f006 f828 	bl	8007624 <__errno>
 80015d4:	4603      	mov	r3, r0
 80015d6:	220c      	movs	r2, #12
 80015d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	e009      	b.n	80015f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <_sbrk+0x64>)
 80015f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	2001c000 	.word	0x2001c000
 8001600:	00000400 	.word	0x00000400
 8001604:	200000b8 	.word	0x200000b8
 8001608:	20000480 	.word	0x20000480

0800160c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <SystemInit+0x20>)
 8001612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <SystemInit+0x20>)
 8001618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <MX_TIM2_Init>:
TIM_HandleTypeDef htim17;
TIM_HandleTypeDef htim20;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001642:	463b      	mov	r3, r7
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <MX_TIM2_Init+0xb0>)
 8001656:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800165a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <MX_TIM2_Init+0xb0>)
 800165e:	224f      	movs	r2, #79	; 0x4f
 8001660:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <MX_TIM2_Init+0xb0>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <MX_TIM2_Init+0xb0>)
 800166a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800166e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_TIM2_Init+0xb0>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_TIM2_Init+0xb0>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800167c:	4818      	ldr	r0, [pc, #96]	; (80016e0 <MX_TIM2_Init+0xb0>)
 800167e:	f003 fb6d 	bl	8004d5c <HAL_TIM_PWM_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001688:	f7ff fde8 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 800168c:	2360      	movs	r3, #96	; 0x60
 800168e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <MX_TIM2_Init+0xb0>)
 800169c:	f005 f81c 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80016a6:	f7ff fdd9 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016aa:	2360      	movs	r3, #96	; 0x60
 80016ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80016ae:	2332      	movs	r3, #50	; 0x32
 80016b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	2208      	movs	r2, #8
 80016be:	4619      	mov	r1, r3
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM2_Init+0xb0>)
 80016c2:	f004 f951 	bl	8005968 <HAL_TIM_PWM_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80016cc:	f7ff fdc6 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MX_TIM2_Init+0xb0>)
 80016d2:	f000 fb17 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200002fc 	.word	0x200002fc

080016e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	2224      	movs	r2, #36	; 0x24
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f005 ffc0 	bl	8007678 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	463b      	mov	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <MX_TIM3_Init+0xa4>)
 8001704:	4a21      	ldr	r2, [pc, #132]	; (800178c <MX_TIM3_Init+0xa8>)
 8001706:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <MX_TIM3_Init+0xa4>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <MX_TIM3_Init+0xa4>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_TIM3_Init+0xa4>)
 8001716:	f640 72ff 	movw	r2, #4095	; 0xfff
 800171a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_TIM3_Init+0xa4>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_TIM3_Init+0xa4>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001728:	2303      	movs	r3, #3
 800172a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001730:	2301      	movs	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001740:	2301      	movs	r3, #1
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4619      	mov	r1, r3
 8001752:	480d      	ldr	r0, [pc, #52]	; (8001788 <MX_TIM3_Init+0xa4>)
 8001754:	f003 fe54 	bl	8005400 <HAL_TIM_Encoder_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800175e:	f7ff fd7d 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800176a:	463b      	mov	r3, r7
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <MX_TIM3_Init+0xa4>)
 8001770:	f004 ffb2 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800177a:	f7ff fd6f 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3730      	adds	r7, #48	; 0x30
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000264 	.word	0x20000264
 800178c:	40000400 	.word	0x40000400

08001790 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	; 0x30
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2224      	movs	r2, #36	; 0x24
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f005 ff6a 	bl	8007678 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a4:	463b      	mov	r3, r7
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <MX_TIM4_Init+0xa4>)
 80017b0:	4a21      	ldr	r2, [pc, #132]	; (8001838 <MX_TIM4_Init+0xa8>)
 80017b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_TIM4_Init+0xa4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <MX_TIM4_Init+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_TIM4_Init+0xa4>)
 80017c2:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80017c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_TIM4_Init+0xa4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <MX_TIM4_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017d4:	2303      	movs	r3, #3
 80017d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017dc:	2301      	movs	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017ec:	2301      	movs	r3, #1
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	4619      	mov	r1, r3
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <MX_TIM4_Init+0xa4>)
 8001800:	f003 fdfe 	bl	8005400 <HAL_TIM_Encoder_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800180a:	f7ff fd27 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	4619      	mov	r1, r3
 800181a:	4806      	ldr	r0, [pc, #24]	; (8001834 <MX_TIM4_Init+0xa4>)
 800181c:	f004 ff5c 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001826:	f7ff fd19 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	3730      	adds	r7, #48	; 0x30
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000180 	.word	0x20000180
 8001838:	40000800 	.word	0x40000800

0800183c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800185a:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <MX_TIM15_Init+0x9c>)
 800185c:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <MX_TIM15_Init+0xa0>)
 800185e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <MX_TIM15_Init+0x9c>)
 8001862:	224f      	movs	r2, #79	; 0x4f
 8001864:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <MX_TIM15_Init+0x9c>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <MX_TIM15_Init+0x9c>)
 800186e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001872:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <MX_TIM15_Init+0x9c>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_TIM15_Init+0x9c>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <MX_TIM15_Init+0x9c>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001886:	4814      	ldr	r0, [pc, #80]	; (80018d8 <MX_TIM15_Init+0x9c>)
 8001888:	f003 f9a0 	bl	8004bcc <HAL_TIM_Base_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001892:	f7ff fce3 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	4619      	mov	r1, r3
 80018a2:	480d      	ldr	r0, [pc, #52]	; (80018d8 <MX_TIM15_Init+0x9c>)
 80018a4:	f004 f970 	bl	8005b88 <HAL_TIM_ConfigClockSource>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80018ae:	f7ff fcd5 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <MX_TIM15_Init+0x9c>)
 80018c0:	f004 ff0a 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80018ca:	f7ff fcc7 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	3720      	adds	r7, #32
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200001cc 	.word	0x200001cc
 80018dc:	40014000 	.word	0x40014000

080018e0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b094      	sub	sp, #80	; 0x50
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018fa:	463b      	mov	r3, r7
 80018fc:	2234      	movs	r2, #52	; 0x34
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f005 feb9 	bl	8007678 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001906:	4b31      	ldr	r3, [pc, #196]	; (80019cc <MX_TIM17_Init+0xec>)
 8001908:	4a31      	ldr	r2, [pc, #196]	; (80019d0 <MX_TIM17_Init+0xf0>)
 800190a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <MX_TIM17_Init+0xec>)
 800190e:	224f      	movs	r2, #79	; 0x4f
 8001910:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <MX_TIM17_Init+0xec>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8001918:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <MX_TIM17_Init+0xec>)
 800191a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800191e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <MX_TIM17_Init+0xec>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <MX_TIM17_Init+0xec>)
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <MX_TIM17_Init+0xec>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001932:	4826      	ldr	r0, [pc, #152]	; (80019cc <MX_TIM17_Init+0xec>)
 8001934:	f003 f94a 	bl	8004bcc <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800193e:	f7ff fc8d 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001942:	4822      	ldr	r0, [pc, #136]	; (80019cc <MX_TIM17_Init+0xec>)
 8001944:	f003 fa0a 	bl	8004d5c <HAL_TIM_PWM_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800194e:	f7ff fc85 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001952:	2360      	movs	r3, #96	; 0x60
 8001954:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800195a:	2300      	movs	r3, #0
 800195c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800195e:	2300      	movs	r3, #0
 8001960:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001972:	2200      	movs	r2, #0
 8001974:	4619      	mov	r1, r3
 8001976:	4815      	ldr	r0, [pc, #84]	; (80019cc <MX_TIM17_Init+0xec>)
 8001978:	f003 fff6 	bl	8005968 <HAL_TIM_PWM_ConfigChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001982:	f7ff fc6b 	bl	800125c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800199a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	4619      	mov	r1, r3
 80019ac:	4807      	ldr	r0, [pc, #28]	; (80019cc <MX_TIM17_Init+0xec>)
 80019ae:	f004 ff21 	bl	80067f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80019b8:	f7ff fc50 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <MX_TIM17_Init+0xec>)
 80019be:	f000 f9a1 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 80019c2:	bf00      	nop
 80019c4:	3750      	adds	r7, #80	; 0x50
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000218 	.word	0x20000218
 80019d0:	40014800 	.word	0x40014800

080019d4 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	2224      	movs	r2, #36	; 0x24
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f005 fe48 	bl	8007678 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	463b      	mov	r3, r7
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80019f2:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <MX_TIM20_Init+0xac>)
 80019f4:	4a23      	ldr	r2, [pc, #140]	; (8001a84 <MX_TIM20_Init+0xb0>)
 80019f6:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <MX_TIM20_Init+0xac>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <MX_TIM20_Init+0xac>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65000;
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <MX_TIM20_Init+0xac>)
 8001a06:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001a0a:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <MX_TIM20_Init+0xac>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <MX_TIM20_Init+0xac>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <MX_TIM20_Init+0xac>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a26:	2301      	movs	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a36:	2301      	movs	r3, #1
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4619      	mov	r1, r3
 8001a48:	480d      	ldr	r0, [pc, #52]	; (8001a80 <MX_TIM20_Init+0xac>)
 8001a4a:	f003 fcd9 	bl	8005400 <HAL_TIM_Encoder_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8001a54:	f7ff fc02 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001a64:	463b      	mov	r3, r7
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_TIM20_Init+0xac>)
 8001a6a:	f004 fe35 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8001a74:	f7ff fbf2 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	3730      	adds	r7, #48	; 0x30
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200002b0 	.word	0x200002b0
 8001a84:	40015000 	.word	0x40015000

08001a88 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a98:	d113      	bne.n	8001ac2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_TIM_PWM_MspInit+0x44>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <HAL_TIM_PWM_MspInit+0x44>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_TIM_PWM_MspInit+0x44>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	201c      	movs	r0, #28
 8001ab8:	f001 fe59 	bl	800376e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001abc:	201c      	movs	r0, #28
 8001abe:	f001 fe70 	bl	80037a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b090      	sub	sp, #64	; 0x40
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a62      	ldr	r2, [pc, #392]	; (8001c78 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d145      	bne.n	8001b7e <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001af2:	4b62      	ldr	r3, [pc, #392]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af6:	4a61      	ldr	r2, [pc, #388]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6593      	str	r3, [r2, #88]	; 0x58
 8001afe:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b5c      	ldr	r3, [pc, #368]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	4a5b      	ldr	r2, [pc, #364]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b16:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	4b56      	ldr	r3, [pc, #344]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	4a55      	ldr	r2, [pc, #340]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2e:	4b53      	ldr	r3, [pc, #332]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	623b      	str	r3, [r7, #32]
 8001b38:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b52:	4619      	mov	r1, r3
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b58:	f001 fe3e 	bl	80037d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4842      	ldr	r0, [pc, #264]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8001b78:	f001 fe2e 	bl	80037d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8001b7c:	e078      	b.n	8001c70 <HAL_TIM_Encoder_MspInit+0x1a0>
  else if(tim_encoderHandle->Instance==TIM4)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a40      	ldr	r2, [pc, #256]	; (8001c84 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d12a      	bne.n	8001bde <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b88:	4b3c      	ldr	r3, [pc, #240]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	4a3b      	ldr	r2, [pc, #236]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6593      	str	r3, [r2, #88]	; 0x58
 8001b94:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	4a35      	ldr	r2, [pc, #212]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bac:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bb8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001bca:	230a      	movs	r3, #10
 8001bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd8:	f001 fdfe 	bl	80037d8 <HAL_GPIO_Init>
}
 8001bdc:	e048      	b.n	8001c70 <HAL_TIM_Encoder_MspInit+0x1a0>
  else if(tim_encoderHandle->Instance==TIM20)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a29      	ldr	r2, [pc, #164]	; (8001c88 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d143      	bne.n	8001c70 <HAL_TIM_Encoder_MspInit+0x1a0>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bec:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bf2:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c30:	2304      	movs	r3, #4
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8001c40:	2306      	movs	r3, #6
 8001c42:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480d      	ldr	r0, [pc, #52]	; (8001c80 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8001c4c:	f001 fdc4 	bl	80037d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c50:	2304      	movs	r3, #4
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001c60:	2303      	movs	r3, #3
 8001c62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4808      	ldr	r0, [pc, #32]	; (8001c8c <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001c6c:	f001 fdb4 	bl	80037d8 <HAL_GPIO_Init>
}
 8001c70:	bf00      	nop
 8001c72:	3740      	adds	r7, #64	; 0x40
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000800 	.word	0x48000800
 8001c84:	40000800 	.word	0x40000800
 8001c88:	40015000 	.word	0x40015000
 8001c8c:	48000400 	.word	0x48000400

08001c90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a16      	ldr	r2, [pc, #88]	; (8001cf8 <HAL_TIM_Base_MspInit+0x68>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d114      	bne.n	8001ccc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <HAL_TIM_Base_MspInit+0x6c>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	4a15      	ldr	r2, [pc, #84]	; (8001cfc <HAL_TIM_Base_MspInit+0x6c>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6613      	str	r3, [r2, #96]	; 0x60
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <HAL_TIM_Base_MspInit+0x6c>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2018      	movs	r0, #24
 8001cc0:	f001 fd55 	bl	800376e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001cc4:	2018      	movs	r0, #24
 8001cc6:	f001 fd6c 	bl	80037a2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001cca:	e010      	b.n	8001cee <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM17)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_TIM_Base_MspInit+0x70>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10b      	bne.n	8001cee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_TIM_Base_MspInit+0x6c>)
 8001cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cda:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <HAL_TIM_Base_MspInit+0x6c>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_TIM_Base_MspInit+0x6c>)
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40014000 	.word	0x40014000
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40014800 	.word	0x40014800

08001d04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d24:	d11e      	bne.n	8001d64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_TIM_MspPostInit+0xac>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	4a21      	ldr	r2, [pc, #132]	; (8001db0 <HAL_TIM_MspPostInit+0xac>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <HAL_TIM_MspPostInit+0xac>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA9     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001d50:	230a      	movs	r3, #10
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5e:	f001 fd3b 	bl	80037d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001d62:	e021      	b.n	8001da8 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM17)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <HAL_TIM_MspPostInit+0xb0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d11c      	bne.n	8001da8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <HAL_TIM_MspPostInit+0xac>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <HAL_TIM_MspPostInit+0xac>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_TIM_MspPostInit+0xac>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001d96:	2301      	movs	r3, #1
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da4:	f001 fd18 	bl	80037d8 <HAL_GPIO_Init>
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40014800 	.word	0x40014800

08001db8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001dbc:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001dbe:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <MX_LPUART1_UART_Init+0x8c>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001dc4:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <MX_LPUART1_UART_Init+0x90>)
 8001dc6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001ddc:	220c      	movs	r2, #12
 8001dde:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001df8:	4811      	ldr	r0, [pc, #68]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001dfa:	f004 fdf3 	bl	80069e4 <HAL_UART_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001e04:	f7ff fa2a 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e08:	2100      	movs	r1, #0
 8001e0a:	480d      	ldr	r0, [pc, #52]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001e0c:	f005 fb40 	bl	8007490 <HAL_UARTEx_SetTxFifoThreshold>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001e16:	f7ff fa21 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4808      	ldr	r0, [pc, #32]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001e1e:	f005 fb75 	bl	800750c <HAL_UARTEx_SetRxFifoThreshold>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001e28:	f7ff fa18 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <MX_LPUART1_UART_Init+0x88>)
 8001e2e:	f005 faf6 	bl	800741e <HAL_UARTEx_DisableFifoMode>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001e38:	f7ff fa10 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000348 	.word	0x20000348
 8001e44:	40008000 	.word	0x40008000
 8001e48:	00033324 	.word	0x00033324

08001e4c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e50:	4b22      	ldr	r3, [pc, #136]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001e52:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <MX_USART1_UART_Init+0x94>)
 8001e54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001e58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001e72:	220c      	movs	r2, #12
 8001e74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7c:	4b17      	ldr	r3, [pc, #92]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e94:	4811      	ldr	r0, [pc, #68]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001e96:	f004 fda5 	bl	80069e4 <HAL_UART_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ea0:	f7ff f9dc 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	480d      	ldr	r0, [pc, #52]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001ea8:	f005 faf2 	bl	8007490 <HAL_UARTEx_SetTxFifoThreshold>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001eb2:	f7ff f9d3 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4808      	ldr	r0, [pc, #32]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001eba:	f005 fb27 	bl	800750c <HAL_UARTEx_SetRxFifoThreshold>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ec4:	f7ff f9ca 	bl	800125c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <MX_USART1_UART_Init+0x90>)
 8001eca:	f005 faa8 	bl	800741e <HAL_UARTEx_DisableFifoMode>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ed4:	f7ff f9c2 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	200003d8 	.word	0x200003d8
 8001ee0:	40013800 	.word	0x40013800

08001ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	; 0x30
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2e      	ldr	r2, [pc, #184]	; (8001fbc <HAL_UART_MspInit+0xd8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d129      	bne.n	8001f5a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <HAL_UART_MspInit+0xdc>)
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	4a2d      	ldr	r2, [pc, #180]	; (8001fc0 <HAL_UART_MspInit+0xdc>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_UART_MspInit+0xdc>)
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_UART_MspInit+0xdc>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	4a27      	ldr	r2, [pc, #156]	; (8001fc0 <HAL_UART_MspInit+0xdc>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2a:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <HAL_UART_MspInit+0xdc>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001f36:	230c      	movs	r3, #12
 8001f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001f46:	230c      	movs	r3, #12
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f54:	f001 fc40 	bl	80037d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f58:	e02c      	b.n	8001fb4 <HAL_UART_MspInit+0xd0>
  else if(uartHandle->Instance==USART1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_UART_MspInit+0xe0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d127      	bne.n	8001fb4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f64:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_UART_MspInit+0xdc>)
 8001f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f68:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <HAL_UART_MspInit+0xdc>)
 8001f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6e:	6613      	str	r3, [r2, #96]	; 0x60
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <HAL_UART_MspInit+0xdc>)
 8001f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_UART_MspInit+0xdc>)
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f80:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <HAL_UART_MspInit+0xdc>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_UART_MspInit+0xdc>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f94:	2330      	movs	r3, #48	; 0x30
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fa4:	2307      	movs	r3, #7
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4619      	mov	r1, r3
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <HAL_UART_MspInit+0xe4>)
 8001fb0:	f001 fc12 	bl	80037d8 <HAL_GPIO_Init>
}
 8001fb4:	bf00      	nop
 8001fb6:	3730      	adds	r7, #48	; 0x30
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40008000 	.word	0x40008000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	48000800 	.word	0x48000800

08001fcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd0:	480d      	ldr	r0, [pc, #52]	; (8002008 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fd2:	490e      	ldr	r1, [pc, #56]	; (800200c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <LoopForever+0xe>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe8:	4c0b      	ldr	r4, [pc, #44]	; (8002018 <LoopForever+0x16>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ff6:	f7ff fb09 	bl	800160c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f005 fb19 	bl	8007630 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ffe:	f7fe ffb1 	bl	8000f64 <main>

08002002 <LoopForever>:

LoopForever:
    b LoopForever
 8002002:	e7fe      	b.n	8002002 <LoopForever>
  ldr   r0, =_estack
 8002004:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002010:	08007f88 	.word	0x08007f88
  ldr r2, =_sbss
 8002014:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002018:	2000047c 	.word	0x2000047c

0800201c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC1_2_IRQHandler>

0800201e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002028:	2003      	movs	r0, #3
 800202a:	f001 fb95 	bl	8003758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800202e:	2000      	movs	r0, #0
 8002030:	f000 f80e 	bl	8002050 <HAL_InitTick>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	71fb      	strb	r3, [r7, #7]
 800203e:	e001      	b.n	8002044 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002040:	f7ff fa44 	bl	80014cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002044:	79fb      	ldrb	r3, [r7, #7]

}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800205c:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_InitTick+0x68>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d022      	beq.n	80020aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_InitTick+0x6c>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_InitTick+0x68>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002070:	fbb1 f3f3 	udiv	r3, r1, r3
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	4618      	mov	r0, r3
 800207a:	f001 fba0 	bl	80037be <HAL_SYSTICK_Config>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10f      	bne.n	80020a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	d809      	bhi.n	800209e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800208a:	2200      	movs	r2, #0
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	f04f 30ff 	mov.w	r0, #4294967295
 8002092:	f001 fb6c 	bl	800376e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <HAL_InitTick+0x70>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e007      	b.n	80020ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	e004      	b.n	80020ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e001      	b.n	80020ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2000000c 	.word	0x2000000c
 80020bc:	20000004 	.word	0x20000004
 80020c0:	20000008 	.word	0x20000008

080020c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_IncTick+0x1c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_IncTick+0x20>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	4a03      	ldr	r2, [pc, #12]	; (80020e0 <HAL_IncTick+0x1c>)
 80020d4:	6013      	str	r3, [r2, #0]
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	20000468 	.word	0x20000468
 80020e4:	2000000c 	.word	0x2000000c

080020e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return uwTick;
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <HAL_GetTick+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000468 	.word	0x20000468

08002100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff ffee 	bl	80020e8 <HAL_GetTick>
 800210c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d004      	beq.n	8002124 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_Delay+0x40>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4413      	add	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002124:	bf00      	nop
 8002126:	f7ff ffdf 	bl	80020e8 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	429a      	cmp	r2, r3
 8002134:	d8f7      	bhi.n	8002126 <HAL_Delay+0x26>
  {
  }
}
 8002136:	bf00      	nop
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2000000c 	.word	0x2000000c

08002144 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	609a      	str	r2, [r3, #8]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	609a      	str	r2, [r3, #8]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	3360      	adds	r3, #96	; 0x60
 80021be:	461a      	mov	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <LL_ADC_SetOffset+0x44>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	4313      	orrs	r3, r2
 80021dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021e4:	bf00      	nop
 80021e6:	371c      	adds	r7, #28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	03fff000 	.word	0x03fff000

080021f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3360      	adds	r3, #96	; 0x60
 8002202:	461a      	mov	r2, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3360      	adds	r3, #96	; 0x60
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	431a      	orrs	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002256:	b480      	push	{r7}
 8002258:	b087      	sub	sp, #28
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3360      	adds	r3, #96	; 0x60
 8002266:	461a      	mov	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	431a      	orrs	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002280:	bf00      	nop
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3360      	adds	r3, #96	; 0x60
 800229c:	461a      	mov	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	615a      	str	r2, [r3, #20]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800230e:	b480      	push	{r7}
 8002310:	b087      	sub	sp, #28
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3330      	adds	r3, #48	; 0x30
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	4413      	add	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	211f      	movs	r1, #31
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	401a      	ands	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	0e9b      	lsrs	r3, r3, #26
 8002346:	f003 011f 	and.w	r1, r3, #31
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	431a      	orrs	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002366:	b480      	push	{r7}
 8002368:	b087      	sub	sp, #28
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3314      	adds	r3, #20
 8002376:	461a      	mov	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	0e5b      	lsrs	r3, r3, #25
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	4413      	add	r3, r2
 8002384:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	0d1b      	lsrs	r3, r3, #20
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2107      	movs	r1, #7
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	401a      	ands	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	0d1b      	lsrs	r3, r3, #20
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	431a      	orrs	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023b0:	bf00      	nop
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	43db      	mvns	r3, r3
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f003 0318 	and.w	r3, r3, #24
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023e0:	40d9      	lsrs	r1, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	400b      	ands	r3, r1
 80023e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ea:	431a      	orrs	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	0007ffff 	.word	0x0007ffff

08002404 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 031f 	and.w	r3, r3, #31
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800244c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6093      	str	r3, [r2, #8]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002474:	d101      	bne.n	800247a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002498:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800249c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024c4:	d101      	bne.n	80024ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <LL_ADC_IsEnabled+0x18>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <LL_ADC_IsEnabled+0x1a>
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002536:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800253a:	f043 0204 	orr.w	r2, r3, #4
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b04      	cmp	r3, #4
 8002560:	d101      	bne.n	8002566 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b08      	cmp	r3, #8
 8002586:	d101      	bne.n	800258c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1a1      	b.n	80028fa <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7fe fb63 	bl	8000c90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff3f 	bl	8002460 <LL_ADC_IsDeepPowerDownEnabled>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff25 	bl	800243c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ff5a 	bl	80024b0 <LL_ADC_IsInternalRegulatorEnabled>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d115      	bne.n	800262e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff3e 	bl	8002488 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800260c:	4b9a      	ldr	r3, [pc, #616]	; (8002878 <HAL_ADC_Init+0x2dc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	4a9a      	ldr	r2, [pc, #616]	; (800287c <HAL_ADC_Init+0x2e0>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	099b      	lsrs	r3, r3, #6
 800261a:	3301      	adds	r3, #1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002620:	e002      	b.n	8002628 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3b01      	subs	r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f9      	bne.n	8002622 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff3c 	bl	80024b0 <LL_ADC_IsInternalRegulatorEnabled>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	f043 0210 	orr.w	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff75 	bl	800254e <LL_ADC_REG_IsConversionOngoing>
 8002664:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 813a 	bne.w	80028e8 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 8136 	bne.w	80028e8 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002684:	f043 0202 	orr.w	r2, r3, #2
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff35 	bl	8002500 <LL_ADC_IsEnabled>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d137      	bne.n	800270c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a4:	d004      	beq.n	80026b0 <HAL_ADC_Init+0x114>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a75      	ldr	r2, [pc, #468]	; (8002880 <HAL_ADC_Init+0x2e4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d10f      	bne.n	80026d0 <HAL_ADC_Init+0x134>
 80026b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80026b4:	f7ff ff24 	bl	8002500 <LL_ADC_IsEnabled>
 80026b8:	4604      	mov	r4, r0
 80026ba:	4871      	ldr	r0, [pc, #452]	; (8002880 <HAL_ADC_Init+0x2e4>)
 80026bc:	f7ff ff20 	bl	8002500 <LL_ADC_IsEnabled>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4323      	orrs	r3, r4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e008      	b.n	80026e2 <HAL_ADC_Init+0x146>
 80026d0:	486c      	ldr	r0, [pc, #432]	; (8002884 <HAL_ADC_Init+0x2e8>)
 80026d2:	f7ff ff15 	bl	8002500 <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d012      	beq.n	800270c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ee:	d004      	beq.n	80026fa <HAL_ADC_Init+0x15e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a62      	ldr	r2, [pc, #392]	; (8002880 <HAL_ADC_Init+0x2e4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_Init+0x162>
 80026fa:	4a63      	ldr	r2, [pc, #396]	; (8002888 <HAL_ADC_Init+0x2ec>)
 80026fc:	e000      	b.n	8002700 <HAL_ADC_Init+0x164>
 80026fe:	4a63      	ldr	r2, [pc, #396]	; (800288c <HAL_ADC_Init+0x2f0>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f7ff fd1c 	bl	8002144 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	7f5b      	ldrb	r3, [r3, #29]
 8002710:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002716:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800271c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002722:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800272a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002736:	2b01      	cmp	r3, #1
 8002738:	d106      	bne.n	8002748 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	3b01      	subs	r3, #1
 8002740:	045b      	lsls	r3, r3, #17
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	4b49      	ldr	r3, [pc, #292]	; (8002890 <HAL_ADC_Init+0x2f4>)
 800276c:	4013      	ands	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	430b      	orrs	r3, r1
 8002776:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fedb 	bl	800254e <LL_ADC_REG_IsConversionOngoing>
 8002798:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fee8 	bl	8002574 <LL_ADC_INJ_IsConversionOngoing>
 80027a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d17b      	bne.n	80028a4 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d178      	bne.n	80028a4 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027b6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027be:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ce:	f023 0302 	bic.w	r3, r3, #2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	69b9      	ldr	r1, [r7, #24]
 80027d8:	430b      	orrs	r3, r1
 80027da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d017      	beq.n	8002814 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6911      	ldr	r1, [r2, #16]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	430b      	orrs	r3, r1
 800280e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002812:	e013      	b.n	800283c <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002822:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002838:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002842:	2b01      	cmp	r3, #1
 8002844:	d126      	bne.n	8002894 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002850:	f023 0304 	bic.w	r3, r3, #4
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800285c:	4311      	orrs	r1, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002862:	4311      	orrs	r1, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002868:	430a      	orrs	r2, r1
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	e015      	b.n	80028a4 <HAL_ADC_Init+0x308>
 8002878:	20000004 	.word	0x20000004
 800287c:	053e2d63 	.word	0x053e2d63
 8002880:	50000100 	.word	0x50000100
 8002884:	50000400 	.word	0x50000400
 8002888:	50000300 	.word	0x50000300
 800288c:	50000700 	.word	0x50000700
 8002890:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d10c      	bne.n	80028c6 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f023 010f 	bic.w	r1, r3, #15
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	1e5a      	subs	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
 80028c4:	e007      	b.n	80028d6 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 020f 	bic.w	r2, r2, #15
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	f023 0303 	bic.w	r3, r3, #3
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80028e6:	e007      	b.n	80028f8 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	f043 0210 	orr.w	r2, r3, #16
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3724      	adds	r7, #36	; 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}
 8002902:	bf00      	nop

08002904 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002914:	d004      	beq.n	8002920 <HAL_ADC_Start+0x1c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a5c      	ldr	r2, [pc, #368]	; (8002a8c <HAL_ADC_Start+0x188>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_ADC_Start+0x20>
 8002920:	4b5b      	ldr	r3, [pc, #364]	; (8002a90 <HAL_ADC_Start+0x18c>)
 8002922:	e000      	b.n	8002926 <HAL_ADC_Start+0x22>
 8002924:	4b5b      	ldr	r3, [pc, #364]	; (8002a94 <HAL_ADC_Start+0x190>)
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fd6c 	bl	8002404 <LL_ADC_GetMultimode>
 800292c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fe0b 	bl	800254e <LL_ADC_REG_IsConversionOngoing>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 809f 	bne.w	8002a7e <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_ADC_Start+0x4a>
 800294a:	2302      	movs	r3, #2
 800294c:	e09a      	b.n	8002a84 <HAL_ADC_Start+0x180>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fdcc 	bl	80034f4 <ADC_Enable>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 8086 	bne.w	8002a74 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a42      	ldr	r2, [pc, #264]	; (8002a8c <HAL_ADC_Start+0x188>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d002      	beq.n	800298c <HAL_ADC_Start+0x88>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	e001      	b.n	8002990 <HAL_ADC_Start+0x8c>
 800298c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	4293      	cmp	r3, r2
 8002996:	d002      	beq.n	800299e <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d105      	bne.n	80029aa <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b6:	d106      	bne.n	80029c6 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029bc:	f023 0206 	bic.w	r2, r3, #6
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	661a      	str	r2, [r3, #96]	; 0x60
 80029c4:	e002      	b.n	80029cc <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	221c      	movs	r2, #28
 80029d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a2a      	ldr	r2, [pc, #168]	; (8002a8c <HAL_ADC_Start+0x188>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d002      	beq.n	80029ec <HAL_ADC_Start+0xe8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	e001      	b.n	80029f0 <HAL_ADC_Start+0xec>
 80029ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d008      	beq.n	8002a0a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d002      	beq.n	8002a0a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b09      	cmp	r3, #9
 8002a08:	d114      	bne.n	8002a34 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fd7a 	bl	8002526 <LL_ADC_REG_StartConversion>
 8002a32:	e026      	b.n	8002a82 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a11      	ldr	r2, [pc, #68]	; (8002a8c <HAL_ADC_Start+0x188>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d002      	beq.n	8002a50 <HAL_ADC_Start+0x14c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	e001      	b.n	8002a54 <HAL_ADC_Start+0x150>
 8002a50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a54:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00f      	beq.n	8002a82 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a72:	e006      	b.n	8002a82 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002a7c:	e001      	b.n	8002a82 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	50000100 	.word	0x50000100
 8002a90:	50000300 	.word	0x50000300
 8002a94:	50000700 	.word	0x50000700

08002a98 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aaa:	d004      	beq.n	8002ab6 <HAL_ADC_PollForConversion+0x1e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a70      	ldr	r2, [pc, #448]	; (8002c74 <HAL_ADC_PollForConversion+0x1dc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_PollForConversion+0x22>
 8002ab6:	4b70      	ldr	r3, [pc, #448]	; (8002c78 <HAL_ADC_PollForConversion+0x1e0>)
 8002ab8:	e000      	b.n	8002abc <HAL_ADC_PollForConversion+0x24>
 8002aba:	4b70      	ldr	r3, [pc, #448]	; (8002c7c <HAL_ADC_PollForConversion+0x1e4>)
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fca1 	bl	8002404 <LL_ADC_GetMultimode>
 8002ac2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d102      	bne.n	8002ad2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002acc:	2308      	movs	r3, #8
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	e037      	b.n	8002b42 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d002      	beq.n	8002ae4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b09      	cmp	r3, #9
 8002ae2:	d111      	bne.n	8002b08 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	f043 0220 	orr.w	r2, r3, #32
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0b3      	b.n	8002c6a <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b02:	2304      	movs	r3, #4
 8002b04:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b06:	e01c      	b.n	8002b42 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b10:	d004      	beq.n	8002b1c <HAL_ADC_PollForConversion+0x84>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <HAL_ADC_PollForConversion+0x1dc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADC_PollForConversion+0x88>
 8002b1c:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <HAL_ADC_PollForConversion+0x1e0>)
 8002b1e:	e000      	b.n	8002b22 <HAL_ADC_PollForConversion+0x8a>
 8002b20:	4b56      	ldr	r3, [pc, #344]	; (8002c7c <HAL_ADC_PollForConversion+0x1e4>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fc7c 	bl	8002420 <LL_ADC_GetMultiDMATransfer>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e095      	b.n	8002c6a <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b3e:	2304      	movs	r3, #4
 8002b40:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b42:	f7ff fad1 	bl	80020e8 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b48:	e021      	b.n	8002b8e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d01d      	beq.n	8002b8e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b52:	f7ff fac9 	bl	80020e8 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <HAL_ADC_PollForConversion+0xd0>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d112      	bne.n	8002b8e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10b      	bne.n	8002b8e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	f043 0204 	orr.w	r2, r3, #4
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e06d      	b.n	8002c6a <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0d6      	beq.n	8002b4a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fb9b 	bl	80022e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01c      	beq.n	8002bf2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7f5b      	ldrb	r3, [r3, #29]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d118      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d111      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d105      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	f043 0201 	orr.w	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <HAL_ADC_PollForConversion+0x1dc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d002      	beq.n	8002c02 <HAL_ADC_PollForConversion+0x16a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	e001      	b.n	8002c06 <HAL_ADC_PollForConversion+0x16e>
 8002c02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d008      	beq.n	8002c20 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d002      	beq.n	8002c20 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b09      	cmp	r3, #9
 8002c1e:	d104      	bne.n	8002c2a <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	61bb      	str	r3, [r7, #24]
 8002c28:	e00d      	b.n	8002c46 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a11      	ldr	r2, [pc, #68]	; (8002c74 <HAL_ADC_PollForConversion+0x1dc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d002      	beq.n	8002c3a <HAL_ADC_PollForConversion+0x1a2>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	e001      	b.n	8002c3e <HAL_ADC_PollForConversion+0x1a6>
 8002c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c3e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d104      	bne.n	8002c56 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2208      	movs	r2, #8
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e008      	b.n	8002c68 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d103      	bne.n	8002c68 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	220c      	movs	r2, #12
 8002c66:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	50000100 	.word	0x50000100
 8002c78:	50000300 	.word	0x50000300
 8002c7c:	50000700 	.word	0x50000700

08002c80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b0b6      	sub	sp, #216	; 0xd8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x24>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	f000 bc04 	b.w	80034c8 <HAL_ADC_ConfigChannel+0x82c>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fc3e 	bl	800254e <LL_ADC_REG_IsConversionOngoing>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f040 83e8 	bne.w	80034aa <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f7ff fb11 	bl	800230e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fc2c 	bl	800254e <LL_ADC_REG_IsConversionOngoing>
 8002cf6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fc38 	bl	8002574 <LL_ADC_INJ_IsConversionOngoing>
 8002d04:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f040 81d9 	bne.w	80030c4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 81d4 	bne.w	80030c4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d24:	d10f      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4619      	mov	r1, r3
 8002d32:	f7ff fb18 	bl	8002366 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fabf 	bl	80022c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002d44:	e00e      	b.n	8002d64 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f7ff fb07 	bl	8002366 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff faaf 	bl	80022c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	08db      	lsrs	r3, r3, #3
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d022      	beq.n	8002dcc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6919      	ldr	r1, [r3, #16]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d96:	f7ff fa09 	bl	80021ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6919      	ldr	r1, [r3, #16]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f7ff fa55 	bl	8002256 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6919      	ldr	r1, [r3, #16]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	7f1b      	ldrb	r3, [r3, #28]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x126>
 8002dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc0:	e000      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x128>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f7ff fa61 	bl	800228c <LL_ADC_SetOffsetSaturation>
 8002dca:	e17b      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fa0e 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x15c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fa03 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	f003 021f 	and.w	r2, r3, #31
 8002df6:	e01e      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x19a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff f9f8 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e26:	2320      	movs	r3, #32
 8002e28:	e004      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d105      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x1b2>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	0e9b      	lsrs	r3, r3, #26
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	e018      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x1e4>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e72:	2320      	movs	r3, #32
 8002e74:	e004      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d106      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff f9c7 	bl	8002220 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff f9ab 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x222>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2101      	movs	r1, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff f9a0 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	0e9b      	lsrs	r3, r3, #26
 8002eb8:	f003 021f 	and.w	r2, r3, #31
 8002ebc:	e01e      	b.n	8002efc <HAL_ADC_ConfigChannel+0x260>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff f995 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002edc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002eec:	2320      	movs	r3, #32
 8002eee:	e004      	b.n	8002efa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x278>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	e018      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x2aa>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f38:	2320      	movs	r3, #32
 8002f3a:	e004      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d106      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2101      	movs	r1, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff f964 	bl	8002220 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff f948 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10a      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x2e8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2102      	movs	r1, #2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff f93d 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	0e9b      	lsrs	r3, r3, #26
 8002f7e:	f003 021f 	and.w	r2, r3, #31
 8002f82:	e01e      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x326>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2102      	movs	r1, #2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff f932 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	e004      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d105      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x33e>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	0e9b      	lsrs	r3, r3, #26
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	e016      	b.n	8003008 <HAL_ADC_ConfigChannel+0x36c>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	e004      	b.n	8003008 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003008:	429a      	cmp	r2, r3
 800300a:	d106      	bne.n	800301a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2200      	movs	r2, #0
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff f903 	bl	8002220 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2103      	movs	r1, #3
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff f8e7 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x3aa>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2103      	movs	r1, #3
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff f8dc 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 800303c:	4603      	mov	r3, r0
 800303e:	0e9b      	lsrs	r3, r3, #26
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	e017      	b.n	8003076 <HAL_ADC_ConfigChannel+0x3da>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2103      	movs	r1, #3
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff f8d1 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003058:	fa93 f3a3 	rbit	r3, r3
 800305c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800305e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003060:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003068:	2320      	movs	r3, #32
 800306a:	e003      	b.n	8003074 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800306c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_ADC_ConfigChannel+0x3f2>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	0e9b      	lsrs	r3, r3, #26
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	e011      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x416>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800309c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800309e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80030a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80030a6:	2320      	movs	r3, #32
 80030a8:	e003      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80030aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d106      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	2103      	movs	r1, #3
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff f8ae 	bl	8002220 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fa19 	bl	8002500 <LL_ADC_IsEnabled>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f040 813d 	bne.w	8003350 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6819      	ldr	r1, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f7ff f96a 	bl	80023bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4aa2      	ldr	r2, [pc, #648]	; (8003378 <HAL_ADC_ConfigChannel+0x6dc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	f040 812e 	bne.w	8003350 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <HAL_ADC_ConfigChannel+0x480>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	0e9b      	lsrs	r3, r3, #26
 800310a:	3301      	adds	r3, #1
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	2b09      	cmp	r3, #9
 8003112:	bf94      	ite	ls
 8003114:	2301      	movls	r3, #1
 8003116:	2300      	movhi	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e019      	b.n	8003150 <HAL_ADC_ConfigChannel+0x4b4>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800312a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800312c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800312e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003134:	2320      	movs	r3, #32
 8003136:	e003      	b.n	8003140 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	2b09      	cmp	r3, #9
 8003148:	bf94      	ite	ls
 800314a:	2301      	movls	r3, #1
 800314c:	2300      	movhi	r3, #0
 800314e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003150:	2b00      	cmp	r3, #0
 8003152:	d079      	beq.n	8003248 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x4d4>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	0e9b      	lsrs	r3, r3, #26
 8003166:	3301      	adds	r3, #1
 8003168:	069b      	lsls	r3, r3, #26
 800316a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800316e:	e015      	b.n	800319c <HAL_ADC_ConfigChannel+0x500>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800317e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003180:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003188:	2320      	movs	r3, #32
 800318a:	e003      	b.n	8003194 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800318c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	3301      	adds	r3, #1
 8003196:	069b      	lsls	r3, r3, #26
 8003198:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x520>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0e9b      	lsrs	r3, r3, #26
 80031ae:	3301      	adds	r3, #1
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	2101      	movs	r1, #1
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	e017      	b.n	80031ec <HAL_ADC_ConfigChannel+0x550>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80031ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80031ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e003      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	2101      	movs	r1, #1
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	ea42 0103 	orr.w	r1, r2, r3
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x576>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	0e9b      	lsrs	r3, r3, #26
 8003202:	3301      	adds	r3, #1
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	051b      	lsls	r3, r3, #20
 8003210:	e018      	b.n	8003244 <HAL_ADC_ConfigChannel+0x5a8>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003222:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800322a:	2320      	movs	r3, #32
 800322c:	e003      	b.n	8003236 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800322e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	3301      	adds	r3, #1
 8003238:	f003 021f 	and.w	r2, r3, #31
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003244:	430b      	orrs	r3, r1
 8003246:	e07e      	b.n	8003346 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003250:	2b00      	cmp	r3, #0
 8003252:	d107      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x5c8>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0e9b      	lsrs	r3, r3, #26
 800325a:	3301      	adds	r3, #1
 800325c:	069b      	lsls	r3, r3, #26
 800325e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003262:	e015      	b.n	8003290 <HAL_ADC_ConfigChannel+0x5f4>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800327c:	2320      	movs	r3, #32
 800327e:	e003      	b.n	8003288 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	3301      	adds	r3, #1
 800328a:	069b      	lsls	r3, r3, #26
 800328c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x614>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0e9b      	lsrs	r3, r3, #26
 80032a2:	3301      	adds	r3, #1
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	e017      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x644>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	61fb      	str	r3, [r7, #28]
  return result;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80032c8:	2320      	movs	r3, #32
 80032ca:	e003      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	ea42 0103 	orr.w	r1, r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10d      	bne.n	800330c <HAL_ADC_ConfigChannel+0x670>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	0e9b      	lsrs	r3, r3, #26
 80032f6:	3301      	adds	r3, #1
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	3b1e      	subs	r3, #30
 8003304:	051b      	lsls	r3, r3, #20
 8003306:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800330a:	e01b      	b.n	8003344 <HAL_ADC_ConfigChannel+0x6a8>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	613b      	str	r3, [r7, #16]
  return result;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003324:	2320      	movs	r3, #32
 8003326:	e003      	b.n	8003330 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f003 021f 	and.w	r2, r3, #31
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	3b1e      	subs	r3, #30
 800333e:	051b      	lsls	r3, r3, #20
 8003340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003344:	430b      	orrs	r3, r1
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	6892      	ldr	r2, [r2, #8]
 800334a:	4619      	mov	r1, r3
 800334c:	f7ff f80b 	bl	8002366 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_ADC_ConfigChannel+0x6e0>)
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80af 	beq.w	80034bc <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003366:	d004      	beq.n	8003372 <HAL_ADC_ConfigChannel+0x6d6>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_ADC_ConfigChannel+0x6e4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10a      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x6ec>
 8003372:	4b04      	ldr	r3, [pc, #16]	; (8003384 <HAL_ADC_ConfigChannel+0x6e8>)
 8003374:	e009      	b.n	800338a <HAL_ADC_ConfigChannel+0x6ee>
 8003376:	bf00      	nop
 8003378:	407f0000 	.word	0x407f0000
 800337c:	80080000 	.word	0x80080000
 8003380:	50000100 	.word	0x50000100
 8003384:	50000300 	.word	0x50000300
 8003388:	4b51      	ldr	r3, [pc, #324]	; (80034d0 <HAL_ADC_ConfigChannel+0x834>)
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe ff00 	bl	8002190 <LL_ADC_GetCommonPathInternalCh>
 8003390:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a4e      	ldr	r2, [pc, #312]	; (80034d4 <HAL_ADC_ConfigChannel+0x838>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x70c>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a4d      	ldr	r2, [pc, #308]	; (80034d8 <HAL_ADC_ConfigChannel+0x83c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d134      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d12e      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033bc:	d17e      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033c6:	d004      	beq.n	80033d2 <HAL_ADC_ConfigChannel+0x736>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a43      	ldr	r2, [pc, #268]	; (80034dc <HAL_ADC_ConfigChannel+0x840>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x73a>
 80033d2:	4a43      	ldr	r2, [pc, #268]	; (80034e0 <HAL_ADC_ConfigChannel+0x844>)
 80033d4:	e000      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x73c>
 80033d6:	4a3e      	ldr	r2, [pc, #248]	; (80034d0 <HAL_ADC_ConfigChannel+0x834>)
 80033d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f7fe fec1 	bl	800216a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033e8:	4b3e      	ldr	r3, [pc, #248]	; (80034e4 <HAL_ADC_ConfigChannel+0x848>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	4a3e      	ldr	r2, [pc, #248]	; (80034e8 <HAL_ADC_ConfigChannel+0x84c>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003402:	e002      	b.n	800340a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3b01      	subs	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f9      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003410:	e054      	b.n	80034bc <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a35      	ldr	r2, [pc, #212]	; (80034ec <HAL_ADC_ConfigChannel+0x850>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d120      	bne.n	800345e <HAL_ADC_ConfigChannel+0x7c2>
 800341c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11a      	bne.n	800345e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003430:	d144      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800343a:	d004      	beq.n	8003446 <HAL_ADC_ConfigChannel+0x7aa>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a26      	ldr	r2, [pc, #152]	; (80034dc <HAL_ADC_ConfigChannel+0x840>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0x7ae>
 8003446:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <HAL_ADC_ConfigChannel+0x844>)
 8003448:	e000      	b.n	800344c <HAL_ADC_ConfigChannel+0x7b0>
 800344a:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <HAL_ADC_ConfigChannel+0x834>)
 800344c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003450:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f7fe fe87 	bl	800216a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800345c:	e02e      	b.n	80034bc <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <HAL_ADC_ConfigChannel+0x854>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d129      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800346c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d123      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_ADC_ConfigChannel+0x840>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01e      	beq.n	80034bc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003486:	d004      	beq.n	8003492 <HAL_ADC_ConfigChannel+0x7f6>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a13      	ldr	r2, [pc, #76]	; (80034dc <HAL_ADC_ConfigChannel+0x840>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d101      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x7fa>
 8003492:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <HAL_ADC_ConfigChannel+0x844>)
 8003494:	e000      	b.n	8003498 <HAL_ADC_ConfigChannel+0x7fc>
 8003496:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <HAL_ADC_ConfigChannel+0x834>)
 8003498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800349c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f7fe fe61 	bl	800216a <LL_ADC_SetCommonPathInternalCh>
 80034a8:	e008      	b.n	80034bc <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	37d8      	adds	r7, #216	; 0xd8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	50000700 	.word	0x50000700
 80034d4:	c3210000 	.word	0xc3210000
 80034d8:	90c00010 	.word	0x90c00010
 80034dc:	50000100 	.word	0x50000100
 80034e0:	50000300 	.word	0x50000300
 80034e4:	20000004 	.word	0x20000004
 80034e8:	053e2d63 	.word	0x053e2d63
 80034ec:	c7520000 	.word	0xc7520000
 80034f0:	cb840000 	.word	0xcb840000

080034f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe fffd 	bl	8002500 <LL_ADC_IsEnabled>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d14d      	bne.n	80035a8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <ADC_Enable+0xc0>)
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351e:	f043 0210 	orr.w	r2, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352a:	f043 0201 	orr.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e039      	b.n	80035aa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe ffcc 	bl	80024d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003540:	f7fe fdd2 	bl	80020e8 <HAL_GetTick>
 8003544:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003546:	e028      	b.n	800359a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe ffd7 	bl	8002500 <LL_ADC_IsEnabled>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d104      	bne.n	8003562 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f7fe ffbb 	bl	80024d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003562:	f7fe fdc1 	bl	80020e8 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d914      	bls.n	800359a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d00d      	beq.n	800359a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003582:	f043 0210 	orr.w	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358e:	f043 0201 	orr.w	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e007      	b.n	80035aa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d1cf      	bne.n	8003548 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	8000003f 	.word	0x8000003f

080035b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <__NVIC_SetPriorityGrouping+0x44>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035d4:	4013      	ands	r3, r2
 80035d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ea:	4a04      	ldr	r2, [pc, #16]	; (80035fc <__NVIC_SetPriorityGrouping+0x44>)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	60d3      	str	r3, [r2, #12]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003604:	4b04      	ldr	r3, [pc, #16]	; (8003618 <__NVIC_GetPriorityGrouping+0x18>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	0a1b      	lsrs	r3, r3, #8
 800360a:	f003 0307 	and.w	r3, r3, #7
}
 800360e:	4618      	mov	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	2b00      	cmp	r3, #0
 800362c:	db0b      	blt.n	8003646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	f003 021f 	and.w	r2, r3, #31
 8003634:	4907      	ldr	r1, [pc, #28]	; (8003654 <__NVIC_EnableIRQ+0x38>)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2001      	movs	r0, #1
 800363e:	fa00 f202 	lsl.w	r2, r0, r2
 8003642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e000e100 	.word	0xe000e100

08003658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	6039      	str	r1, [r7, #0]
 8003662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003668:	2b00      	cmp	r3, #0
 800366a:	db0a      	blt.n	8003682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	490c      	ldr	r1, [pc, #48]	; (80036a4 <__NVIC_SetPriority+0x4c>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	0112      	lsls	r2, r2, #4
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	440b      	add	r3, r1
 800367c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003680:	e00a      	b.n	8003698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4908      	ldr	r1, [pc, #32]	; (80036a8 <__NVIC_SetPriority+0x50>)
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	3b04      	subs	r3, #4
 8003690:	0112      	lsls	r2, r2, #4
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	440b      	add	r3, r1
 8003696:	761a      	strb	r2, [r3, #24]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000e100 	.word	0xe000e100
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b089      	sub	sp, #36	; 0x24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f1c3 0307 	rsb	r3, r3, #7
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	bf28      	it	cs
 80036ca:	2304      	movcs	r3, #4
 80036cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2b06      	cmp	r3, #6
 80036d4:	d902      	bls.n	80036dc <NVIC_EncodePriority+0x30>
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3b03      	subs	r3, #3
 80036da:	e000      	b.n	80036de <NVIC_EncodePriority+0x32>
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e0:	f04f 32ff 	mov.w	r2, #4294967295
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43da      	mvns	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	401a      	ands	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036f4:	f04f 31ff 	mov.w	r1, #4294967295
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	43d9      	mvns	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003704:	4313      	orrs	r3, r2
         );
}
 8003706:	4618      	mov	r0, r3
 8003708:	3724      	adds	r7, #36	; 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3b01      	subs	r3, #1
 8003720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003724:	d301      	bcc.n	800372a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003726:	2301      	movs	r3, #1
 8003728:	e00f      	b.n	800374a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800372a:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <SysTick_Config+0x40>)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3b01      	subs	r3, #1
 8003730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003732:	210f      	movs	r1, #15
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	f7ff ff8e 	bl	8003658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <SysTick_Config+0x40>)
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003742:	4b04      	ldr	r3, [pc, #16]	; (8003754 <SysTick_Config+0x40>)
 8003744:	2207      	movs	r2, #7
 8003746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	e000e010 	.word	0xe000e010

08003758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ff29 	bl	80035b8 <__NVIC_SetPriorityGrouping>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	4603      	mov	r3, r0
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800377c:	f7ff ff40 	bl	8003600 <__NVIC_GetPriorityGrouping>
 8003780:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	6978      	ldr	r0, [r7, #20]
 8003788:	f7ff ff90 	bl	80036ac <NVIC_EncodePriority>
 800378c:	4602      	mov	r2, r0
 800378e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ff5f 	bl	8003658 <__NVIC_SetPriority>
}
 800379a:	bf00      	nop
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	4603      	mov	r3, r0
 80037aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff33 	bl	800361c <__NVIC_EnableIRQ>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ffa4 	bl	8003714 <SysTick_Config>
 80037cc:	4603      	mov	r3, r0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037e6:	e15a      	b.n	8003a9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	2101      	movs	r1, #1
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	4013      	ands	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 814c 	beq.w	8003a98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d00b      	beq.n	8003820 <HAL_GPIO_Init+0x48>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d007      	beq.n	8003820 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003814:	2b11      	cmp	r3, #17
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b12      	cmp	r3, #18
 800381e:	d130      	bne.n	8003882 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003856:	2201      	movs	r2, #1
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	f003 0201 	and.w	r2, r3, #1
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2203      	movs	r2, #3
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4013      	ands	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0xea>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b12      	cmp	r3, #18
 80038c0:	d123      	bne.n	800390a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	08da      	lsrs	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3208      	adds	r2, #8
 80038ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	220f      	movs	r2, #15
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	08da      	lsrs	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3208      	adds	r2, #8
 8003904:	6939      	ldr	r1, [r7, #16]
 8003906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0203 	and.w	r2, r3, #3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80a6 	beq.w	8003a98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394c:	4b5b      	ldr	r3, [pc, #364]	; (8003abc <HAL_GPIO_Init+0x2e4>)
 800394e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003950:	4a5a      	ldr	r2, [pc, #360]	; (8003abc <HAL_GPIO_Init+0x2e4>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6613      	str	r3, [r2, #96]	; 0x60
 8003958:	4b58      	ldr	r3, [pc, #352]	; (8003abc <HAL_GPIO_Init+0x2e4>)
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003964:	4a56      	ldr	r2, [pc, #344]	; (8003ac0 <HAL_GPIO_Init+0x2e8>)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003970:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800398e:	d01f      	beq.n	80039d0 <HAL_GPIO_Init+0x1f8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a4c      	ldr	r2, [pc, #304]	; (8003ac4 <HAL_GPIO_Init+0x2ec>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d019      	beq.n	80039cc <HAL_GPIO_Init+0x1f4>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a4b      	ldr	r2, [pc, #300]	; (8003ac8 <HAL_GPIO_Init+0x2f0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d013      	beq.n	80039c8 <HAL_GPIO_Init+0x1f0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a4a      	ldr	r2, [pc, #296]	; (8003acc <HAL_GPIO_Init+0x2f4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00d      	beq.n	80039c4 <HAL_GPIO_Init+0x1ec>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a49      	ldr	r2, [pc, #292]	; (8003ad0 <HAL_GPIO_Init+0x2f8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <HAL_GPIO_Init+0x1e8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a48      	ldr	r2, [pc, #288]	; (8003ad4 <HAL_GPIO_Init+0x2fc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_GPIO_Init+0x1e4>
 80039b8:	2305      	movs	r3, #5
 80039ba:	e00a      	b.n	80039d2 <HAL_GPIO_Init+0x1fa>
 80039bc:	2306      	movs	r3, #6
 80039be:	e008      	b.n	80039d2 <HAL_GPIO_Init+0x1fa>
 80039c0:	2304      	movs	r3, #4
 80039c2:	e006      	b.n	80039d2 <HAL_GPIO_Init+0x1fa>
 80039c4:	2303      	movs	r3, #3
 80039c6:	e004      	b.n	80039d2 <HAL_GPIO_Init+0x1fa>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e002      	b.n	80039d2 <HAL_GPIO_Init+0x1fa>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_GPIO_Init+0x1fa>
 80039d0:	2300      	movs	r3, #0
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	f002 0203 	and.w	r2, r2, #3
 80039d8:	0092      	lsls	r2, r2, #2
 80039da:	4093      	lsls	r3, r2
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039e2:	4937      	ldr	r1, [pc, #220]	; (8003ac0 <HAL_GPIO_Init+0x2e8>)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	3302      	adds	r3, #2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039f0:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <HAL_GPIO_Init+0x300>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a14:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <HAL_GPIO_Init+0x300>)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003a1a:	4b2f      	ldr	r3, [pc, #188]	; (8003ad8 <HAL_GPIO_Init+0x300>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a3e:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <HAL_GPIO_Init+0x300>)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a44:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HAL_GPIO_Init+0x300>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4013      	ands	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a68:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <HAL_GPIO_Init+0x300>)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <HAL_GPIO_Init+0x300>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a92:	4a11      	ldr	r2, [pc, #68]	; (8003ad8 <HAL_GPIO_Init+0x300>)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f47f ae9d 	bne.w	80037e8 <HAL_GPIO_Init+0x10>
  }
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	48000400 	.word	0x48000400
 8003ac8:	48000800 	.word	0x48000800
 8003acc:	48000c00 	.word	0x48000c00
 8003ad0:	48001000 	.word	0x48001000
 8003ad4:	48001400 	.word	0x48001400
 8003ad8:	40010400 	.word	0x40010400

08003adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	887b      	ldrh	r3, [r7, #2]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	e001      	b.n	8003afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b1c:	787b      	ldrb	r3, [r7, #1]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b28:	e002      	b.n	8003b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b2a:	887a      	ldrh	r2, [r7, #2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b52:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f806 	bl	8003b6c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40010400 	.word	0x40010400

08003b6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d141      	bne.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b92:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9e:	d131      	bne.n	8003c04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ba0:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ba6:	4a46      	ldr	r2, [pc, #280]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bb0:	4b43      	ldr	r3, [pc, #268]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bb8:	4a41      	ldr	r2, [pc, #260]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bc0:	4b40      	ldr	r3, [pc, #256]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2232      	movs	r2, #50	; 0x32
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	4a3f      	ldr	r2, [pc, #252]	; (8003cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	0c9b      	lsrs	r3, r3, #18
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bd6:	e002      	b.n	8003bde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bde:	4b38      	ldr	r3, [pc, #224]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bea:	d102      	bne.n	8003bf2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f2      	bne.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bf2:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfe:	d158      	bne.n	8003cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e057      	b.n	8003cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c04:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0a:	4a2d      	ldr	r2, [pc, #180]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c14:	e04d      	b.n	8003cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1c:	d141      	bne.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c1e:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2a:	d131      	bne.n	8003c90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c2c:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c32:	4a23      	ldr	r2, [pc, #140]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c3c:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c44:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2232      	movs	r2, #50	; 0x32
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
 8003c56:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	0c9b      	lsrs	r3, r3, #18
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c62:	e002      	b.n	8003c6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c76:	d102      	bne.n	8003c7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f2      	bne.n	8003c64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8a:	d112      	bne.n	8003cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e011      	b.n	8003cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c96:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ca0:	e007      	b.n	8003cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ca2:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003caa:	4a05      	ldr	r2, [pc, #20]	; (8003cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cb0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40007000 	.word	0x40007000
 8003cc4:	20000004 	.word	0x20000004
 8003cc8:	431bde83 	.word	0x431bde83

08003ccc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a04      	ldr	r2, [pc, #16]	; (8003ce8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cda:	6093      	str	r3, [r2, #8]
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40007000 	.word	0x40007000

08003cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e308      	b.n	8004310 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d075      	beq.n	8003df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0a:	4ba3      	ldr	r3, [pc, #652]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d14:	4ba0      	ldr	r3, [pc, #640]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b0c      	cmp	r3, #12
 8003d22:	d102      	bne.n	8003d2a <HAL_RCC_OscConfig+0x3e>
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d002      	beq.n	8003d30 <HAL_RCC_OscConfig+0x44>
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d10b      	bne.n	8003d48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d30:	4b99      	ldr	r3, [pc, #612]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d05b      	beq.n	8003df4 <HAL_RCC_OscConfig+0x108>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d157      	bne.n	8003df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e2e3      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d50:	d106      	bne.n	8003d60 <HAL_RCC_OscConfig+0x74>
 8003d52:	4b91      	ldr	r3, [pc, #580]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a90      	ldr	r2, [pc, #576]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e01d      	b.n	8003d9c <HAL_RCC_OscConfig+0xb0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x98>
 8003d6a:	4b8b      	ldr	r3, [pc, #556]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a8a      	ldr	r2, [pc, #552]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	4b88      	ldr	r3, [pc, #544]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a87      	ldr	r2, [pc, #540]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e00b      	b.n	8003d9c <HAL_RCC_OscConfig+0xb0>
 8003d84:	4b84      	ldr	r3, [pc, #528]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a83      	ldr	r2, [pc, #524]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	4b81      	ldr	r3, [pc, #516]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a80      	ldr	r2, [pc, #512]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d013      	beq.n	8003dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fe f9a0 	bl	80020e8 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fe f99c 	bl	80020e8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e2a8      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dbe:	4b76      	ldr	r3, [pc, #472]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0xc0>
 8003dca:	e014      	b.n	8003df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fe f98c 	bl	80020e8 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd4:	f7fe f988 	bl	80020e8 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b64      	cmp	r3, #100	; 0x64
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e294      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de6:	4b6c      	ldr	r3, [pc, #432]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0xe8>
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d075      	beq.n	8003eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e02:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e0c:	4b62      	ldr	r3, [pc, #392]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	d102      	bne.n	8003e22 <HAL_RCC_OscConfig+0x136>
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d002      	beq.n	8003e28 <HAL_RCC_OscConfig+0x13c>
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d11f      	bne.n	8003e68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e28:	4b5b      	ldr	r3, [pc, #364]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_RCC_OscConfig+0x154>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e267      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e40:	4b55      	ldr	r3, [pc, #340]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	061b      	lsls	r3, r3, #24
 8003e4e:	4952      	ldr	r1, [pc, #328]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e54:	4b51      	ldr	r3, [pc, #324]	; (8003f9c <HAL_RCC_OscConfig+0x2b0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe f8f9 	bl	8002050 <HAL_InitTick>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d043      	beq.n	8003eec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e253      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d023      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e70:	4b49      	ldr	r3, [pc, #292]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a48      	ldr	r2, [pc, #288]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe f934 	bl	80020e8 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e84:	f7fe f930 	bl	80020e8 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e23c      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e96:	4b40      	ldr	r3, [pc, #256]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea2:	4b3d      	ldr	r3, [pc, #244]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	061b      	lsls	r3, r3, #24
 8003eb0:	4939      	ldr	r1, [pc, #228]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	604b      	str	r3, [r1, #4]
 8003eb6:	e01a      	b.n	8003eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb8:	4b37      	ldr	r3, [pc, #220]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a36      	ldr	r2, [pc, #216]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003ebe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe f910 	bl	80020e8 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fe f90c 	bl	80020e8 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e218      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ede:	4b2e      	ldr	r3, [pc, #184]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1e0>
 8003eea:	e000      	b.n	8003eee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d03c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01c      	beq.n	8003f3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f02:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f08:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f12:	f7fe f8e9 	bl	80020e8 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1a:	f7fe f8e5 	bl	80020e8 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e1f1      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0ef      	beq.n	8003f1a <HAL_RCC_OscConfig+0x22e>
 8003f3a:	e01b      	b.n	8003f74 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3c:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f42:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4c:	f7fe f8cc 	bl	80020e8 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f54:	f7fe f8c8 	bl	80020e8 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e1d4      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f66:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1ef      	bne.n	8003f54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80ab 	beq.w	80040d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f82:	2300      	movs	r3, #0
 8003f84:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f86:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x2b4>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e005      	b.n	8003fa2 <HAL_RCC_OscConfig+0x2b6>
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	20000008 	.word	0x20000008
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa6:	4baf      	ldr	r3, [pc, #700]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003faa:	4aae      	ldr	r2, [pc, #696]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8003fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb2:	4bac      	ldr	r3, [pc, #688]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc2:	4ba9      	ldr	r3, [pc, #676]	; (8004268 <HAL_RCC_OscConfig+0x57c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d118      	bne.n	8004000 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fce:	4ba6      	ldr	r3, [pc, #664]	; (8004268 <HAL_RCC_OscConfig+0x57c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4aa5      	ldr	r2, [pc, #660]	; (8004268 <HAL_RCC_OscConfig+0x57c>)
 8003fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fda:	f7fe f885 	bl	80020e8 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe2:	f7fe f881 	bl	80020e8 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e18d      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff4:	4b9c      	ldr	r3, [pc, #624]	; (8004268 <HAL_RCC_OscConfig+0x57c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d108      	bne.n	800401a <HAL_RCC_OscConfig+0x32e>
 8004008:	4b96      	ldr	r3, [pc, #600]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	4a95      	ldr	r2, [pc, #596]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004018:	e024      	b.n	8004064 <HAL_RCC_OscConfig+0x378>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b05      	cmp	r3, #5
 8004020:	d110      	bne.n	8004044 <HAL_RCC_OscConfig+0x358>
 8004022:	4b90      	ldr	r3, [pc, #576]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	4a8e      	ldr	r2, [pc, #568]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004032:	4b8c      	ldr	r3, [pc, #560]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	4a8a      	ldr	r2, [pc, #552]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004042:	e00f      	b.n	8004064 <HAL_RCC_OscConfig+0x378>
 8004044:	4b87      	ldr	r3, [pc, #540]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	4a86      	ldr	r2, [pc, #536]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004054:	4b83      	ldr	r3, [pc, #524]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	4a82      	ldr	r2, [pc, #520]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d016      	beq.n	800409a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fe f83c 	bl	80020e8 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004072:	e00a      	b.n	800408a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004074:	f7fe f838 	bl	80020e8 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e142      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408a:	4b76      	ldr	r3, [pc, #472]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ed      	beq.n	8004074 <HAL_RCC_OscConfig+0x388>
 8004098:	e015      	b.n	80040c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409a:	f7fe f825 	bl	80020e8 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040a0:	e00a      	b.n	80040b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a2:	f7fe f821 	bl	80020e8 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e12b      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040b8:	4b6a      	ldr	r3, [pc, #424]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1ed      	bne.n	80040a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040c6:	7ffb      	ldrb	r3, [r7, #31]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d105      	bne.n	80040d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040cc:	4b65      	ldr	r3, [pc, #404]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	4a64      	ldr	r2, [pc, #400]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 80040d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d03c      	beq.n	800415e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01c      	beq.n	8004126 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040ec:	4b5d      	ldr	r3, [pc, #372]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 80040ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040f2:	4a5c      	ldr	r2, [pc, #368]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fd fff4 	bl	80020e8 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004104:	f7fd fff0 	bl	80020e8 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e0fc      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004116:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ef      	beq.n	8004104 <HAL_RCC_OscConfig+0x418>
 8004124:	e01b      	b.n	800415e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004126:	4b4f      	ldr	r3, [pc, #316]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004128:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800412c:	4a4d      	ldr	r2, [pc, #308]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004136:	f7fd ffd7 	bl	80020e8 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800413e:	f7fd ffd3 	bl	80020e8 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0df      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004150:	4b44      	ldr	r3, [pc, #272]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ef      	bne.n	800413e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80d3 	beq.w	800430e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004168:	4b3e      	ldr	r3, [pc, #248]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b0c      	cmp	r3, #12
 8004172:	f000 808d 	beq.w	8004290 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d15a      	bne.n	8004234 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a38      	ldr	r2, [pc, #224]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fd ffad 	bl	80020e8 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004192:	f7fd ffa9 	bl	80020e8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e0b5      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a4:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041b0:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	4b2d      	ldr	r3, [pc, #180]	; (800426c <HAL_RCC_OscConfig+0x580>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6a11      	ldr	r1, [r2, #32]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041c0:	3a01      	subs	r2, #1
 80041c2:	0112      	lsls	r2, r2, #4
 80041c4:	4311      	orrs	r1, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041ca:	0212      	lsls	r2, r2, #8
 80041cc:	4311      	orrs	r1, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041d2:	0852      	lsrs	r2, r2, #1
 80041d4:	3a01      	subs	r2, #1
 80041d6:	0552      	lsls	r2, r2, #21
 80041d8:	4311      	orrs	r1, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041de:	0852      	lsrs	r2, r2, #1
 80041e0:	3a01      	subs	r2, #1
 80041e2:	0652      	lsls	r2, r2, #25
 80041e4:	4311      	orrs	r1, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041ea:	06d2      	lsls	r2, r2, #27
 80041ec:	430a      	orrs	r2, r1
 80041ee:	491d      	ldr	r1, [pc, #116]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 80041fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004200:	4b18      	ldr	r3, [pc, #96]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4a17      	ldr	r2, [pc, #92]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800420a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fd ff6c 	bl	80020e8 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004214:	f7fd ff68 	bl	80020e8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e074      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x528>
 8004232:	e06c      	b.n	800430e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 800423a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800423e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004240:	4b08      	ldr	r3, [pc, #32]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a07      	ldr	r2, [pc, #28]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <HAL_RCC_OscConfig+0x578>)
 8004252:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fd ff44 	bl	80020e8 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004262:	e00e      	b.n	8004282 <HAL_RCC_OscConfig+0x596>
 8004264:	40021000 	.word	0x40021000
 8004268:	40007000 	.word	0x40007000
 800426c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fd ff3a 	bl	80020e8 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e046      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x584>
 800428e:	e03e      	b.n	800430e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e039      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800429c:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 0203 	and.w	r2, r3, #3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d12c      	bne.n	800430a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	3b01      	subs	r3, #1
 80042bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042be:	429a      	cmp	r2, r3
 80042c0:	d123      	bne.n	800430a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d11b      	bne.n	800430a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042de:	429a      	cmp	r2, r3
 80042e0:	d113      	bne.n	800430a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	085b      	lsrs	r3, r3, #1
 80042ee:	3b01      	subs	r3, #1
 80042f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d109      	bne.n	800430a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	3b01      	subs	r3, #1
 8004304:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d001      	beq.n	800430e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40021000 	.word	0x40021000

0800431c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e11e      	b.n	8004572 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004334:	4b91      	ldr	r3, [pc, #580]	; (800457c <HAL_RCC_ClockConfig+0x260>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d910      	bls.n	8004364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b8e      	ldr	r3, [pc, #568]	; (800457c <HAL_RCC_ClockConfig+0x260>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 020f 	bic.w	r2, r3, #15
 800434a:	498c      	ldr	r1, [pc, #560]	; (800457c <HAL_RCC_ClockConfig+0x260>)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b8a      	ldr	r3, [pc, #552]	; (800457c <HAL_RCC_ClockConfig+0x260>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e106      	b.n	8004572 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d073      	beq.n	8004458 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d129      	bne.n	80043cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004378:	4b81      	ldr	r3, [pc, #516]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0f4      	b.n	8004572 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004388:	f000 f99e 	bl	80046c8 <RCC_GetSysClockFreqFromPLLSource>
 800438c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4a7c      	ldr	r2, [pc, #496]	; (8004584 <HAL_RCC_ClockConfig+0x268>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d93f      	bls.n	8004416 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004396:	4b7a      	ldr	r3, [pc, #488]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d033      	beq.n	8004416 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d12f      	bne.n	8004416 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043b6:	4b72      	ldr	r3, [pc, #456]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043be:	4a70      	ldr	r2, [pc, #448]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 80043c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	e024      	b.n	8004416 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d4:	4b6a      	ldr	r3, [pc, #424]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0c6      	b.n	8004572 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e4:	4b66      	ldr	r3, [pc, #408]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0be      	b.n	8004572 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043f4:	f000 f8ce 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4a61      	ldr	r2, [pc, #388]	; (8004584 <HAL_RCC_ClockConfig+0x268>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d909      	bls.n	8004416 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004402:	4b5f      	ldr	r3, [pc, #380]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800440a:	4a5d      	ldr	r2, [pc, #372]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 800440c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004410:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004416:	4b5a      	ldr	r3, [pc, #360]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f023 0203 	bic.w	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4957      	ldr	r1, [pc, #348]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 8004424:	4313      	orrs	r3, r2
 8004426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004428:	f7fd fe5e 	bl	80020e8 <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	e00a      	b.n	8004446 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004430:	f7fd fe5a 	bl	80020e8 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e095      	b.n	8004572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004446:	4b4e      	ldr	r3, [pc, #312]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 020c 	and.w	r2, r3, #12
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	429a      	cmp	r2, r3
 8004456:	d1eb      	bne.n	8004430 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d023      	beq.n	80044ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004470:	4b43      	ldr	r3, [pc, #268]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4a42      	ldr	r2, [pc, #264]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 8004476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800447a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004488:	4b3d      	ldr	r3, [pc, #244]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004490:	4a3b      	ldr	r2, [pc, #236]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 8004492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004496:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004498:	4b39      	ldr	r3, [pc, #228]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4936      	ldr	r1, [pc, #216]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
 80044aa:	e008      	b.n	80044be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2b80      	cmp	r3, #128	; 0x80
 80044b0:	d105      	bne.n	80044be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044b2:	4b33      	ldr	r3, [pc, #204]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4a32      	ldr	r2, [pc, #200]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 80044b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044be:	4b2f      	ldr	r3, [pc, #188]	; (800457c <HAL_RCC_ClockConfig+0x260>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d21d      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044cc:	4b2b      	ldr	r3, [pc, #172]	; (800457c <HAL_RCC_ClockConfig+0x260>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f023 020f 	bic.w	r2, r3, #15
 80044d4:	4929      	ldr	r1, [pc, #164]	; (800457c <HAL_RCC_ClockConfig+0x260>)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044dc:	f7fd fe04 	bl	80020e8 <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e4:	f7fd fe00 	bl	80020e8 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e03b      	b.n	8004572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fa:	4b20      	ldr	r3, [pc, #128]	; (800457c <HAL_RCC_ClockConfig+0x260>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d1ed      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004514:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4917      	ldr	r1, [pc, #92]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	490f      	ldr	r1, [pc, #60]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004546:	f000 f825 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 800454a:	4602      	mov	r2, r0
 800454c:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <HAL_RCC_ClockConfig+0x264>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	490c      	ldr	r1, [pc, #48]	; (8004588 <HAL_RCC_ClockConfig+0x26c>)
 8004558:	5ccb      	ldrb	r3, [r1, r3]
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	4a0a      	ldr	r2, [pc, #40]	; (800458c <HAL_RCC_ClockConfig+0x270>)
 8004564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x274>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fd fd70 	bl	8002050 <HAL_InitTick>
 8004570:	4603      	mov	r3, r0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40022000 	.word	0x40022000
 8004580:	40021000 	.word	0x40021000
 8004584:	04c4b400 	.word	0x04c4b400
 8004588:	08007f04 	.word	0x08007f04
 800458c:	20000004 	.word	0x20000004
 8004590:	20000008 	.word	0x20000008

08004594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800459a:	4b2c      	ldr	r3, [pc, #176]	; (800464c <HAL_RCC_GetSysClockFreq+0xb8>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d102      	bne.n	80045ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045a6:	4b2a      	ldr	r3, [pc, #168]	; (8004650 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e047      	b.n	800463c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045ac:	4b27      	ldr	r3, [pc, #156]	; (800464c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d102      	bne.n	80045be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045b8:	4b26      	ldr	r3, [pc, #152]	; (8004654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	e03e      	b.n	800463c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045be:	4b23      	ldr	r3, [pc, #140]	; (800464c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d136      	bne.n	8004638 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ca:	4b20      	ldr	r3, [pc, #128]	; (800464c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	3301      	adds	r3, #1
 80045e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d10c      	bne.n	8004602 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045e8:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	4a16      	ldr	r2, [pc, #88]	; (800464c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f2:	68d2      	ldr	r2, [r2, #12]
 80045f4:	0a12      	lsrs	r2, r2, #8
 80045f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	617b      	str	r3, [r7, #20]
      break;
 8004600:	e00c      	b.n	800461c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004602:	4a13      	ldr	r2, [pc, #76]	; (8004650 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	fbb2 f3f3 	udiv	r3, r2, r3
 800460a:	4a10      	ldr	r2, [pc, #64]	; (800464c <HAL_RCC_GetSysClockFreq+0xb8>)
 800460c:	68d2      	ldr	r2, [r2, #12]
 800460e:	0a12      	lsrs	r2, r2, #8
 8004610:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004614:	fb02 f303 	mul.w	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]
      break;
 800461a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_GetSysClockFreq+0xb8>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	0e5b      	lsrs	r3, r3, #25
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	3301      	adds	r3, #1
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	e001      	b.n	800463c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800463c:	693b      	ldr	r3, [r7, #16]
}
 800463e:	4618      	mov	r0, r3
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
 8004650:	00f42400 	.word	0x00f42400
 8004654:	016e3600 	.word	0x016e3600

08004658 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800465c:	4b03      	ldr	r3, [pc, #12]	; (800466c <HAL_RCC_GetHCLKFreq+0x14>)
 800465e:	681b      	ldr	r3, [r3, #0]
}
 8004660:	4618      	mov	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	20000004 	.word	0x20000004

08004670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004674:	f7ff fff0 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 8004678:	4602      	mov	r2, r0
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	4904      	ldr	r1, [pc, #16]	; (8004698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004686:	5ccb      	ldrb	r3, [r1, r3]
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004690:	4618      	mov	r0, r3
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40021000 	.word	0x40021000
 8004698:	08007f14 	.word	0x08007f14

0800469c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046a0:	f7ff ffda 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	0adb      	lsrs	r3, r3, #11
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	4904      	ldr	r1, [pc, #16]	; (80046c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046b2:	5ccb      	ldrb	r3, [r1, r3]
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	08007f14 	.word	0x08007f14

080046c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ce:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046d8:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d10c      	bne.n	8004706 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046ec:	4a17      	ldr	r2, [pc, #92]	; (800474c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	4a14      	ldr	r2, [pc, #80]	; (8004748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046f6:	68d2      	ldr	r2, [r2, #12]
 80046f8:	0a12      	lsrs	r2, r2, #8
 80046fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046fe:	fb02 f303 	mul.w	r3, r2, r3
 8004702:	617b      	str	r3, [r7, #20]
    break;
 8004704:	e00c      	b.n	8004720 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004706:	4a12      	ldr	r2, [pc, #72]	; (8004750 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	fbb2 f3f3 	udiv	r3, r2, r3
 800470e:	4a0e      	ldr	r2, [pc, #56]	; (8004748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004710:	68d2      	ldr	r2, [r2, #12]
 8004712:	0a12      	lsrs	r2, r2, #8
 8004714:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004718:	fb02 f303 	mul.w	r3, r2, r3
 800471c:	617b      	str	r3, [r7, #20]
    break;
 800471e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	0e5b      	lsrs	r3, r3, #25
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	3301      	adds	r3, #1
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800473a:	687b      	ldr	r3, [r7, #4]
}
 800473c:	4618      	mov	r0, r3
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	40021000 	.word	0x40021000
 800474c:	016e3600 	.word	0x016e3600
 8004750:	00f42400 	.word	0x00f42400

08004754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800475c:	2300      	movs	r3, #0
 800475e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004760:	2300      	movs	r3, #0
 8004762:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8098 	beq.w	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004776:	4b43      	ldr	r3, [pc, #268]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10d      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004782:	4b40      	ldr	r3, [pc, #256]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	4a3f      	ldr	r2, [pc, #252]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478c:	6593      	str	r3, [r2, #88]	; 0x58
 800478e:	4b3d      	ldr	r3, [pc, #244]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004796:	60bb      	str	r3, [r7, #8]
 8004798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800479a:	2301      	movs	r3, #1
 800479c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800479e:	4b3a      	ldr	r3, [pc, #232]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a39      	ldr	r2, [pc, #228]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047aa:	f7fd fc9d 	bl	80020e8 <HAL_GetTick>
 80047ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b0:	e009      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b2:	f7fd fc99 	bl	80020e8 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d902      	bls.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	74fb      	strb	r3, [r7, #19]
        break;
 80047c4:	e005      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047c6:	4b30      	ldr	r3, [pc, #192]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0ef      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d159      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047d8:	4b2a      	ldr	r3, [pc, #168]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01e      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d019      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047f4:	4b23      	ldr	r3, [pc, #140]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004800:	4b20      	ldr	r3, [pc, #128]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004810:	4b1c      	ldr	r3, [pc, #112]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004816:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004820:	4a18      	ldr	r2, [pc, #96]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004832:	f7fd fc59 	bl	80020e8 <HAL_GetTick>
 8004836:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004838:	e00b      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483a:	f7fd fc55 	bl	80020e8 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f241 3288 	movw	r2, #5000	; 0x1388
 8004848:	4293      	cmp	r3, r2
 800484a:	d902      	bls.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	74fb      	strb	r3, [r7, #19]
            break;
 8004850:	e006      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004852:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ec      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004860:	7cfb      	ldrb	r3, [r7, #19]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10b      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004874:	4903      	ldr	r1, [pc, #12]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800487c:	e008      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800487e:	7cfb      	ldrb	r3, [r7, #19]
 8004880:	74bb      	strb	r3, [r7, #18]
 8004882:	e005      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004884:	40021000 	.word	0x40021000
 8004888:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004890:	7c7b      	ldrb	r3, [r7, #17]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d105      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004896:	4bac      	ldr	r3, [pc, #688]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489a:	4aab      	ldr	r2, [pc, #684]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800489c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ae:	4ba6      	ldr	r3, [pc, #664]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f023 0203 	bic.w	r2, r3, #3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	49a2      	ldr	r1, [pc, #648]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048d0:	4b9d      	ldr	r3, [pc, #628]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	f023 020c 	bic.w	r2, r3, #12
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	499a      	ldr	r1, [pc, #616]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048f2:	4b95      	ldr	r3, [pc, #596]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4991      	ldr	r1, [pc, #580]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004914:	4b8c      	ldr	r3, [pc, #560]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	4989      	ldr	r1, [pc, #548]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004936:	4b84      	ldr	r3, [pc, #528]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	4980      	ldr	r1, [pc, #512]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004958:	4b7b      	ldr	r3, [pc, #492]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	4978      	ldr	r1, [pc, #480]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800497a:	4b73      	ldr	r3, [pc, #460]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	496f      	ldr	r1, [pc, #444]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800499c:	4b6a      	ldr	r3, [pc, #424]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	4967      	ldr	r1, [pc, #412]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049be:	4b62      	ldr	r3, [pc, #392]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	495e      	ldr	r1, [pc, #376]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049e0:	4b59      	ldr	r3, [pc, #356]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	4956      	ldr	r1, [pc, #344]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d015      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a02:	4b51      	ldr	r3, [pc, #324]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	494d      	ldr	r1, [pc, #308]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a20:	d105      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a22:	4b49      	ldr	r3, [pc, #292]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	4a48      	ldr	r2, [pc, #288]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a2c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d015      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a3a:	4b43      	ldr	r3, [pc, #268]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	493f      	ldr	r1, [pc, #252]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a58:	d105      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a5a:	4b3b      	ldr	r3, [pc, #236]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	4a3a      	ldr	r2, [pc, #232]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a64:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d015      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a72:	4b35      	ldr	r3, [pc, #212]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a80:	4931      	ldr	r1, [pc, #196]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a90:	d105      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a92:	4b2d      	ldr	r3, [pc, #180]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a9c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d015      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aaa:	4b27      	ldr	r3, [pc, #156]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	4923      	ldr	r1, [pc, #140]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ac8:	d105      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aca:	4b1f      	ldr	r3, [pc, #124]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ad4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d015      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ae2:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af0:	4915      	ldr	r1, [pc, #84]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b00:	d105      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b02:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	4a10      	ldr	r2, [pc, #64]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b0c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d018      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	4907      	ldr	r1, [pc, #28]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b38:	d108      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b3a:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	4a02      	ldr	r2, [pc, #8]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b44:	60d3      	str	r3, [r2, #12]
 8004b46:	e001      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004b48:	40021000 	.word	0x40021000
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d015      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	4918      	ldr	r1, [pc, #96]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b76:	d105      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b78:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4a12      	ldr	r2, [pc, #72]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b82:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d015      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b90:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9e:	490a      	ldr	r1, [pc, #40]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004baa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bae:	d105      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004bbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000

08004bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e049      	b.n	8004c72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fd f84c 	bl	8001c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f001 f8da 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d001      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e04f      	b.n	8004d34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01d      	beq.n	8004cf2 <HAL_TIM_Base_Start_IT+0x76>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbe:	d018      	beq.n	8004cf2 <HAL_TIM_Base_Start_IT+0x76>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1f      	ldr	r2, [pc, #124]	; (8004d44 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <HAL_TIM_Base_Start_IT+0x76>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1e      	ldr	r2, [pc, #120]	; (8004d48 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_TIM_Base_Start_IT+0x76>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <HAL_TIM_Base_Start_IT+0xd0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d009      	beq.n	8004cf2 <HAL_TIM_Base_Start_IT+0x76>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1b      	ldr	r2, [pc, #108]	; (8004d50 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_TIM_Base_Start_IT+0x76>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d115      	bne.n	8004d1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b06      	cmp	r3, #6
 8004d02:	d015      	beq.n	8004d30 <HAL_TIM_Base_Start_IT+0xb4>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0a:	d011      	beq.n	8004d30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1c:	e008      	b.n	8004d30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e000      	b.n	8004d32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40000800 	.word	0x40000800
 8004d4c:	40013400 	.word	0x40013400
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40015000 	.word	0x40015000
 8004d58:	00010007 	.word	0x00010007

08004d5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e049      	b.n	8004e02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fc fe80 	bl	8001a88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	f001 f812 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d109      	bne.n	8004e30 <HAL_TIM_PWM_Start+0x24>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	e03c      	b.n	8004eaa <HAL_TIM_PWM_Start+0x9e>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d109      	bne.n	8004e4a <HAL_TIM_PWM_Start+0x3e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	bf14      	ite	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	2300      	moveq	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	e02f      	b.n	8004eaa <HAL_TIM_PWM_Start+0x9e>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d109      	bne.n	8004e64 <HAL_TIM_PWM_Start+0x58>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	e022      	b.n	8004eaa <HAL_TIM_PWM_Start+0x9e>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b0c      	cmp	r3, #12
 8004e68:	d109      	bne.n	8004e7e <HAL_TIM_PWM_Start+0x72>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	bf14      	ite	ne
 8004e76:	2301      	movne	r3, #1
 8004e78:	2300      	moveq	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	e015      	b.n	8004eaa <HAL_TIM_PWM_Start+0x9e>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d109      	bne.n	8004e98 <HAL_TIM_PWM_Start+0x8c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	bf14      	ite	ne
 8004e90:	2301      	movne	r3, #1
 8004e92:	2300      	moveq	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	e008      	b.n	8004eaa <HAL_TIM_PWM_Start+0x9e>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	bf14      	ite	ne
 8004ea4:	2301      	movne	r3, #1
 8004ea6:	2300      	moveq	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e0a1      	b.n	8004ff6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d104      	bne.n	8004ec2 <HAL_TIM_PWM_Start+0xb6>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec0:	e023      	b.n	8004f0a <HAL_TIM_PWM_Start+0xfe>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d104      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0xc6>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed0:	e01b      	b.n	8004f0a <HAL_TIM_PWM_Start+0xfe>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d104      	bne.n	8004ee2 <HAL_TIM_PWM_Start+0xd6>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee0:	e013      	b.n	8004f0a <HAL_TIM_PWM_Start+0xfe>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_PWM_Start+0xe6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ef0:	e00b      	b.n	8004f0a <HAL_TIM_PWM_Start+0xfe>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b10      	cmp	r3, #16
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_PWM_Start+0xf6>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f00:	e003      	b.n	8004f0a <HAL_TIM_PWM_Start+0xfe>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	6839      	ldr	r1, [r7, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 fbba 	bl	800668c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a38      	ldr	r2, [pc, #224]	; (8005000 <HAL_TIM_PWM_Start+0x1f4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d018      	beq.n	8004f54 <HAL_TIM_PWM_Start+0x148>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a37      	ldr	r2, [pc, #220]	; (8005004 <HAL_TIM_PWM_Start+0x1f8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d013      	beq.n	8004f54 <HAL_TIM_PWM_Start+0x148>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a35      	ldr	r2, [pc, #212]	; (8005008 <HAL_TIM_PWM_Start+0x1fc>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00e      	beq.n	8004f54 <HAL_TIM_PWM_Start+0x148>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a34      	ldr	r2, [pc, #208]	; (800500c <HAL_TIM_PWM_Start+0x200>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d009      	beq.n	8004f54 <HAL_TIM_PWM_Start+0x148>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a32      	ldr	r2, [pc, #200]	; (8005010 <HAL_TIM_PWM_Start+0x204>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d004      	beq.n	8004f54 <HAL_TIM_PWM_Start+0x148>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a31      	ldr	r2, [pc, #196]	; (8005014 <HAL_TIM_PWM_Start+0x208>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d101      	bne.n	8004f58 <HAL_TIM_PWM_Start+0x14c>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_TIM_PWM_Start+0x14e>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a23      	ldr	r2, [pc, #140]	; (8005000 <HAL_TIM_PWM_Start+0x1f4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d01d      	beq.n	8004fb4 <HAL_TIM_PWM_Start+0x1a8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f80:	d018      	beq.n	8004fb4 <HAL_TIM_PWM_Start+0x1a8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a24      	ldr	r2, [pc, #144]	; (8005018 <HAL_TIM_PWM_Start+0x20c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <HAL_TIM_PWM_Start+0x1a8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a22      	ldr	r2, [pc, #136]	; (800501c <HAL_TIM_PWM_Start+0x210>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00e      	beq.n	8004fb4 <HAL_TIM_PWM_Start+0x1a8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1a      	ldr	r2, [pc, #104]	; (8005004 <HAL_TIM_PWM_Start+0x1f8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d009      	beq.n	8004fb4 <HAL_TIM_PWM_Start+0x1a8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <HAL_TIM_PWM_Start+0x1fc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <HAL_TIM_PWM_Start+0x1a8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a19      	ldr	r2, [pc, #100]	; (8005014 <HAL_TIM_PWM_Start+0x208>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d115      	bne.n	8004fe0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	4b19      	ldr	r3, [pc, #100]	; (8005020 <HAL_TIM_PWM_Start+0x214>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b06      	cmp	r3, #6
 8004fc4:	d015      	beq.n	8004ff2 <HAL_TIM_PWM_Start+0x1e6>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fcc:	d011      	beq.n	8004ff2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fde:	e008      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	e000      	b.n	8004ff4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40012c00 	.word	0x40012c00
 8005004:	40013400 	.word	0x40013400
 8005008:	40014000 	.word	0x40014000
 800500c:	40014400 	.word	0x40014400
 8005010:	40014800 	.word	0x40014800
 8005014:	40015000 	.word	0x40015000
 8005018:	40000400 	.word	0x40000400
 800501c:	40000800 	.word	0x40000800
 8005020:	00010007 	.word	0x00010007

08005024 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f001 fb28 	bl	800668c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a40      	ldr	r2, [pc, #256]	; (8005144 <HAL_TIM_PWM_Stop+0x120>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d018      	beq.n	8005078 <HAL_TIM_PWM_Stop+0x54>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3f      	ldr	r2, [pc, #252]	; (8005148 <HAL_TIM_PWM_Stop+0x124>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <HAL_TIM_PWM_Stop+0x54>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a3d      	ldr	r2, [pc, #244]	; (800514c <HAL_TIM_PWM_Stop+0x128>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00e      	beq.n	8005078 <HAL_TIM_PWM_Stop+0x54>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a3c      	ldr	r2, [pc, #240]	; (8005150 <HAL_TIM_PWM_Stop+0x12c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d009      	beq.n	8005078 <HAL_TIM_PWM_Stop+0x54>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a3a      	ldr	r2, [pc, #232]	; (8005154 <HAL_TIM_PWM_Stop+0x130>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_TIM_PWM_Stop+0x54>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a39      	ldr	r2, [pc, #228]	; (8005158 <HAL_TIM_PWM_Stop+0x134>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d101      	bne.n	800507c <HAL_TIM_PWM_Stop+0x58>
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <HAL_TIM_PWM_Stop+0x5a>
 800507c:	2300      	movs	r3, #0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d017      	beq.n	80050b2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6a1a      	ldr	r2, [r3, #32]
 8005088:	f241 1311 	movw	r3, #4369	; 0x1111
 800508c:	4013      	ands	r3, r2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10f      	bne.n	80050b2 <HAL_TIM_PWM_Stop+0x8e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	f244 4344 	movw	r3, #17476	; 0x4444
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d107      	bne.n	80050b2 <HAL_TIM_PWM_Stop+0x8e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10f      	bne.n	80050e2 <HAL_TIM_PWM_Stop+0xbe>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6a1a      	ldr	r2, [r3, #32]
 80050c8:	f244 4344 	movw	r3, #17476	; 0x4444
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <HAL_TIM_PWM_Stop+0xbe>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <HAL_TIM_PWM_Stop+0xce>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f0:	e023      	b.n	800513a <HAL_TIM_PWM_Stop+0x116>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d104      	bne.n	8005102 <HAL_TIM_PWM_Stop+0xde>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005100:	e01b      	b.n	800513a <HAL_TIM_PWM_Stop+0x116>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d104      	bne.n	8005112 <HAL_TIM_PWM_Stop+0xee>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005110:	e013      	b.n	800513a <HAL_TIM_PWM_Stop+0x116>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b0c      	cmp	r3, #12
 8005116:	d104      	bne.n	8005122 <HAL_TIM_PWM_Stop+0xfe>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005120:	e00b      	b.n	800513a <HAL_TIM_PWM_Stop+0x116>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b10      	cmp	r3, #16
 8005126:	d104      	bne.n	8005132 <HAL_TIM_PWM_Stop+0x10e>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005130:	e003      	b.n	800513a <HAL_TIM_PWM_Stop+0x116>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40012c00 	.word	0x40012c00
 8005148:	40013400 	.word	0x40013400
 800514c:	40014000 	.word	0x40014000
 8005150:	40014400 	.word	0x40014400
 8005154:	40014800 	.word	0x40014800
 8005158:	40015000 	.word	0x40015000

0800515c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d109      	bne.n	8005180 <HAL_TIM_PWM_Start_IT+0x24>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	e03c      	b.n	80051fa <HAL_TIM_PWM_Start_IT+0x9e>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b04      	cmp	r3, #4
 8005184:	d109      	bne.n	800519a <HAL_TIM_PWM_Start_IT+0x3e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b01      	cmp	r3, #1
 8005190:	bf14      	ite	ne
 8005192:	2301      	movne	r3, #1
 8005194:	2300      	moveq	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	e02f      	b.n	80051fa <HAL_TIM_PWM_Start_IT+0x9e>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d109      	bne.n	80051b4 <HAL_TIM_PWM_Start_IT+0x58>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	bf14      	ite	ne
 80051ac:	2301      	movne	r3, #1
 80051ae:	2300      	moveq	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	e022      	b.n	80051fa <HAL_TIM_PWM_Start_IT+0x9e>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b0c      	cmp	r3, #12
 80051b8:	d109      	bne.n	80051ce <HAL_TIM_PWM_Start_IT+0x72>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	bf14      	ite	ne
 80051c6:	2301      	movne	r3, #1
 80051c8:	2300      	moveq	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	e015      	b.n	80051fa <HAL_TIM_PWM_Start_IT+0x9e>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b10      	cmp	r3, #16
 80051d2:	d109      	bne.n	80051e8 <HAL_TIM_PWM_Start_IT+0x8c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	bf14      	ite	ne
 80051e0:	2301      	movne	r3, #1
 80051e2:	2300      	moveq	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	e008      	b.n	80051fa <HAL_TIM_PWM_Start_IT+0x9e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e0e7      	b.n	80053d2 <HAL_TIM_PWM_Start_IT+0x276>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d104      	bne.n	8005212 <HAL_TIM_PWM_Start_IT+0xb6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005210:	e023      	b.n	800525a <HAL_TIM_PWM_Start_IT+0xfe>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d104      	bne.n	8005222 <HAL_TIM_PWM_Start_IT+0xc6>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005220:	e01b      	b.n	800525a <HAL_TIM_PWM_Start_IT+0xfe>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d104      	bne.n	8005232 <HAL_TIM_PWM_Start_IT+0xd6>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005230:	e013      	b.n	800525a <HAL_TIM_PWM_Start_IT+0xfe>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b0c      	cmp	r3, #12
 8005236:	d104      	bne.n	8005242 <HAL_TIM_PWM_Start_IT+0xe6>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005240:	e00b      	b.n	800525a <HAL_TIM_PWM_Start_IT+0xfe>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b10      	cmp	r3, #16
 8005246:	d104      	bne.n	8005252 <HAL_TIM_PWM_Start_IT+0xf6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005250:	e003      	b.n	800525a <HAL_TIM_PWM_Start_IT+0xfe>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b0c      	cmp	r3, #12
 800525e:	d841      	bhi.n	80052e4 <HAL_TIM_PWM_Start_IT+0x188>
 8005260:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <HAL_TIM_PWM_Start_IT+0x10c>)
 8005262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005266:	bf00      	nop
 8005268:	0800529d 	.word	0x0800529d
 800526c:	080052e5 	.word	0x080052e5
 8005270:	080052e5 	.word	0x080052e5
 8005274:	080052e5 	.word	0x080052e5
 8005278:	080052af 	.word	0x080052af
 800527c:	080052e5 	.word	0x080052e5
 8005280:	080052e5 	.word	0x080052e5
 8005284:	080052e5 	.word	0x080052e5
 8005288:	080052c1 	.word	0x080052c1
 800528c:	080052e5 	.word	0x080052e5
 8005290:	080052e5 	.word	0x080052e5
 8005294:	080052e5 	.word	0x080052e5
 8005298:	080052d3 	.word	0x080052d3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0202 	orr.w	r2, r2, #2
 80052aa:	60da      	str	r2, [r3, #12]
      break;
 80052ac:	e01b      	b.n	80052e6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0204 	orr.w	r2, r2, #4
 80052bc:	60da      	str	r2, [r3, #12]
      break;
 80052be:	e012      	b.n	80052e6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0208 	orr.w	r2, r2, #8
 80052ce:	60da      	str	r2, [r3, #12]
      break;
 80052d0:	e009      	b.n	80052e6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0210 	orr.w	r2, r2, #16
 80052e0:	60da      	str	r2, [r3, #12]
      break;
 80052e2:	e000      	b.n	80052e6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80052e4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2201      	movs	r2, #1
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 f9cc 	bl	800668c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a38      	ldr	r2, [pc, #224]	; (80053dc <HAL_TIM_PWM_Start_IT+0x280>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d018      	beq.n	8005330 <HAL_TIM_PWM_Start_IT+0x1d4>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a37      	ldr	r2, [pc, #220]	; (80053e0 <HAL_TIM_PWM_Start_IT+0x284>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d013      	beq.n	8005330 <HAL_TIM_PWM_Start_IT+0x1d4>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a35      	ldr	r2, [pc, #212]	; (80053e4 <HAL_TIM_PWM_Start_IT+0x288>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00e      	beq.n	8005330 <HAL_TIM_PWM_Start_IT+0x1d4>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a34      	ldr	r2, [pc, #208]	; (80053e8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d009      	beq.n	8005330 <HAL_TIM_PWM_Start_IT+0x1d4>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a32      	ldr	r2, [pc, #200]	; (80053ec <HAL_TIM_PWM_Start_IT+0x290>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_TIM_PWM_Start_IT+0x1d4>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a31      	ldr	r2, [pc, #196]	; (80053f0 <HAL_TIM_PWM_Start_IT+0x294>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d101      	bne.n	8005334 <HAL_TIM_PWM_Start_IT+0x1d8>
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <HAL_TIM_PWM_Start_IT+0x1da>
 8005334:	2300      	movs	r3, #0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <HAL_TIM_PWM_Start_IT+0x1ee>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a23      	ldr	r2, [pc, #140]	; (80053dc <HAL_TIM_PWM_Start_IT+0x280>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d01d      	beq.n	8005390 <HAL_TIM_PWM_Start_IT+0x234>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535c:	d018      	beq.n	8005390 <HAL_TIM_PWM_Start_IT+0x234>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <HAL_TIM_PWM_Start_IT+0x298>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d013      	beq.n	8005390 <HAL_TIM_PWM_Start_IT+0x234>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <HAL_TIM_PWM_Start_IT+0x29c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00e      	beq.n	8005390 <HAL_TIM_PWM_Start_IT+0x234>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1a      	ldr	r2, [pc, #104]	; (80053e0 <HAL_TIM_PWM_Start_IT+0x284>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d009      	beq.n	8005390 <HAL_TIM_PWM_Start_IT+0x234>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <HAL_TIM_PWM_Start_IT+0x288>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d004      	beq.n	8005390 <HAL_TIM_PWM_Start_IT+0x234>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <HAL_TIM_PWM_Start_IT+0x294>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d115      	bne.n	80053bc <HAL_TIM_PWM_Start_IT+0x260>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	4b19      	ldr	r3, [pc, #100]	; (80053fc <HAL_TIM_PWM_Start_IT+0x2a0>)
 8005398:	4013      	ands	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b06      	cmp	r3, #6
 80053a0:	d015      	beq.n	80053ce <HAL_TIM_PWM_Start_IT+0x272>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a8:	d011      	beq.n	80053ce <HAL_TIM_PWM_Start_IT+0x272>
    {
      __HAL_TIM_ENABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ba:	e008      	b.n	80053ce <HAL_TIM_PWM_Start_IT+0x272>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e000      	b.n	80053d0 <HAL_TIM_PWM_Start_IT+0x274>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	40013400 	.word	0x40013400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800
 80053f0:	40015000 	.word	0x40015000
 80053f4:	40000400 	.word	0x40000400
 80053f8:	40000800 	.word	0x40000800
 80053fc:	00010007 	.word	0x00010007

08005400 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e097      	b.n	8005544 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7fc fb51 	bl	8001ad0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2202      	movs	r2, #2
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005444:	f023 0307 	bic.w	r3, r3, #7
 8005448:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3304      	adds	r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f000 fcb5 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005482:	f023 0303 	bic.w	r3, r3, #3
 8005486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	4313      	orrs	r3, r2
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054a0:	f023 030c 	bic.w	r3, r3, #12
 80054a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	4313      	orrs	r3, r2
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	011a      	lsls	r2, r3, #4
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	031b      	lsls	r3, r3, #12
 80054d0:	4313      	orrs	r3, r2
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80054de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	4313      	orrs	r3, r2
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800555c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005564:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800556c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005574:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d110      	bne.n	800559e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d102      	bne.n	8005588 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005582:	7b7b      	ldrb	r3, [r7, #13]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d001      	beq.n	800558c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e069      	b.n	8005660 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800559c:	e031      	b.n	8005602 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d110      	bne.n	80055c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055a4:	7bbb      	ldrb	r3, [r7, #14]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d102      	bne.n	80055b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055aa:	7b3b      	ldrb	r3, [r7, #12]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d001      	beq.n	80055b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e055      	b.n	8005660 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055c4:	e01d      	b.n	8005602 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d108      	bne.n	80055de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055cc:	7bbb      	ldrb	r3, [r7, #14]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d105      	bne.n	80055de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055d2:	7b7b      	ldrb	r3, [r7, #13]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d102      	bne.n	80055de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055d8:	7b3b      	ldrb	r3, [r7, #12]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d001      	beq.n	80055e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e03e      	b.n	8005660 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_TIM_Encoder_Start+0xc4>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b04      	cmp	r3, #4
 800560c:	d008      	beq.n	8005620 <HAL_TIM_Encoder_Start+0xd4>
 800560e:	e00f      	b.n	8005630 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2201      	movs	r2, #1
 8005616:	2100      	movs	r1, #0
 8005618:	4618      	mov	r0, r3
 800561a:	f001 f837 	bl	800668c <TIM_CCxChannelCmd>
      break;
 800561e:	e016      	b.n	800564e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2201      	movs	r2, #1
 8005626:	2104      	movs	r1, #4
 8005628:	4618      	mov	r0, r3
 800562a:	f001 f82f 	bl	800668c <TIM_CCxChannelCmd>
      break;
 800562e:	e00e      	b.n	800564e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2201      	movs	r2, #1
 8005636:	2100      	movs	r1, #0
 8005638:	4618      	mov	r0, r3
 800563a:	f001 f827 	bl	800668c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2201      	movs	r2, #1
 8005644:	2104      	movs	r1, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f001 f820 	bl	800668c <TIM_CCxChannelCmd>
      break;
 800564c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b02      	cmp	r3, #2
 800567c:	d122      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b02      	cmp	r3, #2
 800568a:	d11b      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0202 	mvn.w	r2, #2
 8005694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fb76 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 80056b0:	e005      	b.n	80056be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fb68 	bl	8005d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fb fdaf 	bl	800121c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d122      	bne.n	8005718 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d11b      	bne.n	8005718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0204 	mvn.w	r2, #4
 80056e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fb4c 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 8005704:	e005      	b.n	8005712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fb3e 	bl	8005d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7fb fd85 	bl	800121c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b08      	cmp	r3, #8
 8005724:	d122      	bne.n	800576c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b08      	cmp	r3, #8
 8005732:	d11b      	bne.n	800576c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0208 	mvn.w	r2, #8
 800573c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2204      	movs	r2, #4
 8005742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fb22 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 8005758:	e005      	b.n	8005766 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fb14 	bl	8005d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fb fd5b 	bl	800121c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b10      	cmp	r3, #16
 8005778:	d122      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b10      	cmp	r3, #16
 8005786:	d11b      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0210 	mvn.w	r2, #16
 8005790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2208      	movs	r2, #8
 8005796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 faf8 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 80057ac:	e005      	b.n	80057ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 faea 	bl	8005d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7fb fd31 	bl	800121c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d10e      	bne.n	80057ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d107      	bne.n	80057ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0201 	mvn.w	r2, #1
 80057e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fb fb32 	bl	8000e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f6:	2b80      	cmp	r3, #128	; 0x80
 80057f8:	d10e      	bne.n	8005818 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005804:	2b80      	cmp	r3, #128	; 0x80
 8005806:	d107      	bne.n	8005818 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 f8aa 	bl	800696c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005826:	d10e      	bne.n	8005846 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d107      	bne.n	8005846 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800583e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f001 f89d 	bl	8006980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	d10e      	bne.n	8005872 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	d107      	bne.n	8005872 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800586a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fa9f 	bl	8005db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b20      	cmp	r3, #32
 800587e:	d10e      	bne.n	800589e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b20      	cmp	r3, #32
 800588c:	d107      	bne.n	800589e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f06f 0220 	mvn.w	r2, #32
 8005896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 f85d 	bl	8006958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ac:	d10f      	bne.n	80058ce <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058bc:	d107      	bne.n	80058ce <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80058c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f001 f863 	bl	8006994 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058dc:	d10f      	bne.n	80058fe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058ec:	d107      	bne.n	80058fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80058f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 f855 	bl	80069a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800590c:	d10f      	bne.n	800592e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800591c:	d107      	bne.n	800592e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 f847 	bl	80069bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005938:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800593c:	d10f      	bne.n	800595e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005948:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800594c:	d107      	bne.n	800595e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 f839 	bl	80069d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800595e:	bf00      	nop
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800597e:	2302      	movs	r3, #2
 8005980:	e0fd      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b14      	cmp	r3, #20
 800598e:	f200 80f0 	bhi.w	8005b72 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005992:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005998:	080059ed 	.word	0x080059ed
 800599c:	08005b73 	.word	0x08005b73
 80059a0:	08005b73 	.word	0x08005b73
 80059a4:	08005b73 	.word	0x08005b73
 80059a8:	08005a2d 	.word	0x08005a2d
 80059ac:	08005b73 	.word	0x08005b73
 80059b0:	08005b73 	.word	0x08005b73
 80059b4:	08005b73 	.word	0x08005b73
 80059b8:	08005a6f 	.word	0x08005a6f
 80059bc:	08005b73 	.word	0x08005b73
 80059c0:	08005b73 	.word	0x08005b73
 80059c4:	08005b73 	.word	0x08005b73
 80059c8:	08005aaf 	.word	0x08005aaf
 80059cc:	08005b73 	.word	0x08005b73
 80059d0:	08005b73 	.word	0x08005b73
 80059d4:	08005b73 	.word	0x08005b73
 80059d8:	08005af1 	.word	0x08005af1
 80059dc:	08005b73 	.word	0x08005b73
 80059e0:	08005b73 	.word	0x08005b73
 80059e4:	08005b73 	.word	0x08005b73
 80059e8:	08005b31 	.word	0x08005b31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fa84 	bl	8005f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0208 	orr.w	r2, r2, #8
 8005a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0204 	bic.w	r2, r2, #4
 8005a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6999      	ldr	r1, [r3, #24]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	619a      	str	r2, [r3, #24]
      break;
 8005a2a:	e0a3      	b.n	8005b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fafe 	bl	8006034 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6999      	ldr	r1, [r3, #24]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	021a      	lsls	r2, r3, #8
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	619a      	str	r2, [r3, #24]
      break;
 8005a6c:	e082      	b.n	8005b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fb71 	bl	800615c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0208 	orr.w	r2, r2, #8
 8005a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0204 	bic.w	r2, r2, #4
 8005a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69d9      	ldr	r1, [r3, #28]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	61da      	str	r2, [r3, #28]
      break;
 8005aac:	e062      	b.n	8005b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fbe3 	bl	8006280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69d9      	ldr	r1, [r3, #28]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	021a      	lsls	r2, r3, #8
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	61da      	str	r2, [r3, #28]
      break;
 8005aee:	e041      	b.n	8005b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fc56 	bl	80063a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0208 	orr.w	r2, r2, #8
 8005b0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0204 	bic.w	r2, r2, #4
 8005b1a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005b2e:	e021      	b.n	8005b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fca0 	bl	800647c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	021a      	lsls	r2, r3, #8
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005b70:	e000      	b.n	8005b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005b72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop

08005b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIM_ConfigClockSource+0x18>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e0e5      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x1e4>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005bbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a66      	ldr	r2, [pc, #408]	; (8005d74 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	f000 80b1 	beq.w	8005d42 <HAL_TIM_ConfigClockSource+0x1ba>
 8005be0:	4a64      	ldr	r2, [pc, #400]	; (8005d74 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	f200 80b6 	bhi.w	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005be8:	4a63      	ldr	r2, [pc, #396]	; (8005d78 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	f000 80a9 	beq.w	8005d42 <HAL_TIM_ConfigClockSource+0x1ba>
 8005bf0:	4a61      	ldr	r2, [pc, #388]	; (8005d78 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	f200 80ae 	bhi.w	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005bf8:	4a60      	ldr	r2, [pc, #384]	; (8005d7c <HAL_TIM_ConfigClockSource+0x1f4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	f000 80a1 	beq.w	8005d42 <HAL_TIM_ConfigClockSource+0x1ba>
 8005c00:	4a5e      	ldr	r2, [pc, #376]	; (8005d7c <HAL_TIM_ConfigClockSource+0x1f4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	f200 80a6 	bhi.w	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005c08:	4a5d      	ldr	r2, [pc, #372]	; (8005d80 <HAL_TIM_ConfigClockSource+0x1f8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	f000 8099 	beq.w	8005d42 <HAL_TIM_ConfigClockSource+0x1ba>
 8005c10:	4a5b      	ldr	r2, [pc, #364]	; (8005d80 <HAL_TIM_ConfigClockSource+0x1f8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	f200 809e 	bhi.w	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005c18:	4a5a      	ldr	r2, [pc, #360]	; (8005d84 <HAL_TIM_ConfigClockSource+0x1fc>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	f000 8091 	beq.w	8005d42 <HAL_TIM_ConfigClockSource+0x1ba>
 8005c20:	4a58      	ldr	r2, [pc, #352]	; (8005d84 <HAL_TIM_ConfigClockSource+0x1fc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	f200 8096 	bhi.w	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005c28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c2c:	f000 8089 	beq.w	8005d42 <HAL_TIM_ConfigClockSource+0x1ba>
 8005c30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c34:	f200 808e 	bhi.w	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3c:	d03e      	beq.n	8005cbc <HAL_TIM_ConfigClockSource+0x134>
 8005c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c42:	f200 8087 	bhi.w	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4a:	f000 8085 	beq.w	8005d58 <HAL_TIM_ConfigClockSource+0x1d0>
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c52:	d87f      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005c54:	2b70      	cmp	r3, #112	; 0x70
 8005c56:	d01a      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0x106>
 8005c58:	2b70      	cmp	r3, #112	; 0x70
 8005c5a:	d87b      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005c5c:	2b60      	cmp	r3, #96	; 0x60
 8005c5e:	d050      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x17a>
 8005c60:	2b60      	cmp	r3, #96	; 0x60
 8005c62:	d877      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005c64:	2b50      	cmp	r3, #80	; 0x50
 8005c66:	d03c      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8005c68:	2b50      	cmp	r3, #80	; 0x50
 8005c6a:	d873      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d058      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x19a>
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d86f      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005c74:	2b30      	cmp	r3, #48	; 0x30
 8005c76:	d064      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x1ba>
 8005c78:	2b30      	cmp	r3, #48	; 0x30
 8005c7a:	d86b      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d060      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x1ba>
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d867      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d05c      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x1ba>
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d05a      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x1ba>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005c8c:	e062      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x1cc>
      TIM_ETR_SetConfig(htim->Instance,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6899      	ldr	r1, [r3, #8]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f000 fcd5 	bl	800664c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	609a      	str	r2, [r3, #8]
      break;
 8005cba:	e04e      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x1d2>
      TIM_ETR_SetConfig(htim->Instance,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	6899      	ldr	r1, [r3, #8]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f000 fcbe 	bl	800664c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cde:	609a      	str	r2, [r3, #8]
      break;
 8005ce0:	e03b      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x1d2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f000 fc30 	bl	8006554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2150      	movs	r1, #80	; 0x50
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fc89 	bl	8006612 <TIM_ITRx_SetConfig>
      break;
 8005d00:	e02b      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x1d2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f000 fc4f 	bl	80065b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2160      	movs	r1, #96	; 0x60
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fc79 	bl	8006612 <TIM_ITRx_SetConfig>
      break;
 8005d20:	e01b      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x1d2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f000 fc10 	bl	8006554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2140      	movs	r1, #64	; 0x40
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fc69 	bl	8006612 <TIM_ITRx_SetConfig>
      break;
 8005d40:	e00b      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x1d2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f000 fc60 	bl	8006612 <TIM_ITRx_SetConfig>
        break;
 8005d52:	e002      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x1d2>
      break;
 8005d54:	bf00      	nop
 8005d56:	e000      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x1d2>
      break;
 8005d58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	00100070 	.word	0x00100070
 8005d78:	00100050 	.word	0x00100050
 8005d7c:	00100040 	.word	0x00100040
 8005d80:	00100030 	.word	0x00100030
 8005d84:	00100020 	.word	0x00100020

08005d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a42      	ldr	r2, [pc, #264]	; (8005ee0 <TIM_Base_SetConfig+0x11c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d013      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d00f      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a3f      	ldr	r2, [pc, #252]	; (8005ee4 <TIM_Base_SetConfig+0x120>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00b      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3e      	ldr	r2, [pc, #248]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d007      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a3d      	ldr	r2, [pc, #244]	; (8005eec <TIM_Base_SetConfig+0x128>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a3c      	ldr	r2, [pc, #240]	; (8005ef0 <TIM_Base_SetConfig+0x12c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d108      	bne.n	8005e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a31      	ldr	r2, [pc, #196]	; (8005ee0 <TIM_Base_SetConfig+0x11c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d01f      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e24:	d01b      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a2e      	ldr	r2, [pc, #184]	; (8005ee4 <TIM_Base_SetConfig+0x120>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d017      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2d      	ldr	r2, [pc, #180]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d013      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2c      	ldr	r2, [pc, #176]	; (8005eec <TIM_Base_SetConfig+0x128>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00f      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a2c      	ldr	r2, [pc, #176]	; (8005ef4 <TIM_Base_SetConfig+0x130>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00b      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a2b      	ldr	r2, [pc, #172]	; (8005ef8 <TIM_Base_SetConfig+0x134>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a2a      	ldr	r2, [pc, #168]	; (8005efc <TIM_Base_SetConfig+0x138>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a25      	ldr	r2, [pc, #148]	; (8005ef0 <TIM_Base_SetConfig+0x12c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d108      	bne.n	8005e70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a12      	ldr	r2, [pc, #72]	; (8005ee0 <TIM_Base_SetConfig+0x11c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d013      	beq.n	8005ec4 <TIM_Base_SetConfig+0x100>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a13      	ldr	r2, [pc, #76]	; (8005eec <TIM_Base_SetConfig+0x128>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00f      	beq.n	8005ec4 <TIM_Base_SetConfig+0x100>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a13      	ldr	r2, [pc, #76]	; (8005ef4 <TIM_Base_SetConfig+0x130>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <TIM_Base_SetConfig+0x100>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a12      	ldr	r2, [pc, #72]	; (8005ef8 <TIM_Base_SetConfig+0x134>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <TIM_Base_SetConfig+0x100>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a11      	ldr	r2, [pc, #68]	; (8005efc <TIM_Base_SetConfig+0x138>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_Base_SetConfig+0x100>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a0c      	ldr	r2, [pc, #48]	; (8005ef0 <TIM_Base_SetConfig+0x12c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d103      	bne.n	8005ecc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	615a      	str	r2, [r3, #20]
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40013400 	.word	0x40013400
 8005ef0:	40015000 	.word	0x40015000
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40014400 	.word	0x40014400
 8005efc:	40014800 	.word	0x40014800

08005f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f023 0201 	bic.w	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0303 	bic.w	r3, r3, #3
 8005f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f023 0302 	bic.w	r3, r3, #2
 8005f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a30      	ldr	r2, [pc, #192]	; (800601c <TIM_OC1_SetConfig+0x11c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d013      	beq.n	8005f88 <TIM_OC1_SetConfig+0x88>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a2f      	ldr	r2, [pc, #188]	; (8006020 <TIM_OC1_SetConfig+0x120>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00f      	beq.n	8005f88 <TIM_OC1_SetConfig+0x88>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a2e      	ldr	r2, [pc, #184]	; (8006024 <TIM_OC1_SetConfig+0x124>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00b      	beq.n	8005f88 <TIM_OC1_SetConfig+0x88>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a2d      	ldr	r2, [pc, #180]	; (8006028 <TIM_OC1_SetConfig+0x128>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d007      	beq.n	8005f88 <TIM_OC1_SetConfig+0x88>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a2c      	ldr	r2, [pc, #176]	; (800602c <TIM_OC1_SetConfig+0x12c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_OC1_SetConfig+0x88>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a2b      	ldr	r2, [pc, #172]	; (8006030 <TIM_OC1_SetConfig+0x130>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d10c      	bne.n	8005fa2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f023 0308 	bic.w	r3, r3, #8
 8005f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f023 0304 	bic.w	r3, r3, #4
 8005fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a1d      	ldr	r2, [pc, #116]	; (800601c <TIM_OC1_SetConfig+0x11c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <TIM_OC1_SetConfig+0xd2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a1c      	ldr	r2, [pc, #112]	; (8006020 <TIM_OC1_SetConfig+0x120>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00f      	beq.n	8005fd2 <TIM_OC1_SetConfig+0xd2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a1b      	ldr	r2, [pc, #108]	; (8006024 <TIM_OC1_SetConfig+0x124>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00b      	beq.n	8005fd2 <TIM_OC1_SetConfig+0xd2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a1a      	ldr	r2, [pc, #104]	; (8006028 <TIM_OC1_SetConfig+0x128>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d007      	beq.n	8005fd2 <TIM_OC1_SetConfig+0xd2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a19      	ldr	r2, [pc, #100]	; (800602c <TIM_OC1_SetConfig+0x12c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <TIM_OC1_SetConfig+0xd2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a18      	ldr	r2, [pc, #96]	; (8006030 <TIM_OC1_SetConfig+0x130>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d111      	bne.n	8005ff6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40013400 	.word	0x40013400
 8006024:	40014000 	.word	0x40014000
 8006028:	40014400 	.word	0x40014400
 800602c:	40014800 	.word	0x40014800
 8006030:	40015000 	.word	0x40015000

08006034 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f023 0210 	bic.w	r2, r3, #16
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	021b      	lsls	r3, r3, #8
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f023 0320 	bic.w	r3, r3, #32
 8006082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a2c      	ldr	r2, [pc, #176]	; (8006144 <TIM_OC2_SetConfig+0x110>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d007      	beq.n	80060a8 <TIM_OC2_SetConfig+0x74>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a2b      	ldr	r2, [pc, #172]	; (8006148 <TIM_OC2_SetConfig+0x114>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_OC2_SetConfig+0x74>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a2a      	ldr	r2, [pc, #168]	; (800614c <TIM_OC2_SetConfig+0x118>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d10d      	bne.n	80060c4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a1f      	ldr	r2, [pc, #124]	; (8006144 <TIM_OC2_SetConfig+0x110>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <TIM_OC2_SetConfig+0xc0>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <TIM_OC2_SetConfig+0x114>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00f      	beq.n	80060f4 <TIM_OC2_SetConfig+0xc0>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1e      	ldr	r2, [pc, #120]	; (8006150 <TIM_OC2_SetConfig+0x11c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00b      	beq.n	80060f4 <TIM_OC2_SetConfig+0xc0>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <TIM_OC2_SetConfig+0x120>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d007      	beq.n	80060f4 <TIM_OC2_SetConfig+0xc0>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1c      	ldr	r2, [pc, #112]	; (8006158 <TIM_OC2_SetConfig+0x124>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_OC2_SetConfig+0xc0>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a17      	ldr	r2, [pc, #92]	; (800614c <TIM_OC2_SetConfig+0x118>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d113      	bne.n	800611c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006102:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40012c00 	.word	0x40012c00
 8006148:	40013400 	.word	0x40013400
 800614c:	40015000 	.word	0x40015000
 8006150:	40014000 	.word	0x40014000
 8006154:	40014400 	.word	0x40014400
 8006158:	40014800 	.word	0x40014800

0800615c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a2b      	ldr	r2, [pc, #172]	; (8006268 <TIM_OC3_SetConfig+0x10c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d007      	beq.n	80061ce <TIM_OC3_SetConfig+0x72>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2a      	ldr	r2, [pc, #168]	; (800626c <TIM_OC3_SetConfig+0x110>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d003      	beq.n	80061ce <TIM_OC3_SetConfig+0x72>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a29      	ldr	r2, [pc, #164]	; (8006270 <TIM_OC3_SetConfig+0x114>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d10d      	bne.n	80061ea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <TIM_OC3_SetConfig+0x10c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d013      	beq.n	800621a <TIM_OC3_SetConfig+0xbe>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1d      	ldr	r2, [pc, #116]	; (800626c <TIM_OC3_SetConfig+0x110>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00f      	beq.n	800621a <TIM_OC3_SetConfig+0xbe>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <TIM_OC3_SetConfig+0x118>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00b      	beq.n	800621a <TIM_OC3_SetConfig+0xbe>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a1c      	ldr	r2, [pc, #112]	; (8006278 <TIM_OC3_SetConfig+0x11c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d007      	beq.n	800621a <TIM_OC3_SetConfig+0xbe>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a1b      	ldr	r2, [pc, #108]	; (800627c <TIM_OC3_SetConfig+0x120>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d003      	beq.n	800621a <TIM_OC3_SetConfig+0xbe>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a16      	ldr	r2, [pc, #88]	; (8006270 <TIM_OC3_SetConfig+0x114>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d113      	bne.n	8006242 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	4313      	orrs	r3, r2
 8006234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	621a      	str	r2, [r3, #32]
}
 800625c:	bf00      	nop
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	40012c00 	.word	0x40012c00
 800626c:	40013400 	.word	0x40013400
 8006270:	40015000 	.word	0x40015000
 8006274:	40014000 	.word	0x40014000
 8006278:	40014400 	.word	0x40014400
 800627c:	40014800 	.word	0x40014800

08006280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	021b      	lsls	r3, r3, #8
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	031b      	lsls	r3, r3, #12
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a2c      	ldr	r2, [pc, #176]	; (8006390 <TIM_OC4_SetConfig+0x110>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d007      	beq.n	80062f4 <TIM_OC4_SetConfig+0x74>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a2b      	ldr	r2, [pc, #172]	; (8006394 <TIM_OC4_SetConfig+0x114>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d003      	beq.n	80062f4 <TIM_OC4_SetConfig+0x74>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a2a      	ldr	r2, [pc, #168]	; (8006398 <TIM_OC4_SetConfig+0x118>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d10d      	bne.n	8006310 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	031b      	lsls	r3, r3, #12
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	4313      	orrs	r3, r2
 8006306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800630e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a1f      	ldr	r2, [pc, #124]	; (8006390 <TIM_OC4_SetConfig+0x110>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d013      	beq.n	8006340 <TIM_OC4_SetConfig+0xc0>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a1e      	ldr	r2, [pc, #120]	; (8006394 <TIM_OC4_SetConfig+0x114>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00f      	beq.n	8006340 <TIM_OC4_SetConfig+0xc0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a1e      	ldr	r2, [pc, #120]	; (800639c <TIM_OC4_SetConfig+0x11c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00b      	beq.n	8006340 <TIM_OC4_SetConfig+0xc0>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a1d      	ldr	r2, [pc, #116]	; (80063a0 <TIM_OC4_SetConfig+0x120>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d007      	beq.n	8006340 <TIM_OC4_SetConfig+0xc0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a1c      	ldr	r2, [pc, #112]	; (80063a4 <TIM_OC4_SetConfig+0x124>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_OC4_SetConfig+0xc0>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a17      	ldr	r2, [pc, #92]	; (8006398 <TIM_OC4_SetConfig+0x118>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d113      	bne.n	8006368 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006346:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800634e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	019b      	lsls	r3, r3, #6
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	019b      	lsls	r3, r3, #6
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	621a      	str	r2, [r3, #32]
}
 8006382:	bf00      	nop
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40013400 	.word	0x40013400
 8006398:	40015000 	.word	0x40015000
 800639c:	40014000 	.word	0x40014000
 80063a0:	40014400 	.word	0x40014400
 80063a4:	40014800 	.word	0x40014800

080063a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	041b      	lsls	r3, r3, #16
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a19      	ldr	r2, [pc, #100]	; (8006464 <TIM_OC5_SetConfig+0xbc>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <TIM_OC5_SetConfig+0x82>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a18      	ldr	r2, [pc, #96]	; (8006468 <TIM_OC5_SetConfig+0xc0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00f      	beq.n	800642a <TIM_OC5_SetConfig+0x82>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a17      	ldr	r2, [pc, #92]	; (800646c <TIM_OC5_SetConfig+0xc4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00b      	beq.n	800642a <TIM_OC5_SetConfig+0x82>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a16      	ldr	r2, [pc, #88]	; (8006470 <TIM_OC5_SetConfig+0xc8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <TIM_OC5_SetConfig+0x82>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a15      	ldr	r2, [pc, #84]	; (8006474 <TIM_OC5_SetConfig+0xcc>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d003      	beq.n	800642a <TIM_OC5_SetConfig+0x82>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a14      	ldr	r2, [pc, #80]	; (8006478 <TIM_OC5_SetConfig+0xd0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d109      	bne.n	800643e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006430:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	021b      	lsls	r3, r3, #8
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	621a      	str	r2, [r3, #32]
}
 8006458:	bf00      	nop
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40013400 	.word	0x40013400
 800646c:	40014000 	.word	0x40014000
 8006470:	40014400 	.word	0x40014400
 8006474:	40014800 	.word	0x40014800
 8006478:	40015000 	.word	0x40015000

0800647c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	021b      	lsls	r3, r3, #8
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	051b      	lsls	r3, r3, #20
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a1a      	ldr	r2, [pc, #104]	; (800653c <TIM_OC6_SetConfig+0xc0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <TIM_OC6_SetConfig+0x84>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a19      	ldr	r2, [pc, #100]	; (8006540 <TIM_OC6_SetConfig+0xc4>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00f      	beq.n	8006500 <TIM_OC6_SetConfig+0x84>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a18      	ldr	r2, [pc, #96]	; (8006544 <TIM_OC6_SetConfig+0xc8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00b      	beq.n	8006500 <TIM_OC6_SetConfig+0x84>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a17      	ldr	r2, [pc, #92]	; (8006548 <TIM_OC6_SetConfig+0xcc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d007      	beq.n	8006500 <TIM_OC6_SetConfig+0x84>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a16      	ldr	r2, [pc, #88]	; (800654c <TIM_OC6_SetConfig+0xd0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_OC6_SetConfig+0x84>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a15      	ldr	r2, [pc, #84]	; (8006550 <TIM_OC6_SetConfig+0xd4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d109      	bne.n	8006514 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006506:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	029b      	lsls	r3, r3, #10
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	40012c00 	.word	0x40012c00
 8006540:	40013400 	.word	0x40013400
 8006544:	40014000 	.word	0x40014000
 8006548:	40014400 	.word	0x40014400
 800654c:	40014800 	.word	0x40014800
 8006550:	40015000 	.word	0x40015000

08006554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0201 	bic.w	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800657e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f023 030a 	bic.w	r3, r3, #10
 8006590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	621a      	str	r2, [r3, #32]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b087      	sub	sp, #28
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	f023 0210 	bic.w	r2, r3, #16
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	031b      	lsls	r3, r3, #12
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	621a      	str	r2, [r3, #32]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006612:	b480      	push	{r7}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	f043 0307 	orr.w	r3, r3, #7
 8006638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	609a      	str	r2, [r3, #8]
}
 8006640:	bf00      	nop
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	021a      	lsls	r2, r3, #8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	431a      	orrs	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4313      	orrs	r3, r2
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	609a      	str	r2, [r3, #8]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	2201      	movs	r2, #1
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1a      	ldr	r2, [r3, #32]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	43db      	mvns	r3, r3
 80066ae:	401a      	ands	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1a      	ldr	r2, [r3, #32]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f003 031f 	and.w	r3, r3, #31
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	fa01 f303 	lsl.w	r3, r1, r3
 80066c4:	431a      	orrs	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	621a      	str	r2, [r3, #32]
}
 80066ca:	bf00      	nop
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
	...

080066d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e06f      	b.n	80067d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a31      	ldr	r2, [pc, #196]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d009      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a30      	ldr	r2, [pc, #192]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a2e      	ldr	r2, [pc, #184]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d108      	bne.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006734:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1e      	ldr	r2, [pc, #120]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d01d      	beq.n	80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006770:	d018      	beq.n	80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d013      	beq.n	80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1a      	ldr	r2, [pc, #104]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00e      	beq.n	80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d009      	beq.n	80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a16      	ldr	r2, [pc, #88]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d004      	beq.n	80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a11      	ldr	r2, [pc, #68]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d10c      	bne.n	80067be <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	40012c00 	.word	0x40012c00
 80067e0:	40013400 	.word	0x40013400
 80067e4:	40015000 	.word	0x40015000
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40014000 	.word	0x40014000

080067f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800680c:	2302      	movs	r3, #2
 800680e:	e096      	b.n	800693e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	041b      	lsls	r3, r3, #16
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a2f      	ldr	r2, [pc, #188]	; (800694c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d009      	beq.n	80068a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a2d      	ldr	r2, [pc, #180]	; (8006950 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d004      	beq.n	80068a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a2c      	ldr	r2, [pc, #176]	; (8006954 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d106      	bne.n	80068b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a24      	ldr	r2, [pc, #144]	; (800694c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d009      	beq.n	80068d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a22      	ldr	r2, [pc, #136]	; (8006950 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d004      	beq.n	80068d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a21      	ldr	r2, [pc, #132]	; (8006954 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d12b      	bne.n	800692c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068de:	051b      	lsls	r3, r3, #20
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a11      	ldr	r2, [pc, #68]	; (800694c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d009      	beq.n	800691e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a10      	ldr	r2, [pc, #64]	; (8006950 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d004      	beq.n	800691e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a0e      	ldr	r2, [pc, #56]	; (8006954 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d106      	bne.n	800692c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40013400 	.word	0x40013400
 8006954:	40015000 	.word	0x40015000

08006958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e042      	b.n	8006a7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d106      	bne.n	8006a0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7fb fa6b 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2224      	movs	r2, #36	; 0x24
 8006a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8c2 	bl	8006bb0 <UART_SetConfig>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d101      	bne.n	8006a36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e022      	b.n	8006a7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fb80 	bl	8007144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fc07 	bl	8007288 <UART_CheckIdleState>
 8006a7a:	4603      	mov	r3, r0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	4613      	mov	r3, r2
 8006a92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	f040 8083 	bne.w	8006ba6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <HAL_UART_Transmit+0x28>
 8006aa6:	88fb      	ldrh	r3, [r7, #6]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e07b      	b.n	8006ba8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_UART_Transmit+0x3a>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e074      	b.n	8006ba8 <HAL_UART_Transmit+0x124>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2221      	movs	r2, #33	; 0x21
 8006ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ad6:	f7fb fb07 	bl	80020e8 <HAL_GetTick>
 8006ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	88fa      	ldrh	r2, [r7, #6]
 8006ae0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	88fa      	ldrh	r2, [r7, #6]
 8006ae8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af4:	d108      	bne.n	8006b08 <HAL_UART_Transmit+0x84>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d104      	bne.n	8006b08 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	e003      	b.n	8006b10 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006b18:	e02c      	b.n	8006b74 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2200      	movs	r2, #0
 8006b22:	2180      	movs	r1, #128	; 0x80
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 fbfa 	bl	800731e <UART_WaitOnFlagUntilTimeout>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e039      	b.n	8006ba8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	e007      	b.n	8006b62 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1cc      	bne.n	8006b1a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	2200      	movs	r2, #0
 8006b88:	2140      	movs	r1, #64	; 0x40
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fbc7 	bl	800731e <UART_WaitOnFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e006      	b.n	8006ba8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e000      	b.n	8006ba8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006ba6:	2302      	movs	r3, #2
  }
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3720      	adds	r7, #32
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb0:	b5b0      	push	{r4, r5, r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4bb1      	ldr	r3, [pc, #708]	; (8006ea0 <UART_SetConfig+0x2f0>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	69f9      	ldr	r1, [r7, #28]
 8006be4:	430b      	orrs	r3, r1
 8006be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4aa6      	ldr	r2, [pc, #664]	; (8006ea4 <UART_SetConfig+0x2f4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d004      	beq.n	8006c18 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6812      	ldr	r2, [r2, #0]
 8006c2a:	69f9      	ldr	r1, [r7, #28]
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	f023 010f 	bic.w	r1, r3, #15
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a97      	ldr	r2, [pc, #604]	; (8006ea8 <UART_SetConfig+0x2f8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d120      	bne.n	8006c92 <UART_SetConfig+0xe2>
 8006c50:	4b96      	ldr	r3, [pc, #600]	; (8006eac <UART_SetConfig+0x2fc>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d816      	bhi.n	8006c8c <UART_SetConfig+0xdc>
 8006c5e:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <UART_SetConfig+0xb4>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006c75 	.word	0x08006c75
 8006c68:	08006c81 	.word	0x08006c81
 8006c6c:	08006c7b 	.word	0x08006c7b
 8006c70:	08006c87 	.word	0x08006c87
 8006c74:	2301      	movs	r3, #1
 8006c76:	76fb      	strb	r3, [r7, #27]
 8006c78:	e0e7      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	76fb      	strb	r3, [r7, #27]
 8006c7e:	e0e4      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006c80:	2304      	movs	r3, #4
 8006c82:	76fb      	strb	r3, [r7, #27]
 8006c84:	e0e1      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006c86:	2308      	movs	r3, #8
 8006c88:	76fb      	strb	r3, [r7, #27]
 8006c8a:	e0de      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006c8c:	2310      	movs	r3, #16
 8006c8e:	76fb      	strb	r3, [r7, #27]
 8006c90:	e0db      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a86      	ldr	r2, [pc, #536]	; (8006eb0 <UART_SetConfig+0x300>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d132      	bne.n	8006d02 <UART_SetConfig+0x152>
 8006c9c:	4b83      	ldr	r3, [pc, #524]	; (8006eac <UART_SetConfig+0x2fc>)
 8006c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca2:	f003 030c 	and.w	r3, r3, #12
 8006ca6:	2b0c      	cmp	r3, #12
 8006ca8:	d828      	bhi.n	8006cfc <UART_SetConfig+0x14c>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <UART_SetConfig+0x100>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006ce5 	.word	0x08006ce5
 8006cb4:	08006cfd 	.word	0x08006cfd
 8006cb8:	08006cfd 	.word	0x08006cfd
 8006cbc:	08006cfd 	.word	0x08006cfd
 8006cc0:	08006cf1 	.word	0x08006cf1
 8006cc4:	08006cfd 	.word	0x08006cfd
 8006cc8:	08006cfd 	.word	0x08006cfd
 8006ccc:	08006cfd 	.word	0x08006cfd
 8006cd0:	08006ceb 	.word	0x08006ceb
 8006cd4:	08006cfd 	.word	0x08006cfd
 8006cd8:	08006cfd 	.word	0x08006cfd
 8006cdc:	08006cfd 	.word	0x08006cfd
 8006ce0:	08006cf7 	.word	0x08006cf7
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	76fb      	strb	r3, [r7, #27]
 8006ce8:	e0af      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006cea:	2302      	movs	r3, #2
 8006cec:	76fb      	strb	r3, [r7, #27]
 8006cee:	e0ac      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	76fb      	strb	r3, [r7, #27]
 8006cf4:	e0a9      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	76fb      	strb	r3, [r7, #27]
 8006cfa:	e0a6      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	76fb      	strb	r3, [r7, #27]
 8006d00:	e0a3      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a6b      	ldr	r2, [pc, #428]	; (8006eb4 <UART_SetConfig+0x304>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d120      	bne.n	8006d4e <UART_SetConfig+0x19e>
 8006d0c:	4b67      	ldr	r3, [pc, #412]	; (8006eac <UART_SetConfig+0x2fc>)
 8006d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	d013      	beq.n	8006d42 <UART_SetConfig+0x192>
 8006d1a:	2b30      	cmp	r3, #48	; 0x30
 8006d1c:	d814      	bhi.n	8006d48 <UART_SetConfig+0x198>
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d009      	beq.n	8006d36 <UART_SetConfig+0x186>
 8006d22:	2b20      	cmp	r3, #32
 8006d24:	d810      	bhi.n	8006d48 <UART_SetConfig+0x198>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <UART_SetConfig+0x180>
 8006d2a:	2b10      	cmp	r3, #16
 8006d2c:	d006      	beq.n	8006d3c <UART_SetConfig+0x18c>
 8006d2e:	e00b      	b.n	8006d48 <UART_SetConfig+0x198>
 8006d30:	2300      	movs	r3, #0
 8006d32:	76fb      	strb	r3, [r7, #27]
 8006d34:	e089      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006d36:	2302      	movs	r3, #2
 8006d38:	76fb      	strb	r3, [r7, #27]
 8006d3a:	e086      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	76fb      	strb	r3, [r7, #27]
 8006d40:	e083      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006d42:	2308      	movs	r3, #8
 8006d44:	76fb      	strb	r3, [r7, #27]
 8006d46:	e080      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	76fb      	strb	r3, [r7, #27]
 8006d4c:	e07d      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a59      	ldr	r2, [pc, #356]	; (8006eb8 <UART_SetConfig+0x308>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d120      	bne.n	8006d9a <UART_SetConfig+0x1ea>
 8006d58:	4b54      	ldr	r3, [pc, #336]	; (8006eac <UART_SetConfig+0x2fc>)
 8006d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d62:	2bc0      	cmp	r3, #192	; 0xc0
 8006d64:	d013      	beq.n	8006d8e <UART_SetConfig+0x1de>
 8006d66:	2bc0      	cmp	r3, #192	; 0xc0
 8006d68:	d814      	bhi.n	8006d94 <UART_SetConfig+0x1e4>
 8006d6a:	2b80      	cmp	r3, #128	; 0x80
 8006d6c:	d009      	beq.n	8006d82 <UART_SetConfig+0x1d2>
 8006d6e:	2b80      	cmp	r3, #128	; 0x80
 8006d70:	d810      	bhi.n	8006d94 <UART_SetConfig+0x1e4>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <UART_SetConfig+0x1cc>
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	d006      	beq.n	8006d88 <UART_SetConfig+0x1d8>
 8006d7a:	e00b      	b.n	8006d94 <UART_SetConfig+0x1e4>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	76fb      	strb	r3, [r7, #27]
 8006d80:	e063      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006d82:	2302      	movs	r3, #2
 8006d84:	76fb      	strb	r3, [r7, #27]
 8006d86:	e060      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	76fb      	strb	r3, [r7, #27]
 8006d8c:	e05d      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006d8e:	2308      	movs	r3, #8
 8006d90:	76fb      	strb	r3, [r7, #27]
 8006d92:	e05a      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006d94:	2310      	movs	r3, #16
 8006d96:	76fb      	strb	r3, [r7, #27]
 8006d98:	e057      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a47      	ldr	r2, [pc, #284]	; (8006ebc <UART_SetConfig+0x30c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d125      	bne.n	8006df0 <UART_SetConfig+0x240>
 8006da4:	4b41      	ldr	r3, [pc, #260]	; (8006eac <UART_SetConfig+0x2fc>)
 8006da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db2:	d017      	beq.n	8006de4 <UART_SetConfig+0x234>
 8006db4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db8:	d817      	bhi.n	8006dea <UART_SetConfig+0x23a>
 8006dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dbe:	d00b      	beq.n	8006dd8 <UART_SetConfig+0x228>
 8006dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc4:	d811      	bhi.n	8006dea <UART_SetConfig+0x23a>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <UART_SetConfig+0x222>
 8006dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dce:	d006      	beq.n	8006dde <UART_SetConfig+0x22e>
 8006dd0:	e00b      	b.n	8006dea <UART_SetConfig+0x23a>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	76fb      	strb	r3, [r7, #27]
 8006dd6:	e038      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	76fb      	strb	r3, [r7, #27]
 8006ddc:	e035      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006dde:	2304      	movs	r3, #4
 8006de0:	76fb      	strb	r3, [r7, #27]
 8006de2:	e032      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006de4:	2308      	movs	r3, #8
 8006de6:	76fb      	strb	r3, [r7, #27]
 8006de8:	e02f      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006dea:	2310      	movs	r3, #16
 8006dec:	76fb      	strb	r3, [r7, #27]
 8006dee:	e02c      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a2b      	ldr	r2, [pc, #172]	; (8006ea4 <UART_SetConfig+0x2f4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d125      	bne.n	8006e46 <UART_SetConfig+0x296>
 8006dfa:	4b2c      	ldr	r3, [pc, #176]	; (8006eac <UART_SetConfig+0x2fc>)
 8006dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e08:	d017      	beq.n	8006e3a <UART_SetConfig+0x28a>
 8006e0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e0e:	d817      	bhi.n	8006e40 <UART_SetConfig+0x290>
 8006e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e14:	d00b      	beq.n	8006e2e <UART_SetConfig+0x27e>
 8006e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e1a:	d811      	bhi.n	8006e40 <UART_SetConfig+0x290>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <UART_SetConfig+0x278>
 8006e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e24:	d006      	beq.n	8006e34 <UART_SetConfig+0x284>
 8006e26:	e00b      	b.n	8006e40 <UART_SetConfig+0x290>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	76fb      	strb	r3, [r7, #27]
 8006e2c:	e00d      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	76fb      	strb	r3, [r7, #27]
 8006e32:	e00a      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006e34:	2304      	movs	r3, #4
 8006e36:	76fb      	strb	r3, [r7, #27]
 8006e38:	e007      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006e3a:	2308      	movs	r3, #8
 8006e3c:	76fb      	strb	r3, [r7, #27]
 8006e3e:	e004      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006e40:	2310      	movs	r3, #16
 8006e42:	76fb      	strb	r3, [r7, #27]
 8006e44:	e001      	b.n	8006e4a <UART_SetConfig+0x29a>
 8006e46:	2310      	movs	r3, #16
 8006e48:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <UART_SetConfig+0x2f4>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	f040 809f 	bne.w	8006f94 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e56:	7efb      	ldrb	r3, [r7, #27]
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d837      	bhi.n	8006ecc <UART_SetConfig+0x31c>
 8006e5c:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <UART_SetConfig+0x2b4>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006e89 	.word	0x08006e89
 8006e68:	08006ecd 	.word	0x08006ecd
 8006e6c:	08006e91 	.word	0x08006e91
 8006e70:	08006ecd 	.word	0x08006ecd
 8006e74:	08006e97 	.word	0x08006e97
 8006e78:	08006ecd 	.word	0x08006ecd
 8006e7c:	08006ecd 	.word	0x08006ecd
 8006e80:	08006ecd 	.word	0x08006ecd
 8006e84:	08006ec5 	.word	0x08006ec5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e88:	f7fd fbf2 	bl	8004670 <HAL_RCC_GetPCLK1Freq>
 8006e8c:	6178      	str	r0, [r7, #20]
        break;
 8006e8e:	e022      	b.n	8006ed6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e90:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <UART_SetConfig+0x310>)
 8006e92:	617b      	str	r3, [r7, #20]
        break;
 8006e94:	e01f      	b.n	8006ed6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e96:	f7fd fb7d 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8006e9a:	6178      	str	r0, [r7, #20]
        break;
 8006e9c:	e01b      	b.n	8006ed6 <UART_SetConfig+0x326>
 8006e9e:	bf00      	nop
 8006ea0:	cfff69f3 	.word	0xcfff69f3
 8006ea4:	40008000 	.word	0x40008000
 8006ea8:	40013800 	.word	0x40013800
 8006eac:	40021000 	.word	0x40021000
 8006eb0:	40004400 	.word	0x40004400
 8006eb4:	40004800 	.word	0x40004800
 8006eb8:	40004c00 	.word	0x40004c00
 8006ebc:	40005000 	.word	0x40005000
 8006ec0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec8:	617b      	str	r3, [r7, #20]
        break;
 8006eca:	e004      	b.n	8006ed6 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	76bb      	strb	r3, [r7, #26]
        break;
 8006ed4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 811b 	beq.w	8007114 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	4a96      	ldr	r2, [pc, #600]	; (800713c <UART_SetConfig+0x58c>)
 8006ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ef0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	4413      	add	r3, r2
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d305      	bcc.n	8006f0e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d902      	bls.n	8006f14 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	76bb      	strb	r3, [r7, #26]
 8006f12:	e0ff      	b.n	8007114 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f04f 0100 	mov.w	r1, #0
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	4a86      	ldr	r2, [pc, #536]	; (800713c <UART_SetConfig+0x58c>)
 8006f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	f7f9 fcce 	bl	80008cc <__aeabi_uldivmod>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4610      	mov	r0, r2
 8006f36:	4619      	mov	r1, r3
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	020b      	lsls	r3, r1, #8
 8006f42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f46:	0202      	lsls	r2, r0, #8
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	6849      	ldr	r1, [r1, #4]
 8006f4c:	0849      	lsrs	r1, r1, #1
 8006f4e:	4608      	mov	r0, r1
 8006f50:	f04f 0100 	mov.w	r1, #0
 8006f54:	1814      	adds	r4, r2, r0
 8006f56:	eb43 0501 	adc.w	r5, r3, r1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	4620      	mov	r0, r4
 8006f66:	4629      	mov	r1, r5
 8006f68:	f7f9 fcb0 	bl	80008cc <__aeabi_uldivmod>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4613      	mov	r3, r2
 8006f72:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f7a:	d308      	bcc.n	8006f8e <UART_SetConfig+0x3de>
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f82:	d204      	bcs.n	8006f8e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	60da      	str	r2, [r3, #12]
 8006f8c:	e0c2      	b.n	8007114 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	76bb      	strb	r3, [r7, #26]
 8006f92:	e0bf      	b.n	8007114 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f9c:	d165      	bne.n	800706a <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8006f9e:	7efb      	ldrb	r3, [r7, #27]
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d828      	bhi.n	8006ff6 <UART_SetConfig+0x446>
 8006fa4:	a201      	add	r2, pc, #4	; (adr r2, 8006fac <UART_SetConfig+0x3fc>)
 8006fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006faa:	bf00      	nop
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006fd9 	.word	0x08006fd9
 8006fb4:	08006fe1 	.word	0x08006fe1
 8006fb8:	08006ff7 	.word	0x08006ff7
 8006fbc:	08006fe7 	.word	0x08006fe7
 8006fc0:	08006ff7 	.word	0x08006ff7
 8006fc4:	08006ff7 	.word	0x08006ff7
 8006fc8:	08006ff7 	.word	0x08006ff7
 8006fcc:	08006fef 	.word	0x08006fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd0:	f7fd fb4e 	bl	8004670 <HAL_RCC_GetPCLK1Freq>
 8006fd4:	6178      	str	r0, [r7, #20]
        break;
 8006fd6:	e013      	b.n	8007000 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd8:	f7fd fb60 	bl	800469c <HAL_RCC_GetPCLK2Freq>
 8006fdc:	6178      	str	r0, [r7, #20]
        break;
 8006fde:	e00f      	b.n	8007000 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fe0:	4b57      	ldr	r3, [pc, #348]	; (8007140 <UART_SetConfig+0x590>)
 8006fe2:	617b      	str	r3, [r7, #20]
        break;
 8006fe4:	e00c      	b.n	8007000 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fe6:	f7fd fad5 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8006fea:	6178      	str	r0, [r7, #20]
        break;
 8006fec:	e008      	b.n	8007000 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ff2:	617b      	str	r3, [r7, #20]
        break;
 8006ff4:	e004      	b.n	8007000 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	76bb      	strb	r3, [r7, #26]
        break;
 8006ffe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 8086 	beq.w	8007114 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	4a4b      	ldr	r2, [pc, #300]	; (800713c <UART_SetConfig+0x58c>)
 800700e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007012:	461a      	mov	r2, r3
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	fbb3 f3f2 	udiv	r3, r3, r2
 800701a:	005a      	lsls	r2, r3, #1
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	085b      	lsrs	r3, r3, #1
 8007022:	441a      	add	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	fbb2 f3f3 	udiv	r3, r2, r3
 800702c:	b29b      	uxth	r3, r3
 800702e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	2b0f      	cmp	r3, #15
 8007034:	d916      	bls.n	8007064 <UART_SetConfig+0x4b4>
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800703c:	d212      	bcs.n	8007064 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f023 030f 	bic.w	r3, r3, #15
 8007046:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	085b      	lsrs	r3, r3, #1
 800704c:	b29b      	uxth	r3, r3
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	b29a      	uxth	r2, r3
 8007054:	89fb      	ldrh	r3, [r7, #14]
 8007056:	4313      	orrs	r3, r2
 8007058:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	89fa      	ldrh	r2, [r7, #14]
 8007060:	60da      	str	r2, [r3, #12]
 8007062:	e057      	b.n	8007114 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	76bb      	strb	r3, [r7, #26]
 8007068:	e054      	b.n	8007114 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800706a:	7efb      	ldrb	r3, [r7, #27]
 800706c:	2b08      	cmp	r3, #8
 800706e:	d828      	bhi.n	80070c2 <UART_SetConfig+0x512>
 8007070:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <UART_SetConfig+0x4c8>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	0800709d 	.word	0x0800709d
 800707c:	080070a5 	.word	0x080070a5
 8007080:	080070ad 	.word	0x080070ad
 8007084:	080070c3 	.word	0x080070c3
 8007088:	080070b3 	.word	0x080070b3
 800708c:	080070c3 	.word	0x080070c3
 8007090:	080070c3 	.word	0x080070c3
 8007094:	080070c3 	.word	0x080070c3
 8007098:	080070bb 	.word	0x080070bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800709c:	f7fd fae8 	bl	8004670 <HAL_RCC_GetPCLK1Freq>
 80070a0:	6178      	str	r0, [r7, #20]
        break;
 80070a2:	e013      	b.n	80070cc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070a4:	f7fd fafa 	bl	800469c <HAL_RCC_GetPCLK2Freq>
 80070a8:	6178      	str	r0, [r7, #20]
        break;
 80070aa:	e00f      	b.n	80070cc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070ac:	4b24      	ldr	r3, [pc, #144]	; (8007140 <UART_SetConfig+0x590>)
 80070ae:	617b      	str	r3, [r7, #20]
        break;
 80070b0:	e00c      	b.n	80070cc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070b2:	f7fd fa6f 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 80070b6:	6178      	str	r0, [r7, #20]
        break;
 80070b8:	e008      	b.n	80070cc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070be:	617b      	str	r3, [r7, #20]
        break;
 80070c0:	e004      	b.n	80070cc <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	76bb      	strb	r3, [r7, #26]
        break;
 80070ca:	bf00      	nop
    }

    if (pclk != 0U)
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d020      	beq.n	8007114 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	4a19      	ldr	r2, [pc, #100]	; (800713c <UART_SetConfig+0x58c>)
 80070d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070dc:	461a      	mov	r2, r3
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	085b      	lsrs	r3, r3, #1
 80070ea:	441a      	add	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2b0f      	cmp	r3, #15
 80070fc:	d908      	bls.n	8007110 <UART_SetConfig+0x560>
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007104:	d204      	bcs.n	8007110 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	e001      	b.n	8007114 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007130:	7ebb      	ldrb	r3, [r7, #26]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3720      	adds	r7, #32
 8007136:	46bd      	mov	sp, r7
 8007138:	bdb0      	pop	{r4, r5, r7, pc}
 800713a:	bf00      	nop
 800713c:	08007f1c 	.word	0x08007f1c
 8007140:	00f42400 	.word	0x00f42400

08007144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00a      	beq.n	800716e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00a      	beq.n	80071b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00a      	beq.n	80071f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00a      	beq.n	8007218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01a      	beq.n	800725a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007242:	d10a      	bne.n	800725a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	605a      	str	r2, [r3, #4]
  }
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af02      	add	r7, sp, #8
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007298:	f7fa ff26 	bl	80020e8 <HAL_GetTick>
 800729c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d10e      	bne.n	80072ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f82f 	bl	800731e <UART_WaitOnFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e025      	b.n	8007316 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d10e      	bne.n	80072f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f819 	bl	800731e <UART_WaitOnFlagUntilTimeout>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e00f      	b.n	8007316 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	603b      	str	r3, [r7, #0]
 800732a:	4613      	mov	r3, r2
 800732c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800732e:	e062      	b.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d05e      	beq.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007338:	f7fa fed6 	bl	80020e8 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	429a      	cmp	r2, r3
 8007346:	d302      	bcc.n	800734e <UART_WaitOnFlagUntilTimeout+0x30>
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d11d      	bne.n	800738a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800735c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0201 	bic.w	r2, r2, #1
 800736c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2220      	movs	r2, #32
 8007372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2220      	movs	r2, #32
 800737a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e045      	b.n	8007416 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b00      	cmp	r3, #0
 8007396:	d02e      	beq.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073a6:	d126      	bne.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0201 	bic.w	r2, r2, #1
 80073d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2220      	movs	r2, #32
 80073de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e00f      	b.n	8007416 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4013      	ands	r3, r2
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	429a      	cmp	r2, r3
 8007404:	bf0c      	ite	eq
 8007406:	2301      	moveq	r3, #1
 8007408:	2300      	movne	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	461a      	mov	r2, r3
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	429a      	cmp	r2, r3
 8007412:	d08d      	beq.n	8007330 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800741e:	b480      	push	{r7}
 8007420:	b085      	sub	sp, #20
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_UARTEx_DisableFifoMode+0x16>
 8007430:	2302      	movs	r3, #2
 8007432:	e027      	b.n	8007484 <HAL_UARTEx_DisableFifoMode+0x66>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2224      	movs	r2, #36	; 0x24
 8007440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0201 	bic.w	r2, r2, #1
 800745a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007462:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e02d      	b.n	8007504 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2224      	movs	r2, #36	; 0x24
 80074b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0201 	bic.w	r2, r2, #1
 80074ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f84f 	bl	8007588 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007520:	2302      	movs	r3, #2
 8007522:	e02d      	b.n	8007580 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2224      	movs	r2, #36	; 0x24
 8007530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0201 	bic.w	r2, r2, #1
 800754a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f811 	bl	8007588 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2220      	movs	r2, #32
 8007572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007594:	2b00      	cmp	r3, #0
 8007596:	d108      	bne.n	80075aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075a8:	e031      	b.n	800760e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075aa:	2308      	movs	r3, #8
 80075ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075ae:	2308      	movs	r3, #8
 80075b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	0e5b      	lsrs	r3, r3, #25
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	f003 0307 	and.w	r3, r3, #7
 80075c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	0f5b      	lsrs	r3, r3, #29
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	f003 0307 	and.w	r3, r3, #7
 80075d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	7b3a      	ldrb	r2, [r7, #12]
 80075d6:	4911      	ldr	r1, [pc, #68]	; (800761c <UARTEx_SetNbDataToProcess+0x94>)
 80075d8:	5c8a      	ldrb	r2, [r1, r2]
 80075da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075de:	7b3a      	ldrb	r2, [r7, #12]
 80075e0:	490f      	ldr	r1, [pc, #60]	; (8007620 <UARTEx_SetNbDataToProcess+0x98>)
 80075e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	7b7a      	ldrb	r2, [r7, #13]
 80075f4:	4909      	ldr	r1, [pc, #36]	; (800761c <UARTEx_SetNbDataToProcess+0x94>)
 80075f6:	5c8a      	ldrb	r2, [r1, r2]
 80075f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075fc:	7b7a      	ldrb	r2, [r7, #13]
 80075fe:	4908      	ldr	r1, [pc, #32]	; (8007620 <UARTEx_SetNbDataToProcess+0x98>)
 8007600:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007602:	fb93 f3f2 	sdiv	r3, r3, r2
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800760e:	bf00      	nop
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	08007f34 	.word	0x08007f34
 8007620:	08007f3c 	.word	0x08007f3c

08007624 <__errno>:
 8007624:	4b01      	ldr	r3, [pc, #4]	; (800762c <__errno+0x8>)
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	20000010 	.word	0x20000010

08007630 <__libc_init_array>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	4d0d      	ldr	r5, [pc, #52]	; (8007668 <__libc_init_array+0x38>)
 8007634:	4c0d      	ldr	r4, [pc, #52]	; (800766c <__libc_init_array+0x3c>)
 8007636:	1b64      	subs	r4, r4, r5
 8007638:	10a4      	asrs	r4, r4, #2
 800763a:	2600      	movs	r6, #0
 800763c:	42a6      	cmp	r6, r4
 800763e:	d109      	bne.n	8007654 <__libc_init_array+0x24>
 8007640:	4d0b      	ldr	r5, [pc, #44]	; (8007670 <__libc_init_array+0x40>)
 8007642:	4c0c      	ldr	r4, [pc, #48]	; (8007674 <__libc_init_array+0x44>)
 8007644:	f000 fc4e 	bl	8007ee4 <_init>
 8007648:	1b64      	subs	r4, r4, r5
 800764a:	10a4      	asrs	r4, r4, #2
 800764c:	2600      	movs	r6, #0
 800764e:	42a6      	cmp	r6, r4
 8007650:	d105      	bne.n	800765e <__libc_init_array+0x2e>
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	f855 3b04 	ldr.w	r3, [r5], #4
 8007658:	4798      	blx	r3
 800765a:	3601      	adds	r6, #1
 800765c:	e7ee      	b.n	800763c <__libc_init_array+0xc>
 800765e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007662:	4798      	blx	r3
 8007664:	3601      	adds	r6, #1
 8007666:	e7f2      	b.n	800764e <__libc_init_array+0x1e>
 8007668:	08007f80 	.word	0x08007f80
 800766c:	08007f80 	.word	0x08007f80
 8007670:	08007f80 	.word	0x08007f80
 8007674:	08007f84 	.word	0x08007f84

08007678 <memset>:
 8007678:	4402      	add	r2, r0
 800767a:	4603      	mov	r3, r0
 800767c:	4293      	cmp	r3, r2
 800767e:	d100      	bne.n	8007682 <memset+0xa>
 8007680:	4770      	bx	lr
 8007682:	f803 1b01 	strb.w	r1, [r3], #1
 8007686:	e7f9      	b.n	800767c <memset+0x4>

08007688 <siprintf>:
 8007688:	b40e      	push	{r1, r2, r3}
 800768a:	b500      	push	{lr}
 800768c:	b09c      	sub	sp, #112	; 0x70
 800768e:	ab1d      	add	r3, sp, #116	; 0x74
 8007690:	9002      	str	r0, [sp, #8]
 8007692:	9006      	str	r0, [sp, #24]
 8007694:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007698:	4809      	ldr	r0, [pc, #36]	; (80076c0 <siprintf+0x38>)
 800769a:	9107      	str	r1, [sp, #28]
 800769c:	9104      	str	r1, [sp, #16]
 800769e:	4909      	ldr	r1, [pc, #36]	; (80076c4 <siprintf+0x3c>)
 80076a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076a4:	9105      	str	r1, [sp, #20]
 80076a6:	6800      	ldr	r0, [r0, #0]
 80076a8:	9301      	str	r3, [sp, #4]
 80076aa:	a902      	add	r1, sp, #8
 80076ac:	f000 f868 	bl	8007780 <_svfiprintf_r>
 80076b0:	9b02      	ldr	r3, [sp, #8]
 80076b2:	2200      	movs	r2, #0
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	b01c      	add	sp, #112	; 0x70
 80076b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076bc:	b003      	add	sp, #12
 80076be:	4770      	bx	lr
 80076c0:	20000010 	.word	0x20000010
 80076c4:	ffff0208 	.word	0xffff0208

080076c8 <__ssputs_r>:
 80076c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076cc:	688e      	ldr	r6, [r1, #8]
 80076ce:	429e      	cmp	r6, r3
 80076d0:	4682      	mov	sl, r0
 80076d2:	460c      	mov	r4, r1
 80076d4:	4690      	mov	r8, r2
 80076d6:	461f      	mov	r7, r3
 80076d8:	d838      	bhi.n	800774c <__ssputs_r+0x84>
 80076da:	898a      	ldrh	r2, [r1, #12]
 80076dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076e0:	d032      	beq.n	8007748 <__ssputs_r+0x80>
 80076e2:	6825      	ldr	r5, [r4, #0]
 80076e4:	6909      	ldr	r1, [r1, #16]
 80076e6:	eba5 0901 	sub.w	r9, r5, r1
 80076ea:	6965      	ldr	r5, [r4, #20]
 80076ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076f4:	3301      	adds	r3, #1
 80076f6:	444b      	add	r3, r9
 80076f8:	106d      	asrs	r5, r5, #1
 80076fa:	429d      	cmp	r5, r3
 80076fc:	bf38      	it	cc
 80076fe:	461d      	movcc	r5, r3
 8007700:	0553      	lsls	r3, r2, #21
 8007702:	d531      	bpl.n	8007768 <__ssputs_r+0xa0>
 8007704:	4629      	mov	r1, r5
 8007706:	f000 fb47 	bl	8007d98 <_malloc_r>
 800770a:	4606      	mov	r6, r0
 800770c:	b950      	cbnz	r0, 8007724 <__ssputs_r+0x5c>
 800770e:	230c      	movs	r3, #12
 8007710:	f8ca 3000 	str.w	r3, [sl]
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800771a:	81a3      	strh	r3, [r4, #12]
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007724:	6921      	ldr	r1, [r4, #16]
 8007726:	464a      	mov	r2, r9
 8007728:	f000 fabe 	bl	8007ca8 <memcpy>
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007736:	81a3      	strh	r3, [r4, #12]
 8007738:	6126      	str	r6, [r4, #16]
 800773a:	6165      	str	r5, [r4, #20]
 800773c:	444e      	add	r6, r9
 800773e:	eba5 0509 	sub.w	r5, r5, r9
 8007742:	6026      	str	r6, [r4, #0]
 8007744:	60a5      	str	r5, [r4, #8]
 8007746:	463e      	mov	r6, r7
 8007748:	42be      	cmp	r6, r7
 800774a:	d900      	bls.n	800774e <__ssputs_r+0x86>
 800774c:	463e      	mov	r6, r7
 800774e:	4632      	mov	r2, r6
 8007750:	6820      	ldr	r0, [r4, #0]
 8007752:	4641      	mov	r1, r8
 8007754:	f000 fab6 	bl	8007cc4 <memmove>
 8007758:	68a3      	ldr	r3, [r4, #8]
 800775a:	6822      	ldr	r2, [r4, #0]
 800775c:	1b9b      	subs	r3, r3, r6
 800775e:	4432      	add	r2, r6
 8007760:	60a3      	str	r3, [r4, #8]
 8007762:	6022      	str	r2, [r4, #0]
 8007764:	2000      	movs	r0, #0
 8007766:	e7db      	b.n	8007720 <__ssputs_r+0x58>
 8007768:	462a      	mov	r2, r5
 800776a:	f000 fb6f 	bl	8007e4c <_realloc_r>
 800776e:	4606      	mov	r6, r0
 8007770:	2800      	cmp	r0, #0
 8007772:	d1e1      	bne.n	8007738 <__ssputs_r+0x70>
 8007774:	6921      	ldr	r1, [r4, #16]
 8007776:	4650      	mov	r0, sl
 8007778:	f000 fabe 	bl	8007cf8 <_free_r>
 800777c:	e7c7      	b.n	800770e <__ssputs_r+0x46>
	...

08007780 <_svfiprintf_r>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	4698      	mov	r8, r3
 8007786:	898b      	ldrh	r3, [r1, #12]
 8007788:	061b      	lsls	r3, r3, #24
 800778a:	b09d      	sub	sp, #116	; 0x74
 800778c:	4607      	mov	r7, r0
 800778e:	460d      	mov	r5, r1
 8007790:	4614      	mov	r4, r2
 8007792:	d50e      	bpl.n	80077b2 <_svfiprintf_r+0x32>
 8007794:	690b      	ldr	r3, [r1, #16]
 8007796:	b963      	cbnz	r3, 80077b2 <_svfiprintf_r+0x32>
 8007798:	2140      	movs	r1, #64	; 0x40
 800779a:	f000 fafd 	bl	8007d98 <_malloc_r>
 800779e:	6028      	str	r0, [r5, #0]
 80077a0:	6128      	str	r0, [r5, #16]
 80077a2:	b920      	cbnz	r0, 80077ae <_svfiprintf_r+0x2e>
 80077a4:	230c      	movs	r3, #12
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ac:	e0d1      	b.n	8007952 <_svfiprintf_r+0x1d2>
 80077ae:	2340      	movs	r3, #64	; 0x40
 80077b0:	616b      	str	r3, [r5, #20]
 80077b2:	2300      	movs	r3, #0
 80077b4:	9309      	str	r3, [sp, #36]	; 0x24
 80077b6:	2320      	movs	r3, #32
 80077b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80077c0:	2330      	movs	r3, #48	; 0x30
 80077c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800796c <_svfiprintf_r+0x1ec>
 80077c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077ca:	f04f 0901 	mov.w	r9, #1
 80077ce:	4623      	mov	r3, r4
 80077d0:	469a      	mov	sl, r3
 80077d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d6:	b10a      	cbz	r2, 80077dc <_svfiprintf_r+0x5c>
 80077d8:	2a25      	cmp	r2, #37	; 0x25
 80077da:	d1f9      	bne.n	80077d0 <_svfiprintf_r+0x50>
 80077dc:	ebba 0b04 	subs.w	fp, sl, r4
 80077e0:	d00b      	beq.n	80077fa <_svfiprintf_r+0x7a>
 80077e2:	465b      	mov	r3, fp
 80077e4:	4622      	mov	r2, r4
 80077e6:	4629      	mov	r1, r5
 80077e8:	4638      	mov	r0, r7
 80077ea:	f7ff ff6d 	bl	80076c8 <__ssputs_r>
 80077ee:	3001      	adds	r0, #1
 80077f0:	f000 80aa 	beq.w	8007948 <_svfiprintf_r+0x1c8>
 80077f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f6:	445a      	add	r2, fp
 80077f8:	9209      	str	r2, [sp, #36]	; 0x24
 80077fa:	f89a 3000 	ldrb.w	r3, [sl]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 80a2 	beq.w	8007948 <_svfiprintf_r+0x1c8>
 8007804:	2300      	movs	r3, #0
 8007806:	f04f 32ff 	mov.w	r2, #4294967295
 800780a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800780e:	f10a 0a01 	add.w	sl, sl, #1
 8007812:	9304      	str	r3, [sp, #16]
 8007814:	9307      	str	r3, [sp, #28]
 8007816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800781a:	931a      	str	r3, [sp, #104]	; 0x68
 800781c:	4654      	mov	r4, sl
 800781e:	2205      	movs	r2, #5
 8007820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007824:	4851      	ldr	r0, [pc, #324]	; (800796c <_svfiprintf_r+0x1ec>)
 8007826:	f7f8 fcfb 	bl	8000220 <memchr>
 800782a:	9a04      	ldr	r2, [sp, #16]
 800782c:	b9d8      	cbnz	r0, 8007866 <_svfiprintf_r+0xe6>
 800782e:	06d0      	lsls	r0, r2, #27
 8007830:	bf44      	itt	mi
 8007832:	2320      	movmi	r3, #32
 8007834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007838:	0711      	lsls	r1, r2, #28
 800783a:	bf44      	itt	mi
 800783c:	232b      	movmi	r3, #43	; 0x2b
 800783e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007842:	f89a 3000 	ldrb.w	r3, [sl]
 8007846:	2b2a      	cmp	r3, #42	; 0x2a
 8007848:	d015      	beq.n	8007876 <_svfiprintf_r+0xf6>
 800784a:	9a07      	ldr	r2, [sp, #28]
 800784c:	4654      	mov	r4, sl
 800784e:	2000      	movs	r0, #0
 8007850:	f04f 0c0a 	mov.w	ip, #10
 8007854:	4621      	mov	r1, r4
 8007856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800785a:	3b30      	subs	r3, #48	; 0x30
 800785c:	2b09      	cmp	r3, #9
 800785e:	d94e      	bls.n	80078fe <_svfiprintf_r+0x17e>
 8007860:	b1b0      	cbz	r0, 8007890 <_svfiprintf_r+0x110>
 8007862:	9207      	str	r2, [sp, #28]
 8007864:	e014      	b.n	8007890 <_svfiprintf_r+0x110>
 8007866:	eba0 0308 	sub.w	r3, r0, r8
 800786a:	fa09 f303 	lsl.w	r3, r9, r3
 800786e:	4313      	orrs	r3, r2
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	46a2      	mov	sl, r4
 8007874:	e7d2      	b.n	800781c <_svfiprintf_r+0x9c>
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	1d19      	adds	r1, r3, #4
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	9103      	str	r1, [sp, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	bfbb      	ittet	lt
 8007882:	425b      	neglt	r3, r3
 8007884:	f042 0202 	orrlt.w	r2, r2, #2
 8007888:	9307      	strge	r3, [sp, #28]
 800788a:	9307      	strlt	r3, [sp, #28]
 800788c:	bfb8      	it	lt
 800788e:	9204      	strlt	r2, [sp, #16]
 8007890:	7823      	ldrb	r3, [r4, #0]
 8007892:	2b2e      	cmp	r3, #46	; 0x2e
 8007894:	d10c      	bne.n	80078b0 <_svfiprintf_r+0x130>
 8007896:	7863      	ldrb	r3, [r4, #1]
 8007898:	2b2a      	cmp	r3, #42	; 0x2a
 800789a:	d135      	bne.n	8007908 <_svfiprintf_r+0x188>
 800789c:	9b03      	ldr	r3, [sp, #12]
 800789e:	1d1a      	adds	r2, r3, #4
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	9203      	str	r2, [sp, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bfb8      	it	lt
 80078a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80078ac:	3402      	adds	r4, #2
 80078ae:	9305      	str	r3, [sp, #20]
 80078b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800797c <_svfiprintf_r+0x1fc>
 80078b4:	7821      	ldrb	r1, [r4, #0]
 80078b6:	2203      	movs	r2, #3
 80078b8:	4650      	mov	r0, sl
 80078ba:	f7f8 fcb1 	bl	8000220 <memchr>
 80078be:	b140      	cbz	r0, 80078d2 <_svfiprintf_r+0x152>
 80078c0:	2340      	movs	r3, #64	; 0x40
 80078c2:	eba0 000a 	sub.w	r0, r0, sl
 80078c6:	fa03 f000 	lsl.w	r0, r3, r0
 80078ca:	9b04      	ldr	r3, [sp, #16]
 80078cc:	4303      	orrs	r3, r0
 80078ce:	3401      	adds	r4, #1
 80078d0:	9304      	str	r3, [sp, #16]
 80078d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d6:	4826      	ldr	r0, [pc, #152]	; (8007970 <_svfiprintf_r+0x1f0>)
 80078d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078dc:	2206      	movs	r2, #6
 80078de:	f7f8 fc9f 	bl	8000220 <memchr>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d038      	beq.n	8007958 <_svfiprintf_r+0x1d8>
 80078e6:	4b23      	ldr	r3, [pc, #140]	; (8007974 <_svfiprintf_r+0x1f4>)
 80078e8:	bb1b      	cbnz	r3, 8007932 <_svfiprintf_r+0x1b2>
 80078ea:	9b03      	ldr	r3, [sp, #12]
 80078ec:	3307      	adds	r3, #7
 80078ee:	f023 0307 	bic.w	r3, r3, #7
 80078f2:	3308      	adds	r3, #8
 80078f4:	9303      	str	r3, [sp, #12]
 80078f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f8:	4433      	add	r3, r6
 80078fa:	9309      	str	r3, [sp, #36]	; 0x24
 80078fc:	e767      	b.n	80077ce <_svfiprintf_r+0x4e>
 80078fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007902:	460c      	mov	r4, r1
 8007904:	2001      	movs	r0, #1
 8007906:	e7a5      	b.n	8007854 <_svfiprintf_r+0xd4>
 8007908:	2300      	movs	r3, #0
 800790a:	3401      	adds	r4, #1
 800790c:	9305      	str	r3, [sp, #20]
 800790e:	4619      	mov	r1, r3
 8007910:	f04f 0c0a 	mov.w	ip, #10
 8007914:	4620      	mov	r0, r4
 8007916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800791a:	3a30      	subs	r2, #48	; 0x30
 800791c:	2a09      	cmp	r2, #9
 800791e:	d903      	bls.n	8007928 <_svfiprintf_r+0x1a8>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0c5      	beq.n	80078b0 <_svfiprintf_r+0x130>
 8007924:	9105      	str	r1, [sp, #20]
 8007926:	e7c3      	b.n	80078b0 <_svfiprintf_r+0x130>
 8007928:	fb0c 2101 	mla	r1, ip, r1, r2
 800792c:	4604      	mov	r4, r0
 800792e:	2301      	movs	r3, #1
 8007930:	e7f0      	b.n	8007914 <_svfiprintf_r+0x194>
 8007932:	ab03      	add	r3, sp, #12
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	462a      	mov	r2, r5
 8007938:	4b0f      	ldr	r3, [pc, #60]	; (8007978 <_svfiprintf_r+0x1f8>)
 800793a:	a904      	add	r1, sp, #16
 800793c:	4638      	mov	r0, r7
 800793e:	f3af 8000 	nop.w
 8007942:	1c42      	adds	r2, r0, #1
 8007944:	4606      	mov	r6, r0
 8007946:	d1d6      	bne.n	80078f6 <_svfiprintf_r+0x176>
 8007948:	89ab      	ldrh	r3, [r5, #12]
 800794a:	065b      	lsls	r3, r3, #25
 800794c:	f53f af2c 	bmi.w	80077a8 <_svfiprintf_r+0x28>
 8007950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007952:	b01d      	add	sp, #116	; 0x74
 8007954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007958:	ab03      	add	r3, sp, #12
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	462a      	mov	r2, r5
 800795e:	4b06      	ldr	r3, [pc, #24]	; (8007978 <_svfiprintf_r+0x1f8>)
 8007960:	a904      	add	r1, sp, #16
 8007962:	4638      	mov	r0, r7
 8007964:	f000 f87a 	bl	8007a5c <_printf_i>
 8007968:	e7eb      	b.n	8007942 <_svfiprintf_r+0x1c2>
 800796a:	bf00      	nop
 800796c:	08007f44 	.word	0x08007f44
 8007970:	08007f4e 	.word	0x08007f4e
 8007974:	00000000 	.word	0x00000000
 8007978:	080076c9 	.word	0x080076c9
 800797c:	08007f4a 	.word	0x08007f4a

08007980 <_printf_common>:
 8007980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007984:	4616      	mov	r6, r2
 8007986:	4699      	mov	r9, r3
 8007988:	688a      	ldr	r2, [r1, #8]
 800798a:	690b      	ldr	r3, [r1, #16]
 800798c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007990:	4293      	cmp	r3, r2
 8007992:	bfb8      	it	lt
 8007994:	4613      	movlt	r3, r2
 8007996:	6033      	str	r3, [r6, #0]
 8007998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800799c:	4607      	mov	r7, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	b10a      	cbz	r2, 80079a6 <_printf_common+0x26>
 80079a2:	3301      	adds	r3, #1
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	0699      	lsls	r1, r3, #26
 80079aa:	bf42      	ittt	mi
 80079ac:	6833      	ldrmi	r3, [r6, #0]
 80079ae:	3302      	addmi	r3, #2
 80079b0:	6033      	strmi	r3, [r6, #0]
 80079b2:	6825      	ldr	r5, [r4, #0]
 80079b4:	f015 0506 	ands.w	r5, r5, #6
 80079b8:	d106      	bne.n	80079c8 <_printf_common+0x48>
 80079ba:	f104 0a19 	add.w	sl, r4, #25
 80079be:	68e3      	ldr	r3, [r4, #12]
 80079c0:	6832      	ldr	r2, [r6, #0]
 80079c2:	1a9b      	subs	r3, r3, r2
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	dc26      	bgt.n	8007a16 <_printf_common+0x96>
 80079c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079cc:	1e13      	subs	r3, r2, #0
 80079ce:	6822      	ldr	r2, [r4, #0]
 80079d0:	bf18      	it	ne
 80079d2:	2301      	movne	r3, #1
 80079d4:	0692      	lsls	r2, r2, #26
 80079d6:	d42b      	bmi.n	8007a30 <_printf_common+0xb0>
 80079d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079dc:	4649      	mov	r1, r9
 80079de:	4638      	mov	r0, r7
 80079e0:	47c0      	blx	r8
 80079e2:	3001      	adds	r0, #1
 80079e4:	d01e      	beq.n	8007a24 <_printf_common+0xa4>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	68e5      	ldr	r5, [r4, #12]
 80079ea:	6832      	ldr	r2, [r6, #0]
 80079ec:	f003 0306 	and.w	r3, r3, #6
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	bf08      	it	eq
 80079f4:	1aad      	subeq	r5, r5, r2
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	6922      	ldr	r2, [r4, #16]
 80079fa:	bf0c      	ite	eq
 80079fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a00:	2500      	movne	r5, #0
 8007a02:	4293      	cmp	r3, r2
 8007a04:	bfc4      	itt	gt
 8007a06:	1a9b      	subgt	r3, r3, r2
 8007a08:	18ed      	addgt	r5, r5, r3
 8007a0a:	2600      	movs	r6, #0
 8007a0c:	341a      	adds	r4, #26
 8007a0e:	42b5      	cmp	r5, r6
 8007a10:	d11a      	bne.n	8007a48 <_printf_common+0xc8>
 8007a12:	2000      	movs	r0, #0
 8007a14:	e008      	b.n	8007a28 <_printf_common+0xa8>
 8007a16:	2301      	movs	r3, #1
 8007a18:	4652      	mov	r2, sl
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	47c0      	blx	r8
 8007a20:	3001      	adds	r0, #1
 8007a22:	d103      	bne.n	8007a2c <_printf_common+0xac>
 8007a24:	f04f 30ff 	mov.w	r0, #4294967295
 8007a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	e7c6      	b.n	80079be <_printf_common+0x3e>
 8007a30:	18e1      	adds	r1, r4, r3
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	2030      	movs	r0, #48	; 0x30
 8007a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a3a:	4422      	add	r2, r4
 8007a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a44:	3302      	adds	r3, #2
 8007a46:	e7c7      	b.n	80079d8 <_printf_common+0x58>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	4622      	mov	r2, r4
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	4638      	mov	r0, r7
 8007a50:	47c0      	blx	r8
 8007a52:	3001      	adds	r0, #1
 8007a54:	d0e6      	beq.n	8007a24 <_printf_common+0xa4>
 8007a56:	3601      	adds	r6, #1
 8007a58:	e7d9      	b.n	8007a0e <_printf_common+0x8e>
	...

08007a5c <_printf_i>:
 8007a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a60:	460c      	mov	r4, r1
 8007a62:	4691      	mov	r9, r2
 8007a64:	7e27      	ldrb	r7, [r4, #24]
 8007a66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a68:	2f78      	cmp	r7, #120	; 0x78
 8007a6a:	4680      	mov	r8, r0
 8007a6c:	469a      	mov	sl, r3
 8007a6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a72:	d807      	bhi.n	8007a84 <_printf_i+0x28>
 8007a74:	2f62      	cmp	r7, #98	; 0x62
 8007a76:	d80a      	bhi.n	8007a8e <_printf_i+0x32>
 8007a78:	2f00      	cmp	r7, #0
 8007a7a:	f000 80d8 	beq.w	8007c2e <_printf_i+0x1d2>
 8007a7e:	2f58      	cmp	r7, #88	; 0x58
 8007a80:	f000 80a3 	beq.w	8007bca <_printf_i+0x16e>
 8007a84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a8c:	e03a      	b.n	8007b04 <_printf_i+0xa8>
 8007a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a92:	2b15      	cmp	r3, #21
 8007a94:	d8f6      	bhi.n	8007a84 <_printf_i+0x28>
 8007a96:	a001      	add	r0, pc, #4	; (adr r0, 8007a9c <_printf_i+0x40>)
 8007a98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a9c:	08007af5 	.word	0x08007af5
 8007aa0:	08007b09 	.word	0x08007b09
 8007aa4:	08007a85 	.word	0x08007a85
 8007aa8:	08007a85 	.word	0x08007a85
 8007aac:	08007a85 	.word	0x08007a85
 8007ab0:	08007a85 	.word	0x08007a85
 8007ab4:	08007b09 	.word	0x08007b09
 8007ab8:	08007a85 	.word	0x08007a85
 8007abc:	08007a85 	.word	0x08007a85
 8007ac0:	08007a85 	.word	0x08007a85
 8007ac4:	08007a85 	.word	0x08007a85
 8007ac8:	08007c15 	.word	0x08007c15
 8007acc:	08007b39 	.word	0x08007b39
 8007ad0:	08007bf7 	.word	0x08007bf7
 8007ad4:	08007a85 	.word	0x08007a85
 8007ad8:	08007a85 	.word	0x08007a85
 8007adc:	08007c37 	.word	0x08007c37
 8007ae0:	08007a85 	.word	0x08007a85
 8007ae4:	08007b39 	.word	0x08007b39
 8007ae8:	08007a85 	.word	0x08007a85
 8007aec:	08007a85 	.word	0x08007a85
 8007af0:	08007bff 	.word	0x08007bff
 8007af4:	680b      	ldr	r3, [r1, #0]
 8007af6:	1d1a      	adds	r2, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	600a      	str	r2, [r1, #0]
 8007afc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b04:	2301      	movs	r3, #1
 8007b06:	e0a3      	b.n	8007c50 <_printf_i+0x1f4>
 8007b08:	6825      	ldr	r5, [r4, #0]
 8007b0a:	6808      	ldr	r0, [r1, #0]
 8007b0c:	062e      	lsls	r6, r5, #24
 8007b0e:	f100 0304 	add.w	r3, r0, #4
 8007b12:	d50a      	bpl.n	8007b2a <_printf_i+0xce>
 8007b14:	6805      	ldr	r5, [r0, #0]
 8007b16:	600b      	str	r3, [r1, #0]
 8007b18:	2d00      	cmp	r5, #0
 8007b1a:	da03      	bge.n	8007b24 <_printf_i+0xc8>
 8007b1c:	232d      	movs	r3, #45	; 0x2d
 8007b1e:	426d      	negs	r5, r5
 8007b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b24:	485e      	ldr	r0, [pc, #376]	; (8007ca0 <_printf_i+0x244>)
 8007b26:	230a      	movs	r3, #10
 8007b28:	e019      	b.n	8007b5e <_printf_i+0x102>
 8007b2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b2e:	6805      	ldr	r5, [r0, #0]
 8007b30:	600b      	str	r3, [r1, #0]
 8007b32:	bf18      	it	ne
 8007b34:	b22d      	sxthne	r5, r5
 8007b36:	e7ef      	b.n	8007b18 <_printf_i+0xbc>
 8007b38:	680b      	ldr	r3, [r1, #0]
 8007b3a:	6825      	ldr	r5, [r4, #0]
 8007b3c:	1d18      	adds	r0, r3, #4
 8007b3e:	6008      	str	r0, [r1, #0]
 8007b40:	0628      	lsls	r0, r5, #24
 8007b42:	d501      	bpl.n	8007b48 <_printf_i+0xec>
 8007b44:	681d      	ldr	r5, [r3, #0]
 8007b46:	e002      	b.n	8007b4e <_printf_i+0xf2>
 8007b48:	0669      	lsls	r1, r5, #25
 8007b4a:	d5fb      	bpl.n	8007b44 <_printf_i+0xe8>
 8007b4c:	881d      	ldrh	r5, [r3, #0]
 8007b4e:	4854      	ldr	r0, [pc, #336]	; (8007ca0 <_printf_i+0x244>)
 8007b50:	2f6f      	cmp	r7, #111	; 0x6f
 8007b52:	bf0c      	ite	eq
 8007b54:	2308      	moveq	r3, #8
 8007b56:	230a      	movne	r3, #10
 8007b58:	2100      	movs	r1, #0
 8007b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b5e:	6866      	ldr	r6, [r4, #4]
 8007b60:	60a6      	str	r6, [r4, #8]
 8007b62:	2e00      	cmp	r6, #0
 8007b64:	bfa2      	ittt	ge
 8007b66:	6821      	ldrge	r1, [r4, #0]
 8007b68:	f021 0104 	bicge.w	r1, r1, #4
 8007b6c:	6021      	strge	r1, [r4, #0]
 8007b6e:	b90d      	cbnz	r5, 8007b74 <_printf_i+0x118>
 8007b70:	2e00      	cmp	r6, #0
 8007b72:	d04d      	beq.n	8007c10 <_printf_i+0x1b4>
 8007b74:	4616      	mov	r6, r2
 8007b76:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b7a:	fb03 5711 	mls	r7, r3, r1, r5
 8007b7e:	5dc7      	ldrb	r7, [r0, r7]
 8007b80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b84:	462f      	mov	r7, r5
 8007b86:	42bb      	cmp	r3, r7
 8007b88:	460d      	mov	r5, r1
 8007b8a:	d9f4      	bls.n	8007b76 <_printf_i+0x11a>
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d10b      	bne.n	8007ba8 <_printf_i+0x14c>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	07df      	lsls	r7, r3, #31
 8007b94:	d508      	bpl.n	8007ba8 <_printf_i+0x14c>
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	6861      	ldr	r1, [r4, #4]
 8007b9a:	4299      	cmp	r1, r3
 8007b9c:	bfde      	ittt	le
 8007b9e:	2330      	movle	r3, #48	; 0x30
 8007ba0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ba4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ba8:	1b92      	subs	r2, r2, r6
 8007baa:	6122      	str	r2, [r4, #16]
 8007bac:	f8cd a000 	str.w	sl, [sp]
 8007bb0:	464b      	mov	r3, r9
 8007bb2:	aa03      	add	r2, sp, #12
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	f7ff fee2 	bl	8007980 <_printf_common>
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d14c      	bne.n	8007c5a <_printf_i+0x1fe>
 8007bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc4:	b004      	add	sp, #16
 8007bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bca:	4835      	ldr	r0, [pc, #212]	; (8007ca0 <_printf_i+0x244>)
 8007bcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	680e      	ldr	r6, [r1, #0]
 8007bd4:	061f      	lsls	r7, r3, #24
 8007bd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007bda:	600e      	str	r6, [r1, #0]
 8007bdc:	d514      	bpl.n	8007c08 <_printf_i+0x1ac>
 8007bde:	07d9      	lsls	r1, r3, #31
 8007be0:	bf44      	itt	mi
 8007be2:	f043 0320 	orrmi.w	r3, r3, #32
 8007be6:	6023      	strmi	r3, [r4, #0]
 8007be8:	b91d      	cbnz	r5, 8007bf2 <_printf_i+0x196>
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	f023 0320 	bic.w	r3, r3, #32
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	2310      	movs	r3, #16
 8007bf4:	e7b0      	b.n	8007b58 <_printf_i+0xfc>
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	f043 0320 	orr.w	r3, r3, #32
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	2378      	movs	r3, #120	; 0x78
 8007c00:	4828      	ldr	r0, [pc, #160]	; (8007ca4 <_printf_i+0x248>)
 8007c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c06:	e7e3      	b.n	8007bd0 <_printf_i+0x174>
 8007c08:	065e      	lsls	r6, r3, #25
 8007c0a:	bf48      	it	mi
 8007c0c:	b2ad      	uxthmi	r5, r5
 8007c0e:	e7e6      	b.n	8007bde <_printf_i+0x182>
 8007c10:	4616      	mov	r6, r2
 8007c12:	e7bb      	b.n	8007b8c <_printf_i+0x130>
 8007c14:	680b      	ldr	r3, [r1, #0]
 8007c16:	6826      	ldr	r6, [r4, #0]
 8007c18:	6960      	ldr	r0, [r4, #20]
 8007c1a:	1d1d      	adds	r5, r3, #4
 8007c1c:	600d      	str	r5, [r1, #0]
 8007c1e:	0635      	lsls	r5, r6, #24
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	d501      	bpl.n	8007c28 <_printf_i+0x1cc>
 8007c24:	6018      	str	r0, [r3, #0]
 8007c26:	e002      	b.n	8007c2e <_printf_i+0x1d2>
 8007c28:	0671      	lsls	r1, r6, #25
 8007c2a:	d5fb      	bpl.n	8007c24 <_printf_i+0x1c8>
 8007c2c:	8018      	strh	r0, [r3, #0]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	6123      	str	r3, [r4, #16]
 8007c32:	4616      	mov	r6, r2
 8007c34:	e7ba      	b.n	8007bac <_printf_i+0x150>
 8007c36:	680b      	ldr	r3, [r1, #0]
 8007c38:	1d1a      	adds	r2, r3, #4
 8007c3a:	600a      	str	r2, [r1, #0]
 8007c3c:	681e      	ldr	r6, [r3, #0]
 8007c3e:	6862      	ldr	r2, [r4, #4]
 8007c40:	2100      	movs	r1, #0
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7f8 faec 	bl	8000220 <memchr>
 8007c48:	b108      	cbz	r0, 8007c4e <_printf_i+0x1f2>
 8007c4a:	1b80      	subs	r0, r0, r6
 8007c4c:	6060      	str	r0, [r4, #4]
 8007c4e:	6863      	ldr	r3, [r4, #4]
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	2300      	movs	r3, #0
 8007c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c58:	e7a8      	b.n	8007bac <_printf_i+0x150>
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	4632      	mov	r2, r6
 8007c5e:	4649      	mov	r1, r9
 8007c60:	4640      	mov	r0, r8
 8007c62:	47d0      	blx	sl
 8007c64:	3001      	adds	r0, #1
 8007c66:	d0ab      	beq.n	8007bc0 <_printf_i+0x164>
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	079b      	lsls	r3, r3, #30
 8007c6c:	d413      	bmi.n	8007c96 <_printf_i+0x23a>
 8007c6e:	68e0      	ldr	r0, [r4, #12]
 8007c70:	9b03      	ldr	r3, [sp, #12]
 8007c72:	4298      	cmp	r0, r3
 8007c74:	bfb8      	it	lt
 8007c76:	4618      	movlt	r0, r3
 8007c78:	e7a4      	b.n	8007bc4 <_printf_i+0x168>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4632      	mov	r2, r6
 8007c7e:	4649      	mov	r1, r9
 8007c80:	4640      	mov	r0, r8
 8007c82:	47d0      	blx	sl
 8007c84:	3001      	adds	r0, #1
 8007c86:	d09b      	beq.n	8007bc0 <_printf_i+0x164>
 8007c88:	3501      	adds	r5, #1
 8007c8a:	68e3      	ldr	r3, [r4, #12]
 8007c8c:	9903      	ldr	r1, [sp, #12]
 8007c8e:	1a5b      	subs	r3, r3, r1
 8007c90:	42ab      	cmp	r3, r5
 8007c92:	dcf2      	bgt.n	8007c7a <_printf_i+0x21e>
 8007c94:	e7eb      	b.n	8007c6e <_printf_i+0x212>
 8007c96:	2500      	movs	r5, #0
 8007c98:	f104 0619 	add.w	r6, r4, #25
 8007c9c:	e7f5      	b.n	8007c8a <_printf_i+0x22e>
 8007c9e:	bf00      	nop
 8007ca0:	08007f55 	.word	0x08007f55
 8007ca4:	08007f66 	.word	0x08007f66

08007ca8 <memcpy>:
 8007ca8:	440a      	add	r2, r1
 8007caa:	4291      	cmp	r1, r2
 8007cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cb0:	d100      	bne.n	8007cb4 <memcpy+0xc>
 8007cb2:	4770      	bx	lr
 8007cb4:	b510      	push	{r4, lr}
 8007cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cbe:	4291      	cmp	r1, r2
 8007cc0:	d1f9      	bne.n	8007cb6 <memcpy+0xe>
 8007cc2:	bd10      	pop	{r4, pc}

08007cc4 <memmove>:
 8007cc4:	4288      	cmp	r0, r1
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	eb01 0402 	add.w	r4, r1, r2
 8007ccc:	d902      	bls.n	8007cd4 <memmove+0x10>
 8007cce:	4284      	cmp	r4, r0
 8007cd0:	4623      	mov	r3, r4
 8007cd2:	d807      	bhi.n	8007ce4 <memmove+0x20>
 8007cd4:	1e43      	subs	r3, r0, #1
 8007cd6:	42a1      	cmp	r1, r4
 8007cd8:	d008      	beq.n	8007cec <memmove+0x28>
 8007cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ce2:	e7f8      	b.n	8007cd6 <memmove+0x12>
 8007ce4:	4402      	add	r2, r0
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	428a      	cmp	r2, r1
 8007cea:	d100      	bne.n	8007cee <memmove+0x2a>
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cf6:	e7f7      	b.n	8007ce8 <memmove+0x24>

08007cf8 <_free_r>:
 8007cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cfa:	2900      	cmp	r1, #0
 8007cfc:	d048      	beq.n	8007d90 <_free_r+0x98>
 8007cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d02:	9001      	str	r0, [sp, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f1a1 0404 	sub.w	r4, r1, #4
 8007d0a:	bfb8      	it	lt
 8007d0c:	18e4      	addlt	r4, r4, r3
 8007d0e:	f000 f8d3 	bl	8007eb8 <__malloc_lock>
 8007d12:	4a20      	ldr	r2, [pc, #128]	; (8007d94 <_free_r+0x9c>)
 8007d14:	9801      	ldr	r0, [sp, #4]
 8007d16:	6813      	ldr	r3, [r2, #0]
 8007d18:	4615      	mov	r5, r2
 8007d1a:	b933      	cbnz	r3, 8007d2a <_free_r+0x32>
 8007d1c:	6063      	str	r3, [r4, #4]
 8007d1e:	6014      	str	r4, [r2, #0]
 8007d20:	b003      	add	sp, #12
 8007d22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d26:	f000 b8cd 	b.w	8007ec4 <__malloc_unlock>
 8007d2a:	42a3      	cmp	r3, r4
 8007d2c:	d90b      	bls.n	8007d46 <_free_r+0x4e>
 8007d2e:	6821      	ldr	r1, [r4, #0]
 8007d30:	1862      	adds	r2, r4, r1
 8007d32:	4293      	cmp	r3, r2
 8007d34:	bf04      	itt	eq
 8007d36:	681a      	ldreq	r2, [r3, #0]
 8007d38:	685b      	ldreq	r3, [r3, #4]
 8007d3a:	6063      	str	r3, [r4, #4]
 8007d3c:	bf04      	itt	eq
 8007d3e:	1852      	addeq	r2, r2, r1
 8007d40:	6022      	streq	r2, [r4, #0]
 8007d42:	602c      	str	r4, [r5, #0]
 8007d44:	e7ec      	b.n	8007d20 <_free_r+0x28>
 8007d46:	461a      	mov	r2, r3
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	b10b      	cbz	r3, 8007d50 <_free_r+0x58>
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	d9fa      	bls.n	8007d46 <_free_r+0x4e>
 8007d50:	6811      	ldr	r1, [r2, #0]
 8007d52:	1855      	adds	r5, r2, r1
 8007d54:	42a5      	cmp	r5, r4
 8007d56:	d10b      	bne.n	8007d70 <_free_r+0x78>
 8007d58:	6824      	ldr	r4, [r4, #0]
 8007d5a:	4421      	add	r1, r4
 8007d5c:	1854      	adds	r4, r2, r1
 8007d5e:	42a3      	cmp	r3, r4
 8007d60:	6011      	str	r1, [r2, #0]
 8007d62:	d1dd      	bne.n	8007d20 <_free_r+0x28>
 8007d64:	681c      	ldr	r4, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	6053      	str	r3, [r2, #4]
 8007d6a:	4421      	add	r1, r4
 8007d6c:	6011      	str	r1, [r2, #0]
 8007d6e:	e7d7      	b.n	8007d20 <_free_r+0x28>
 8007d70:	d902      	bls.n	8007d78 <_free_r+0x80>
 8007d72:	230c      	movs	r3, #12
 8007d74:	6003      	str	r3, [r0, #0]
 8007d76:	e7d3      	b.n	8007d20 <_free_r+0x28>
 8007d78:	6825      	ldr	r5, [r4, #0]
 8007d7a:	1961      	adds	r1, r4, r5
 8007d7c:	428b      	cmp	r3, r1
 8007d7e:	bf04      	itt	eq
 8007d80:	6819      	ldreq	r1, [r3, #0]
 8007d82:	685b      	ldreq	r3, [r3, #4]
 8007d84:	6063      	str	r3, [r4, #4]
 8007d86:	bf04      	itt	eq
 8007d88:	1949      	addeq	r1, r1, r5
 8007d8a:	6021      	streq	r1, [r4, #0]
 8007d8c:	6054      	str	r4, [r2, #4]
 8007d8e:	e7c7      	b.n	8007d20 <_free_r+0x28>
 8007d90:	b003      	add	sp, #12
 8007d92:	bd30      	pop	{r4, r5, pc}
 8007d94:	200000bc 	.word	0x200000bc

08007d98 <_malloc_r>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	1ccd      	adds	r5, r1, #3
 8007d9c:	f025 0503 	bic.w	r5, r5, #3
 8007da0:	3508      	adds	r5, #8
 8007da2:	2d0c      	cmp	r5, #12
 8007da4:	bf38      	it	cc
 8007da6:	250c      	movcc	r5, #12
 8007da8:	2d00      	cmp	r5, #0
 8007daa:	4606      	mov	r6, r0
 8007dac:	db01      	blt.n	8007db2 <_malloc_r+0x1a>
 8007dae:	42a9      	cmp	r1, r5
 8007db0:	d903      	bls.n	8007dba <_malloc_r+0x22>
 8007db2:	230c      	movs	r3, #12
 8007db4:	6033      	str	r3, [r6, #0]
 8007db6:	2000      	movs	r0, #0
 8007db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dba:	f000 f87d 	bl	8007eb8 <__malloc_lock>
 8007dbe:	4921      	ldr	r1, [pc, #132]	; (8007e44 <_malloc_r+0xac>)
 8007dc0:	680a      	ldr	r2, [r1, #0]
 8007dc2:	4614      	mov	r4, r2
 8007dc4:	b99c      	cbnz	r4, 8007dee <_malloc_r+0x56>
 8007dc6:	4f20      	ldr	r7, [pc, #128]	; (8007e48 <_malloc_r+0xb0>)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	b923      	cbnz	r3, 8007dd6 <_malloc_r+0x3e>
 8007dcc:	4621      	mov	r1, r4
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f000 f862 	bl	8007e98 <_sbrk_r>
 8007dd4:	6038      	str	r0, [r7, #0]
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f000 f85d 	bl	8007e98 <_sbrk_r>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d123      	bne.n	8007e2a <_malloc_r+0x92>
 8007de2:	230c      	movs	r3, #12
 8007de4:	6033      	str	r3, [r6, #0]
 8007de6:	4630      	mov	r0, r6
 8007de8:	f000 f86c 	bl	8007ec4 <__malloc_unlock>
 8007dec:	e7e3      	b.n	8007db6 <_malloc_r+0x1e>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	1b5b      	subs	r3, r3, r5
 8007df2:	d417      	bmi.n	8007e24 <_malloc_r+0x8c>
 8007df4:	2b0b      	cmp	r3, #11
 8007df6:	d903      	bls.n	8007e00 <_malloc_r+0x68>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	441c      	add	r4, r3
 8007dfc:	6025      	str	r5, [r4, #0]
 8007dfe:	e004      	b.n	8007e0a <_malloc_r+0x72>
 8007e00:	6863      	ldr	r3, [r4, #4]
 8007e02:	42a2      	cmp	r2, r4
 8007e04:	bf0c      	ite	eq
 8007e06:	600b      	streq	r3, [r1, #0]
 8007e08:	6053      	strne	r3, [r2, #4]
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f000 f85a 	bl	8007ec4 <__malloc_unlock>
 8007e10:	f104 000b 	add.w	r0, r4, #11
 8007e14:	1d23      	adds	r3, r4, #4
 8007e16:	f020 0007 	bic.w	r0, r0, #7
 8007e1a:	1ac2      	subs	r2, r0, r3
 8007e1c:	d0cc      	beq.n	8007db8 <_malloc_r+0x20>
 8007e1e:	1a1b      	subs	r3, r3, r0
 8007e20:	50a3      	str	r3, [r4, r2]
 8007e22:	e7c9      	b.n	8007db8 <_malloc_r+0x20>
 8007e24:	4622      	mov	r2, r4
 8007e26:	6864      	ldr	r4, [r4, #4]
 8007e28:	e7cc      	b.n	8007dc4 <_malloc_r+0x2c>
 8007e2a:	1cc4      	adds	r4, r0, #3
 8007e2c:	f024 0403 	bic.w	r4, r4, #3
 8007e30:	42a0      	cmp	r0, r4
 8007e32:	d0e3      	beq.n	8007dfc <_malloc_r+0x64>
 8007e34:	1a21      	subs	r1, r4, r0
 8007e36:	4630      	mov	r0, r6
 8007e38:	f000 f82e 	bl	8007e98 <_sbrk_r>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d1dd      	bne.n	8007dfc <_malloc_r+0x64>
 8007e40:	e7cf      	b.n	8007de2 <_malloc_r+0x4a>
 8007e42:	bf00      	nop
 8007e44:	200000bc 	.word	0x200000bc
 8007e48:	200000c0 	.word	0x200000c0

08007e4c <_realloc_r>:
 8007e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4e:	4607      	mov	r7, r0
 8007e50:	4614      	mov	r4, r2
 8007e52:	460e      	mov	r6, r1
 8007e54:	b921      	cbnz	r1, 8007e60 <_realloc_r+0x14>
 8007e56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	f7ff bf9c 	b.w	8007d98 <_malloc_r>
 8007e60:	b922      	cbnz	r2, 8007e6c <_realloc_r+0x20>
 8007e62:	f7ff ff49 	bl	8007cf8 <_free_r>
 8007e66:	4625      	mov	r5, r4
 8007e68:	4628      	mov	r0, r5
 8007e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e6c:	f000 f830 	bl	8007ed0 <_malloc_usable_size_r>
 8007e70:	42a0      	cmp	r0, r4
 8007e72:	d20f      	bcs.n	8007e94 <_realloc_r+0x48>
 8007e74:	4621      	mov	r1, r4
 8007e76:	4638      	mov	r0, r7
 8007e78:	f7ff ff8e 	bl	8007d98 <_malloc_r>
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d0f2      	beq.n	8007e68 <_realloc_r+0x1c>
 8007e82:	4631      	mov	r1, r6
 8007e84:	4622      	mov	r2, r4
 8007e86:	f7ff ff0f 	bl	8007ca8 <memcpy>
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	f7ff ff33 	bl	8007cf8 <_free_r>
 8007e92:	e7e9      	b.n	8007e68 <_realloc_r+0x1c>
 8007e94:	4635      	mov	r5, r6
 8007e96:	e7e7      	b.n	8007e68 <_realloc_r+0x1c>

08007e98 <_sbrk_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4d06      	ldr	r5, [pc, #24]	; (8007eb4 <_sbrk_r+0x1c>)
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	4608      	mov	r0, r1
 8007ea2:	602b      	str	r3, [r5, #0]
 8007ea4:	f7f9 fb7c 	bl	80015a0 <_sbrk>
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d102      	bne.n	8007eb2 <_sbrk_r+0x1a>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	b103      	cbz	r3, 8007eb2 <_sbrk_r+0x1a>
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
 8007eb4:	2000046c 	.word	0x2000046c

08007eb8 <__malloc_lock>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	; (8007ec0 <__malloc_lock+0x8>)
 8007eba:	f000 b811 	b.w	8007ee0 <__retarget_lock_acquire_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	20000474 	.word	0x20000474

08007ec4 <__malloc_unlock>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	; (8007ecc <__malloc_unlock+0x8>)
 8007ec6:	f000 b80c 	b.w	8007ee2 <__retarget_lock_release_recursive>
 8007eca:	bf00      	nop
 8007ecc:	20000474 	.word	0x20000474

08007ed0 <_malloc_usable_size_r>:
 8007ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ed4:	1f18      	subs	r0, r3, #4
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bfbc      	itt	lt
 8007eda:	580b      	ldrlt	r3, [r1, r0]
 8007edc:	18c0      	addlt	r0, r0, r3
 8007ede:	4770      	bx	lr

08007ee0 <__retarget_lock_acquire_recursive>:
 8007ee0:	4770      	bx	lr

08007ee2 <__retarget_lock_release_recursive>:
 8007ee2:	4770      	bx	lr

08007ee4 <_init>:
 8007ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee6:	bf00      	nop
 8007ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eea:	bc08      	pop	{r3}
 8007eec:	469e      	mov	lr, r3
 8007eee:	4770      	bx	lr

08007ef0 <_fini>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	bf00      	nop
 8007ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef6:	bc08      	pop	{r3}
 8007ef8:	469e      	mov	lr, r3
 8007efa:	4770      	bx	lr
