
INA219.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080044a0  080044a0  000144a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e0  080044e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080044e0  080044e0  000144e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044e8  080044e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  080044fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080044fc  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012df8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240f  00000000  00000000  00032e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00035248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00035f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dfe5  00000000  00000000  00036b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001113e  00000000  00000000  00054b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bce9c  00000000  00000000  00065c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122b0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003588  00000000  00000000  00122b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004488 	.word	0x08004488

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004488 	.word	0x08004488

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <__aeabi_uldivmod>:
 8000824:	b953      	cbnz	r3, 800083c <__aeabi_uldivmod+0x18>
 8000826:	b94a      	cbnz	r2, 800083c <__aeabi_uldivmod+0x18>
 8000828:	2900      	cmp	r1, #0
 800082a:	bf08      	it	eq
 800082c:	2800      	cmpeq	r0, #0
 800082e:	bf1c      	itt	ne
 8000830:	f04f 31ff 	movne.w	r1, #4294967295
 8000834:	f04f 30ff 	movne.w	r0, #4294967295
 8000838:	f000 b96e 	b.w	8000b18 <__aeabi_idiv0>
 800083c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000840:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000844:	f000 f806 	bl	8000854 <__udivmoddi4>
 8000848:	f8dd e004 	ldr.w	lr, [sp, #4]
 800084c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr

08000854 <__udivmoddi4>:
 8000854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000858:	9d08      	ldr	r5, [sp, #32]
 800085a:	4604      	mov	r4, r0
 800085c:	468c      	mov	ip, r1
 800085e:	2b00      	cmp	r3, #0
 8000860:	f040 8083 	bne.w	800096a <__udivmoddi4+0x116>
 8000864:	428a      	cmp	r2, r1
 8000866:	4617      	mov	r7, r2
 8000868:	d947      	bls.n	80008fa <__udivmoddi4+0xa6>
 800086a:	fab2 f282 	clz	r2, r2
 800086e:	b142      	cbz	r2, 8000882 <__udivmoddi4+0x2e>
 8000870:	f1c2 0020 	rsb	r0, r2, #32
 8000874:	fa24 f000 	lsr.w	r0, r4, r0
 8000878:	4091      	lsls	r1, r2
 800087a:	4097      	lsls	r7, r2
 800087c:	ea40 0c01 	orr.w	ip, r0, r1
 8000880:	4094      	lsls	r4, r2
 8000882:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000886:	0c23      	lsrs	r3, r4, #16
 8000888:	fbbc f6f8 	udiv	r6, ip, r8
 800088c:	fa1f fe87 	uxth.w	lr, r7
 8000890:	fb08 c116 	mls	r1, r8, r6, ip
 8000894:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000898:	fb06 f10e 	mul.w	r1, r6, lr
 800089c:	4299      	cmp	r1, r3
 800089e:	d909      	bls.n	80008b4 <__udivmoddi4+0x60>
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008a6:	f080 8119 	bcs.w	8000adc <__udivmoddi4+0x288>
 80008aa:	4299      	cmp	r1, r3
 80008ac:	f240 8116 	bls.w	8000adc <__udivmoddi4+0x288>
 80008b0:	3e02      	subs	r6, #2
 80008b2:	443b      	add	r3, r7
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008bc:	fb08 3310 	mls	r3, r8, r0, r3
 80008c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008c8:	45a6      	cmp	lr, r4
 80008ca:	d909      	bls.n	80008e0 <__udivmoddi4+0x8c>
 80008cc:	193c      	adds	r4, r7, r4
 80008ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80008d2:	f080 8105 	bcs.w	8000ae0 <__udivmoddi4+0x28c>
 80008d6:	45a6      	cmp	lr, r4
 80008d8:	f240 8102 	bls.w	8000ae0 <__udivmoddi4+0x28c>
 80008dc:	3802      	subs	r0, #2
 80008de:	443c      	add	r4, r7
 80008e0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008e4:	eba4 040e 	sub.w	r4, r4, lr
 80008e8:	2600      	movs	r6, #0
 80008ea:	b11d      	cbz	r5, 80008f4 <__udivmoddi4+0xa0>
 80008ec:	40d4      	lsrs	r4, r2
 80008ee:	2300      	movs	r3, #0
 80008f0:	e9c5 4300 	strd	r4, r3, [r5]
 80008f4:	4631      	mov	r1, r6
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	b902      	cbnz	r2, 80008fe <__udivmoddi4+0xaa>
 80008fc:	deff      	udf	#255	; 0xff
 80008fe:	fab2 f282 	clz	r2, r2
 8000902:	2a00      	cmp	r2, #0
 8000904:	d150      	bne.n	80009a8 <__udivmoddi4+0x154>
 8000906:	1bcb      	subs	r3, r1, r7
 8000908:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090c:	fa1f f887 	uxth.w	r8, r7
 8000910:	2601      	movs	r6, #1
 8000912:	fbb3 fcfe 	udiv	ip, r3, lr
 8000916:	0c21      	lsrs	r1, r4, #16
 8000918:	fb0e 331c 	mls	r3, lr, ip, r3
 800091c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000920:	fb08 f30c 	mul.w	r3, r8, ip
 8000924:	428b      	cmp	r3, r1
 8000926:	d907      	bls.n	8000938 <__udivmoddi4+0xe4>
 8000928:	1879      	adds	r1, r7, r1
 800092a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0xe2>
 8000930:	428b      	cmp	r3, r1
 8000932:	f200 80e9 	bhi.w	8000b08 <__udivmoddi4+0x2b4>
 8000936:	4684      	mov	ip, r0
 8000938:	1ac9      	subs	r1, r1, r3
 800093a:	b2a3      	uxth	r3, r4
 800093c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000940:	fb0e 1110 	mls	r1, lr, r0, r1
 8000944:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000948:	fb08 f800 	mul.w	r8, r8, r0
 800094c:	45a0      	cmp	r8, r4
 800094e:	d907      	bls.n	8000960 <__udivmoddi4+0x10c>
 8000950:	193c      	adds	r4, r7, r4
 8000952:	f100 33ff 	add.w	r3, r0, #4294967295
 8000956:	d202      	bcs.n	800095e <__udivmoddi4+0x10a>
 8000958:	45a0      	cmp	r8, r4
 800095a:	f200 80d9 	bhi.w	8000b10 <__udivmoddi4+0x2bc>
 800095e:	4618      	mov	r0, r3
 8000960:	eba4 0408 	sub.w	r4, r4, r8
 8000964:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000968:	e7bf      	b.n	80008ea <__udivmoddi4+0x96>
 800096a:	428b      	cmp	r3, r1
 800096c:	d909      	bls.n	8000982 <__udivmoddi4+0x12e>
 800096e:	2d00      	cmp	r5, #0
 8000970:	f000 80b1 	beq.w	8000ad6 <__udivmoddi4+0x282>
 8000974:	2600      	movs	r6, #0
 8000976:	e9c5 0100 	strd	r0, r1, [r5]
 800097a:	4630      	mov	r0, r6
 800097c:	4631      	mov	r1, r6
 800097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000982:	fab3 f683 	clz	r6, r3
 8000986:	2e00      	cmp	r6, #0
 8000988:	d14a      	bne.n	8000a20 <__udivmoddi4+0x1cc>
 800098a:	428b      	cmp	r3, r1
 800098c:	d302      	bcc.n	8000994 <__udivmoddi4+0x140>
 800098e:	4282      	cmp	r2, r0
 8000990:	f200 80b8 	bhi.w	8000b04 <__udivmoddi4+0x2b0>
 8000994:	1a84      	subs	r4, r0, r2
 8000996:	eb61 0103 	sbc.w	r1, r1, r3
 800099a:	2001      	movs	r0, #1
 800099c:	468c      	mov	ip, r1
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d0a8      	beq.n	80008f4 <__udivmoddi4+0xa0>
 80009a2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009a6:	e7a5      	b.n	80008f4 <__udivmoddi4+0xa0>
 80009a8:	f1c2 0320 	rsb	r3, r2, #32
 80009ac:	fa20 f603 	lsr.w	r6, r0, r3
 80009b0:	4097      	lsls	r7, r2
 80009b2:	fa01 f002 	lsl.w	r0, r1, r2
 80009b6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ba:	40d9      	lsrs	r1, r3
 80009bc:	4330      	orrs	r0, r6
 80009be:	0c03      	lsrs	r3, r0, #16
 80009c0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009c4:	fa1f f887 	uxth.w	r8, r7
 80009c8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d0:	fb06 f108 	mul.w	r1, r6, r8
 80009d4:	4299      	cmp	r1, r3
 80009d6:	fa04 f402 	lsl.w	r4, r4, r2
 80009da:	d909      	bls.n	80009f0 <__udivmoddi4+0x19c>
 80009dc:	18fb      	adds	r3, r7, r3
 80009de:	f106 3cff 	add.w	ip, r6, #4294967295
 80009e2:	f080 808d 	bcs.w	8000b00 <__udivmoddi4+0x2ac>
 80009e6:	4299      	cmp	r1, r3
 80009e8:	f240 808a 	bls.w	8000b00 <__udivmoddi4+0x2ac>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	443b      	add	r3, r7
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	b281      	uxth	r1, r0
 80009f4:	fbb3 f0fe 	udiv	r0, r3, lr
 80009f8:	fb0e 3310 	mls	r3, lr, r0, r3
 80009fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a00:	fb00 f308 	mul.w	r3, r0, r8
 8000a04:	428b      	cmp	r3, r1
 8000a06:	d907      	bls.n	8000a18 <__udivmoddi4+0x1c4>
 8000a08:	1879      	adds	r1, r7, r1
 8000a0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a0e:	d273      	bcs.n	8000af8 <__udivmoddi4+0x2a4>
 8000a10:	428b      	cmp	r3, r1
 8000a12:	d971      	bls.n	8000af8 <__udivmoddi4+0x2a4>
 8000a14:	3802      	subs	r0, #2
 8000a16:	4439      	add	r1, r7
 8000a18:	1acb      	subs	r3, r1, r3
 8000a1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a1e:	e778      	b.n	8000912 <__udivmoddi4+0xbe>
 8000a20:	f1c6 0c20 	rsb	ip, r6, #32
 8000a24:	fa03 f406 	lsl.w	r4, r3, r6
 8000a28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a2c:	431c      	orrs	r4, r3
 8000a2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a32:	fa01 f306 	lsl.w	r3, r1, r6
 8000a36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a3e:	431f      	orrs	r7, r3
 8000a40:	0c3b      	lsrs	r3, r7, #16
 8000a42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a46:	fa1f f884 	uxth.w	r8, r4
 8000a4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a52:	fb09 fa08 	mul.w	sl, r9, r8
 8000a56:	458a      	cmp	sl, r1
 8000a58:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x220>
 8000a62:	1861      	adds	r1, r4, r1
 8000a64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a68:	d248      	bcs.n	8000afc <__udivmoddi4+0x2a8>
 8000a6a:	458a      	cmp	sl, r1
 8000a6c:	d946      	bls.n	8000afc <__udivmoddi4+0x2a8>
 8000a6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a72:	4421      	add	r1, r4
 8000a74:	eba1 010a 	sub.w	r1, r1, sl
 8000a78:	b2bf      	uxth	r7, r7
 8000a7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a86:	fb00 f808 	mul.w	r8, r0, r8
 8000a8a:	45b8      	cmp	r8, r7
 8000a8c:	d907      	bls.n	8000a9e <__udivmoddi4+0x24a>
 8000a8e:	19e7      	adds	r7, r4, r7
 8000a90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a94:	d22e      	bcs.n	8000af4 <__udivmoddi4+0x2a0>
 8000a96:	45b8      	cmp	r8, r7
 8000a98:	d92c      	bls.n	8000af4 <__udivmoddi4+0x2a0>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4427      	add	r7, r4
 8000a9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000aa2:	eba7 0708 	sub.w	r7, r7, r8
 8000aa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000aaa:	454f      	cmp	r7, r9
 8000aac:	46c6      	mov	lr, r8
 8000aae:	4649      	mov	r1, r9
 8000ab0:	d31a      	bcc.n	8000ae8 <__udivmoddi4+0x294>
 8000ab2:	d017      	beq.n	8000ae4 <__udivmoddi4+0x290>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x27a>
 8000ab6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aba:	eb67 0701 	sbc.w	r7, r7, r1
 8000abe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ac2:	40f2      	lsrs	r2, r6
 8000ac4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ac8:	40f7      	lsrs	r7, r6
 8000aca:	e9c5 2700 	strd	r2, r7, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	462e      	mov	r6, r5
 8000ad8:	4628      	mov	r0, r5
 8000ada:	e70b      	b.n	80008f4 <__udivmoddi4+0xa0>
 8000adc:	4606      	mov	r6, r0
 8000ade:	e6e9      	b.n	80008b4 <__udivmoddi4+0x60>
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	e6fd      	b.n	80008e0 <__udivmoddi4+0x8c>
 8000ae4:	4543      	cmp	r3, r8
 8000ae6:	d2e5      	bcs.n	8000ab4 <__udivmoddi4+0x260>
 8000ae8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000aec:	eb69 0104 	sbc.w	r1, r9, r4
 8000af0:	3801      	subs	r0, #1
 8000af2:	e7df      	b.n	8000ab4 <__udivmoddi4+0x260>
 8000af4:	4608      	mov	r0, r1
 8000af6:	e7d2      	b.n	8000a9e <__udivmoddi4+0x24a>
 8000af8:	4660      	mov	r0, ip
 8000afa:	e78d      	b.n	8000a18 <__udivmoddi4+0x1c4>
 8000afc:	4681      	mov	r9, r0
 8000afe:	e7b9      	b.n	8000a74 <__udivmoddi4+0x220>
 8000b00:	4666      	mov	r6, ip
 8000b02:	e775      	b.n	80009f0 <__udivmoddi4+0x19c>
 8000b04:	4630      	mov	r0, r6
 8000b06:	e74a      	b.n	800099e <__udivmoddi4+0x14a>
 8000b08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b0c:	4439      	add	r1, r7
 8000b0e:	e713      	b.n	8000938 <__udivmoddi4+0xe4>
 8000b10:	3802      	subs	r0, #2
 8000b12:	443c      	add	r4, r7
 8000b14:	e724      	b.n	8000960 <__udivmoddi4+0x10c>
 8000b16:	bf00      	nop

08000b18 <__aeabi_idiv0>:
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <MX_GPIO_Init+0xd4>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <MX_GPIO_Init+0xd4>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <MX_GPIO_Init+0xd4>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4a:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <MX_GPIO_Init+0xd4>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a28      	ldr	r2, [pc, #160]	; (8000bf0 <MX_GPIO_Init+0xd4>)
 8000b50:	f043 0320 	orr.w	r3, r3, #32
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <MX_GPIO_Init+0xd4>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <MX_GPIO_Init+0xd4>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <MX_GPIO_Init+0xd4>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <MX_GPIO_Init+0xd4>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <MX_GPIO_Init+0xd4>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <MX_GPIO_Init+0xd4>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_GPIO_Init+0xd4>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2120      	movs	r1, #32
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f000 ff17 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <MX_GPIO_Init+0xd8>)
 8000bb6:	f000 fd87 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bba:	2320      	movs	r3, #32
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd4:	f000 fd78 	bl	80016c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2028      	movs	r0, #40	; 0x28
 8000bde:	f000 fd3e 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000be2:	2028      	movs	r0, #40	; 0x28
 8000be4:	f000 fd55 	bl	8001692 <HAL_NVIC_EnableIRQ>

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48000800 	.word	0x48000800

08000bf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <MX_I2C1_Init+0x78>)
 8000c00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <MX_I2C1_Init+0x7c>)
 8000c06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c32:	480e      	ldr	r0, [pc, #56]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c34:	f000 ff05 	bl	8001a42 <HAL_I2C_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c3e:	f000 f937 	bl	8000eb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c46:	f001 fd67 	bl	8002718 <HAL_I2CEx_ConfigAnalogFilter>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c50:	f000 f92e 	bl	8000eb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c58:	f001 fda9 	bl	80027ae <HAL_I2CEx_ConfigDigitalFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c62:	f000 f925 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000028 	.word	0x20000028
 8000c70:	40005400 	.word	0x40005400
 8000c74:	10909cec 	.word	0x10909cec

08000c78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09e      	sub	sp, #120	; 0x78
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2250      	movs	r2, #80	; 0x50
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fbed 	bl	8004478 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a2d      	ldr	r2, [pc, #180]	; (8000d58 <HAL_I2C_MspInit+0xe0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d153      	bne.n	8000d50 <HAL_I2C_MspInit+0xd8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ca8:	2340      	movs	r3, #64	; 0x40
 8000caa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 fbaf 	bl	8003418 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cc0:	f000 f8f6 	bl	8000eb0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc8:	4a24      	ldr	r2, [pc, #144]	; (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d06:	2304      	movs	r3, #4
 8000d08:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f000 fcd8 	bl	80016c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1c:	2312      	movs	r3, #18
 8000d1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d30:	4619      	mov	r1, r3
 8000d32:	480b      	ldr	r0, [pc, #44]	; (8000d60 <HAL_I2C_MspInit+0xe8>)
 8000d34:	f000 fcc8 	bl	80016c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d42:	6593      	str	r3, [r2, #88]	; 0x58
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d50:	bf00      	nop
 8000d52:	3778      	adds	r7, #120	; 0x78
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	48000400 	.word	0x48000400

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d68:	f000 fb0c 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 f854 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d70:	f7ff fed4 	bl	8000b1c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d74:	f000 f90a 	bl	8000f8c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000d78:	f7ff ff3e 	bl	8000bf8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 8000d7c:	bf00      	nop
 8000d7e:	2240      	movs	r2, #64	; 0x40
 8000d80:	4920      	ldr	r1, [pc, #128]	; (8000e04 <main+0xa0>)
 8000d82:	4821      	ldr	r0, [pc, #132]	; (8000e08 <main+0xa4>)
 8000d84:	f000 facc 	bl	8001320 <INA219_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f7      	beq.n	8000d7e <main+0x1a>
   {

   }
   //INA219_setPowerMode(&ina219, INA219_CONFIG_MODE_ADCOFF);
   vbus = INA219_ReadBusVoltage(&ina219);
 8000d8e:	481e      	ldr	r0, [pc, #120]	; (8000e08 <main+0xa4>)
 8000d90:	f000 fa0d 	bl	80011ae <INA219_ReadBusVoltage>
 8000d94:	4603      	mov	r3, r0
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <main+0xa8>)
 8000da0:	edc3 7a00 	vstr	s15, [r3]
   vshunt = INA219_ReadShuntVolage(&ina219);
 8000da4:	4818      	ldr	r0, [pc, #96]	; (8000e08 <main+0xa4>)
 8000da6:	f000 fa3f 	bl	8001228 <INA219_ReadShuntVolage>
 8000daa:	4603      	mov	r3, r0
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <main+0xac>)
 8000db6:	edc3 7a00 	vstr	s15, [r3]
   current = INA219_ReadCurrent(&ina219);
 8000dba:	4813      	ldr	r0, [pc, #76]	; (8000e08 <main+0xa4>)
 8000dbc:	f000 fa1a 	bl	80011f4 <INA219_ReadCurrent>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	ee07 3a90 	vmov	s15, r3
 8000dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <main+0xb0>)
 8000dcc:	edc3 7a00 	vstr	s15, [r3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   vbus = INA219_ReadBusVoltage(&ina219);
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <main+0xa4>)
 8000dd2:	f000 f9ec 	bl	80011ae <INA219_ReadBusVoltage>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <main+0xa8>)
 8000de2:	edc3 7a00 	vstr	s15, [r3]
	   current = INA219_ReadCurrent(&ina219);
 8000de6:	4808      	ldr	r0, [pc, #32]	; (8000e08 <main+0xa4>)
 8000de8:	f000 fa04 	bl	80011f4 <INA219_ReadCurrent>
 8000dec:	4603      	mov	r3, r0
 8000dee:	ee07 3a90 	vmov	s15, r3
 8000df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <main+0xb0>)
 8000df8:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(50);
 8000dfc:	2032      	movs	r0, #50	; 0x32
 8000dfe:	f000 fb31 	bl	8001464 <HAL_Delay>
	   vbus = INA219_ReadBusVoltage(&ina219);
 8000e02:	e7e5      	b.n	8000dd0 <main+0x6c>
 8000e04:	20000028 	.word	0x20000028
 8000e08:	20000084 	.word	0x20000084
 8000e0c:	20000080 	.word	0x20000080
 8000e10:	20000074 	.word	0x20000074
 8000e14:	2000008c 	.word	0x2000008c

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	; 0x50
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	2238      	movs	r2, #56	; 0x38
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fb26 	bl	8004478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e3e:	f001 fd03 	bl	8002848 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4c:	2340      	movs	r3, #64	; 0x40
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e50:	2302      	movs	r3, #2
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e54:	2302      	movs	r3, #2
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e64:	2302      	movs	r3, #2
 8000e66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 fd9d 	bl	80029b0 <HAL_RCC_OscConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e7c:	f000 f818 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e80:	230f      	movs	r3, #15
 8000e82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e84:	2303      	movs	r3, #3
 8000e86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2102      	movs	r1, #2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 f8a1 	bl	8002fe0 <HAL_RCC_ClockConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ea4:	f000 f804 	bl	8000eb0 <Error_Handler>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3750      	adds	r7, #80	; 0x50
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_MspInit+0x44>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_MspInit+0x44>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_MspInit+0x44>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <HAL_MspInit+0x44>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <HAL_MspInit+0x44>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_MspInit+0x44>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ef2:	f001 fd4d 	bl	8002990 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f50:	f000 fa6a 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f60:	f000 fd4c 	bl	80019fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <MX_LPUART1_UART_Init+0x90>)
 8000f94:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f9c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000fd0:	f002 fc5e 	bl	8003890 <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fda:	f7ff ff69 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000fe2:	f003 f95b 	bl	800429c <HAL_UARTEx_SetTxFifoThreshold>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000fec:	f7ff ff60 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8000ff4:	f003 f990 	bl	8004318 <HAL_UARTEx_SetRxFifoThreshold>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000ffe:	f7ff ff57 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_LPUART1_UART_Init+0x8c>)
 8001004:	f003 f911 	bl	800422a <HAL_UARTEx_DisableFifoMode>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800100e:	f7ff ff4f 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000090 	.word	0x20000090
 800101c:	40008000 	.word	0x40008000

08001020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09e      	sub	sp, #120	; 0x78
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2250      	movs	r2, #80	; 0x50
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fa19 	bl	8004478 <memset>
  if(uartHandle->Instance==LPUART1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <HAL_UART_MspInit+0xa8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d136      	bne.n	80010be <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001050:	2320      	movs	r3, #32
 8001052:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4618      	mov	r0, r3
 800105e:	f002 f9db 	bl	8003418 <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001068:	f7ff ff22 	bl	8000eb0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_UART_MspInit+0xac>)
 800106e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001070:	4a16      	ldr	r2, [pc, #88]	; (80010cc <HAL_UART_MspInit+0xac>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_UART_MspInit+0xac>)
 800107a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_UART_MspInit+0xac>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_UART_MspInit+0xac>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_UART_MspInit+0xac>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800109c:	230c      	movs	r3, #12
 800109e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80010ac:	230c      	movs	r3, #12
 80010ae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010b4:	4619      	mov	r1, r3
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ba:	f000 fb05 	bl	80016c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80010be:	bf00      	nop
 80010c0:	3778      	adds	r7, #120	; 0x78
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40008000 	.word	0x40008000
 80010cc:	40021000 	.word	0x40021000

080010d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopForever+0x6>)
  ldr r1, =_edata
 80010d6:	490e      	ldr	r1, [pc, #56]	; (8001110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <LoopForever+0xe>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010ec:	4c0b      	ldr	r4, [pc, #44]	; (800111c <LoopForever+0x16>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010fa:	f7ff ff35 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f003 f997 	bl	8004430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001102:	f7ff fe2f 	bl	8000d64 <main>

08001106 <LoopForever>:

LoopForever:
    b LoopForever
 8001106:	e7fe      	b.n	8001106 <LoopForever>
  ldr   r0, =_estack
 8001108:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001114:	080044f0 	.word	0x080044f0
  ldr r2, =_sbss
 8001118:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800111c:	20000124 	.word	0x20000124

08001120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_2_IRQHandler>

08001122 <Read16>:

#include "main.h"
#include "INA219.h"

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b088      	sub	sp, #32
 8001126:	af04      	add	r7, sp, #16
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	b29a      	uxth	r2, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2302      	movs	r3, #2
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	f000 fe1d 	bl	8001d88 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 800114e:	7b3b      	ldrb	r3, [r7, #12]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b21a      	sxth	r2, r3
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	b21b      	sxth	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b21b      	sxth	r3, r3
 800115c:	b29b      	uxth	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b088      	sub	sp, #32
 800116a:	af04      	add	r7, sp, #16
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
 8001172:	4613      	mov	r3, r2
 8001174:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8001176:	883b      	ldrh	r3, [r7, #0]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	b29b      	uxth	r3, r3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8001180:	883b      	ldrh	r3, [r7, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	b29a      	uxth	r2, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2302      	movs	r3, #2
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	f000 fcdd 	bl	8001b60 <HAL_I2C_Mem_Write>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 80011b6:	2102      	movs	r1, #2
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ffb2 	bl	8001122 <Read16>
 80011be:	4603      	mov	r3, r0
 80011c0:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 80011c2:	89fb      	ldrh	r3, [r7, #14]
 80011c4:	08db      	lsrs	r3, r3, #3
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	b29b      	uxth	r3, r3

}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 80011dc:	2104      	movs	r1, #4
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff9f 	bl	8001122 <Read16>
 80011e4:	4603      	mov	r3, r0
 80011e6:	81fb      	strh	r3, [r7, #14]

	return (result );
 80011e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ffe9 	bl	80011d4 <INA219_ReadCurrent_raw>
 8001202:	4603      	mov	r3, r0
 8001204:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8001206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <INA219_ReadCurrent+0x2c>)
 800120c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001210:	fb93 f3f2 	sdiv	r3, r3, r2
 8001214:	b21b      	sxth	r3, r3
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000078 	.word	0x20000078
 8001224:	00000000 	.word	0x00000000

08001228 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001230:	2101      	movs	r1, #1
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff75 	bl	8001122 <Read16>
 8001238:	4603      	mov	r3, r0
 800123a:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fa66 	bl	8000710 <__aeabi_i2d>
 8001244:	a308      	add	r3, pc, #32	; (adr r3, 8001268 <INA219_ReadShuntVolage+0x40>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7fe ffe5 	bl	8000218 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fac5 	bl	80007e4 <__aeabi_d2uiz>
 800125a:	4603      	mov	r3, r0
 800125c:	b29b      	uxth	r3, r3
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	47ae147b 	.word	0x47ae147b
 800126c:	3f847ae1 	.word	0x3f847ae1

08001270 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001278:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800127c:	2100      	movs	r1, #0
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff71 	bl	8001166 <Write16>
	HAL_Delay(1);
 8001284:	2001      	movs	r0, #1
 8001286:	f000 f8ed 	bl	8001464 <HAL_Delay>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	461a      	mov	r2, r3
 80012a2:	2105      	movs	r1, #5
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff5e 	bl	8001166 <Write16>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	461a      	mov	r2, r3
 80012c2:	2100      	movs	r1, #0
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff4e 	bl	8001166 <Write16>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 80012dc:	f643 139f 	movw	r3, #14751	; 0x399f
 80012e0:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <INA219_setCalibration_32V_2A+0x40>)
 80012e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012e8:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <INA219_setCalibration_32V_2A+0x44>)
 80012ec:	220a      	movs	r2, #10
 80012ee:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <INA219_setCalibration_32V_2A+0x48>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <INA219_setCalibration_32V_2A+0x40>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	4619      	mov	r1, r3
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ffc8 	bl	8001292 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	4619      	mov	r1, r3
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffd3 	bl	80012b2 <INA219_setConfig>
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000007a 	.word	0x2000007a
 8001318:	20000078 	.word	0x20000078
 800131c:	2000007c 	.word	0x2000007c

08001320 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	4613      	mov	r3, r2
 800132c:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	79fa      	ldrb	r2, [r7, #7]
 8001338:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <INA219_Init+0x5c>)
 800133c:	2200      	movs	r2, #0
 800133e:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <INA219_Init+0x60>)
 8001342:	2200      	movs	r2, #0
 8001344:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	b29b      	uxth	r3, r3
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	b299      	uxth	r1, r3
 800134e:	2302      	movs	r3, #2
 8001350:	2203      	movs	r2, #3
 8001352:	68b8      	ldr	r0, [r7, #8]
 8001354:	f000 fe32 	bl	8001fbc <HAL_I2C_IsDeviceReady>
 8001358:	4603      	mov	r3, r0
 800135a:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d107      	bne.n	8001372 <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f7ff ff84 	bl	8001270 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7ff ffb3 	bl	80012d4 <INA219_setCalibration_32V_2A>

		return 1;
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <INA219_Init+0x54>
	}

	else
	{
		return 0;
 8001372:	2300      	movs	r3, #0
	}
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000078 	.word	0x20000078
 8001380:	2000007c 	.word	0x2000007c

08001384 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138e:	2003      	movs	r0, #3
 8001390:	f000 f95a 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001394:	2000      	movs	r0, #0
 8001396:	f000 f80d 	bl	80013b4 <HAL_InitTick>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	e001      	b.n	80013aa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a6:	f7ff fd89 	bl	8000ebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013aa:	79fb      	ldrb	r3, [r7, #7]

}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_InitTick+0x68>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d022      	beq.n	800140e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_InitTick+0x6c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_InitTick+0x68>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 f966 	bl	80016ae <HAL_SYSTICK_Config>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10f      	bne.n	8001408 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	d809      	bhi.n	8001402 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ee:	2200      	movs	r2, #0
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	f04f 30ff 	mov.w	r0, #4294967295
 80013f6:	f000 f932 	bl	800165e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_InitTick+0x70>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e007      	b.n	8001412 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e004      	b.n	8001412 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e001      	b.n	8001412 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000008 	.word	0x20000008
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x1c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x20>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4413      	add	r3, r2
 8001436:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_IncTick+0x1c>)
 8001438:	6013      	str	r3, [r2, #0]
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	20000120 	.word	0x20000120
 8001448:	20000008 	.word	0x20000008

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000120 	.word	0x20000120

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff ffee 	bl	800144c <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d004      	beq.n	8001488 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_Delay+0x40>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	4413      	add	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001488:	bf00      	nop
 800148a:	f7ff ffdf 	bl	800144c <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	429a      	cmp	r2, r3
 8001498:	d8f7      	bhi.n	800148a <HAL_Delay+0x26>
  {
  }
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000008 	.word	0x20000008

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4907      	ldr	r1, [pc, #28]	; (8001544 <__NVIC_EnableIRQ+0x38>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff ff8e 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff29 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff40 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff90 	bl	800159c <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5f 	bl	8001548 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff33 	bl	800150c <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa4 	bl	8001604 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016d6:	e15a      	b.n	800198e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 814c 	beq.w	8001988 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d005      	beq.n	8001708 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001704:	2b02      	cmp	r3, #2
 8001706:	d130      	bne.n	800176a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173e:	2201      	movs	r2, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	f003 0201 	and.w	r2, r3, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b03      	cmp	r3, #3
 8001774:	d017      	beq.n	80017a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d123      	bne.n	80017fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	6939      	ldr	r1, [r7, #16]
 80017f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0203 	and.w	r2, r3, #3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 80a6 	beq.w	8001988 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183c:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <HAL_GPIO_Init+0x2e4>)
 800183e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001840:	4a5a      	ldr	r2, [pc, #360]	; (80019ac <HAL_GPIO_Init+0x2e4>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6613      	str	r3, [r2, #96]	; 0x60
 8001848:	4b58      	ldr	r3, [pc, #352]	; (80019ac <HAL_GPIO_Init+0x2e4>)
 800184a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001854:	4a56      	ldr	r2, [pc, #344]	; (80019b0 <HAL_GPIO_Init+0x2e8>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800187e:	d01f      	beq.n	80018c0 <HAL_GPIO_Init+0x1f8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a4c      	ldr	r2, [pc, #304]	; (80019b4 <HAL_GPIO_Init+0x2ec>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d019      	beq.n	80018bc <HAL_GPIO_Init+0x1f4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a4b      	ldr	r2, [pc, #300]	; (80019b8 <HAL_GPIO_Init+0x2f0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d013      	beq.n	80018b8 <HAL_GPIO_Init+0x1f0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a4a      	ldr	r2, [pc, #296]	; (80019bc <HAL_GPIO_Init+0x2f4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00d      	beq.n	80018b4 <HAL_GPIO_Init+0x1ec>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a49      	ldr	r2, [pc, #292]	; (80019c0 <HAL_GPIO_Init+0x2f8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0x1e8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a48      	ldr	r2, [pc, #288]	; (80019c4 <HAL_GPIO_Init+0x2fc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_GPIO_Init+0x1e4>
 80018a8:	2305      	movs	r3, #5
 80018aa:	e00a      	b.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018ac:	2306      	movs	r3, #6
 80018ae:	e008      	b.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018b0:	2304      	movs	r3, #4
 80018b2:	e006      	b.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018b4:	2303      	movs	r3, #3
 80018b6:	e004      	b.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018c0:	2300      	movs	r3, #0
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	f002 0203 	and.w	r2, r2, #3
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	4093      	lsls	r3, r2
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d2:	4937      	ldr	r1, [pc, #220]	; (80019b0 <HAL_GPIO_Init+0x2e8>)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_GPIO_Init+0x300>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001904:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <HAL_GPIO_Init+0x300>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_GPIO_Init+0x300>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800192e:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <HAL_GPIO_Init+0x300>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_GPIO_Init+0x300>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001958:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <HAL_GPIO_Init+0x300>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_GPIO_Init+0x300>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001982:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <HAL_GPIO_Init+0x300>)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	f47f ae9d 	bne.w	80016d8 <HAL_GPIO_Init+0x10>
  }
}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010000 	.word	0x40010000
 80019b4:	48000400 	.word	0x48000400
 80019b8:	48000800 	.word	0x48000800
 80019bc:	48000c00 	.word	0x48000c00
 80019c0:	48001000 	.word	0x48001000
 80019c4:	48001400 	.word	0x48001400
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f806 	bl	8001a2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40010400 	.word	0x40010400

08001a2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e081      	b.n	8001b58 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d106      	bne.n	8001a6e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff f905 	bl	8000c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2224      	movs	r2, #36	; 0x24
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0201 	bic.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a92:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aa2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d107      	bne.n	8001abc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	e006      	b.n	8001aca <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ac8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d104      	bne.n	8001adc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ada:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001afe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69d9      	ldr	r1, [r3, #28]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1a      	ldr	r2, [r3, #32]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2220      	movs	r2, #32
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	4608      	mov	r0, r1
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	817b      	strh	r3, [r7, #10]
 8001b72:	460b      	mov	r3, r1
 8001b74:	813b      	strh	r3, [r7, #8]
 8001b76:	4613      	mov	r3, r2
 8001b78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	f040 80f9 	bne.w	8001d7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <HAL_I2C_Mem_Write+0x34>
 8001b8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0ed      	b.n	8001d7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_I2C_Mem_Write+0x4e>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e0e6      	b.n	8001d7c <HAL_I2C_Mem_Write+0x21c>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bb6:	f7ff fc49 	bl	800144c <HAL_GetTick>
 8001bba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2319      	movs	r3, #25
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 fbcb 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0d1      	b.n	8001d7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2221      	movs	r2, #33	; 0x21
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2240      	movs	r2, #64	; 0x40
 8001be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a3a      	ldr	r2, [r7, #32]
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c00:	88f8      	ldrh	r0, [r7, #6]
 8001c02:	893a      	ldrh	r2, [r7, #8]
 8001c04:	8979      	ldrh	r1, [r7, #10]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	4603      	mov	r3, r0
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 fadb 	bl	80021cc <I2C_RequestMemoryWrite>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0a9      	b.n	8001d7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2bff      	cmp	r3, #255	; 0xff
 8001c30:	d90e      	bls.n	8001c50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	22ff      	movs	r2, #255	; 0xff
 8001c36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	8979      	ldrh	r1, [r7, #10]
 8001c40:	2300      	movs	r3, #0
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fd33 	bl	80026b4 <I2C_TransferConfig>
 8001c4e:	e00f      	b.n	8001c70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	8979      	ldrh	r1, [r7, #10]
 8001c62:	2300      	movs	r3, #0
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 fd22 	bl	80026b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 fbb5 	bl	80023e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e07b      	b.n	8001d7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d034      	beq.n	8001d28 <HAL_I2C_Mem_Write+0x1c8>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d130      	bne.n	8001d28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2180      	movs	r1, #128	; 0x80
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 fb47 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e04d      	b.n	8001d7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2bff      	cmp	r3, #255	; 0xff
 8001ce8:	d90e      	bls.n	8001d08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	22ff      	movs	r2, #255	; 0xff
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	8979      	ldrh	r1, [r7, #10]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fcd7 	bl	80026b4 <I2C_TransferConfig>
 8001d06:	e00f      	b.n	8001d28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	8979      	ldrh	r1, [r7, #10]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 fcc6 	bl	80026b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d19e      	bne.n	8001c70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fb94 	bl	8002464 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e01a      	b.n	8001d7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_I2C_Mem_Write+0x224>)
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
  }
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	fe00e800 	.word	0xfe00e800

08001d88 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	4608      	mov	r0, r1
 8001d92:	4611      	mov	r1, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	817b      	strh	r3, [r7, #10]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	813b      	strh	r3, [r7, #8]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	f040 80fd 	bne.w	8001faa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <HAL_I2C_Mem_Read+0x34>
 8001db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0f1      	b.n	8001fac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2C_Mem_Read+0x4e>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e0ea      	b.n	8001fac <HAL_I2C_Mem_Read+0x224>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dde:	f7ff fb35 	bl	800144c <HAL_GetTick>
 8001de2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2319      	movs	r3, #25
 8001dea:	2201      	movs	r2, #1
 8001dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fab7 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0d5      	b.n	8001fac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2222      	movs	r2, #34	; 0x22
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2240      	movs	r2, #64	; 0x40
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a3a      	ldr	r2, [r7, #32]
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e28:	88f8      	ldrh	r0, [r7, #6]
 8001e2a:	893a      	ldrh	r2, [r7, #8]
 8001e2c:	8979      	ldrh	r1, [r7, #10]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	4603      	mov	r3, r0
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 fa1b 	bl	8002274 <I2C_RequestMemoryRead>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0ad      	b.n	8001fac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2bff      	cmp	r3, #255	; 0xff
 8001e58:	d90e      	bls.n	8001e78 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	22ff      	movs	r2, #255	; 0xff
 8001e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	8979      	ldrh	r1, [r7, #10]
 8001e68:	4b52      	ldr	r3, [pc, #328]	; (8001fb4 <HAL_I2C_Mem_Read+0x22c>)
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 fc1f 	bl	80026b4 <I2C_TransferConfig>
 8001e76:	e00f      	b.n	8001e98 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	8979      	ldrh	r1, [r7, #10]
 8001e8a:	4b4a      	ldr	r3, [pc, #296]	; (8001fb4 <HAL_I2C_Mem_Read+0x22c>)
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 fc0e 	bl	80026b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2104      	movs	r1, #4
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fa5e 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07c      	b.n	8001fac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d034      	beq.n	8001f58 <HAL_I2C_Mem_Read+0x1d0>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d130      	bne.n	8001f58 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	2200      	movs	r2, #0
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 fa2f 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e04d      	b.n	8001fac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2bff      	cmp	r3, #255	; 0xff
 8001f18:	d90e      	bls.n	8001f38 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	22ff      	movs	r2, #255	; 0xff
 8001f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	8979      	ldrh	r1, [r7, #10]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fbbf 	bl	80026b4 <I2C_TransferConfig>
 8001f36:	e00f      	b.n	8001f58 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	8979      	ldrh	r1, [r7, #10]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 fbae 	bl	80026b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d19a      	bne.n	8001e98 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fa7c 	bl	8002464 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e01a      	b.n	8001fac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6859      	ldr	r1, [r3, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_I2C_Mem_Read+0x230>)
 8001f8a:	400b      	ands	r3, r1
 8001f8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
  }
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	80002400 	.word	0x80002400
 8001fb8:	fe00e800 	.word	0xfe00e800

08001fbc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	f040 80f1 	bne.w	80021c0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e0e7      	b.n	80021c2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_I2C_IsDeviceReady+0x44>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e0e0      	b.n	80021c2 <HAL_I2C_IsDeviceReady+0x206>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2224      	movs	r2, #36	; 0x24
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d107      	bne.n	800202e <HAL_I2C_IsDeviceReady+0x72>
 800201e:	897b      	ldrh	r3, [r7, #10]
 8002020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002024:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002028:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800202c:	e004      	b.n	8002038 <HAL_I2C_IsDeviceReady+0x7c>
 800202e:	897b      	ldrh	r3, [r7, #10]
 8002030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002034:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800203e:	f7ff fa05 	bl	800144c <HAL_GetTick>
 8002042:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b20      	cmp	r3, #32
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b10      	cmp	r3, #16
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002070:	e034      	b.n	80020dc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d01a      	beq.n	80020b0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800207a:	f7ff f9e7 	bl	800144c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d302      	bcc.n	8002090 <HAL_I2C_IsDeviceReady+0xd4>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10f      	bne.n	80020b0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	f043 0220 	orr.w	r2, r3, #32
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e088      	b.n	80021c2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	bf0c      	ite	eq
 80020be:	2301      	moveq	r3, #1
 80020c0:	2300      	movne	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b10      	cmp	r3, #16
 80020d2:	bf0c      	ite	eq
 80020d4:	2301      	moveq	r3, #1
 80020d6:	2300      	movne	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80020dc:	7ffb      	ldrb	r3, [r7, #31]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <HAL_I2C_IsDeviceReady+0x12c>
 80020e2:	7fbb      	ldrb	r3, [r7, #30]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0c4      	beq.n	8002072 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d01a      	beq.n	800212c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2200      	movs	r2, #0
 80020fe:	2120      	movs	r1, #32
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f92f 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e058      	b.n	80021c2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2220      	movs	r2, #32
 8002116:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e04a      	b.n	80021c2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2200      	movs	r2, #0
 8002134:	2120      	movs	r1, #32
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f914 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e03d      	b.n	80021c2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2210      	movs	r2, #16
 800214c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2220      	movs	r2, #32
 8002154:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	d118      	bne.n	8002190 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800216c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2200      	movs	r2, #0
 8002176:	2120      	movs	r1, #32
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f8f3 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e01c      	b.n	80021c2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2220      	movs	r2, #32
 800218e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3301      	adds	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	f63f af3b 	bhi.w	8002016 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	f043 0220 	orr.w	r2, r3, #32
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80021c0:	2302      	movs	r3, #2
  }
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	4608      	mov	r0, r1
 80021d6:	4611      	mov	r1, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	4603      	mov	r3, r0
 80021dc:	817b      	strh	r3, [r7, #10]
 80021de:	460b      	mov	r3, r1
 80021e0:	813b      	strh	r3, [r7, #8]
 80021e2:	4613      	mov	r3, r2
 80021e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	8979      	ldrh	r1, [r7, #10]
 80021ec:	4b20      	ldr	r3, [pc, #128]	; (8002270 <I2C_RequestMemoryWrite+0xa4>)
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fa5d 	bl	80026b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	69b9      	ldr	r1, [r7, #24]
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f8f0 	bl	80023e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e02c      	b.n	8002268 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d105      	bne.n	8002220 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002214:	893b      	ldrh	r3, [r7, #8]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
 800221e:	e015      	b.n	800224c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002220:	893b      	ldrh	r3, [r7, #8]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	b29b      	uxth	r3, r3
 8002226:	b2da      	uxtb	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	69b9      	ldr	r1, [r7, #24]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f8d6 	bl	80023e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e012      	b.n	8002268 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002242:	893b      	ldrh	r3, [r7, #8]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2200      	movs	r2, #0
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f884 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	80002000 	.word	0x80002000

08002274 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	461a      	mov	r2, r3
 8002282:	4603      	mov	r3, r0
 8002284:	817b      	strh	r3, [r7, #10]
 8002286:	460b      	mov	r3, r1
 8002288:	813b      	strh	r3, [r7, #8]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	8979      	ldrh	r1, [r7, #10]
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <I2C_RequestMemoryRead+0xa4>)
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2300      	movs	r3, #0
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 fa0a 	bl	80026b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f89d 	bl	80023e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e02c      	b.n	800230e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022ba:	893b      	ldrh	r3, [r7, #8]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
 80022c4:	e015      	b.n	80022f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022c6:	893b      	ldrh	r3, [r7, #8]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	69b9      	ldr	r1, [r7, #24]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f883 	bl	80023e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e012      	b.n	800230e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022e8:	893b      	ldrh	r3, [r7, #8]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2200      	movs	r2, #0
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 f831 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	80002000 	.word	0x80002000

0800231c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b02      	cmp	r3, #2
 8002330:	d103      	bne.n	800233a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d007      	beq.n	8002358 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	619a      	str	r2, [r3, #24]
  }
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002374:	e022      	b.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d01e      	beq.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237e:	f7ff f865 	bl	800144c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d302      	bcc.n	8002394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d113      	bne.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e00f      	b.n	80023dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4013      	ands	r3, r2
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d0cd      	beq.n	8002376 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023f0:	e02c      	b.n	800244c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f870 	bl	80024dc <I2C_IsErrorOccurred>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e02a      	b.n	800245c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d01e      	beq.n	800244c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240e:	f7ff f81d 	bl	800144c <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	429a      	cmp	r2, r3
 800241c:	d302      	bcc.n	8002424 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d113      	bne.n	800244c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	f043 0220 	orr.w	r2, r3, #32
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e007      	b.n	800245c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b02      	cmp	r3, #2
 8002458:	d1cb      	bne.n	80023f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002470:	e028      	b.n	80024c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f830 	bl	80024dc <I2C_IsErrorOccurred>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e026      	b.n	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002486:	f7fe ffe1 	bl	800144c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	429a      	cmp	r2, r3
 8002494:	d302      	bcc.n	800249c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d113      	bne.n	80024c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	f043 0220 	orr.w	r2, r3, #32
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e007      	b.n	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d1cf      	bne.n	8002472 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d075      	beq.n	80025f4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2210      	movs	r2, #16
 800250e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002510:	e056      	b.n	80025c0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d052      	beq.n	80025c0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800251a:	f7fe ff97 	bl	800144c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <I2C_IsErrorOccurred+0x54>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d147      	bne.n	80025c0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002542:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002552:	d12e      	bne.n	80025b2 <I2C_IsErrorOccurred+0xd6>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800255a:	d02a      	beq.n	80025b2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	2b20      	cmp	r3, #32
 8002560:	d027      	beq.n	80025b2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002570:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002572:	f7fe ff6b 	bl	800144c <HAL_GetTick>
 8002576:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002578:	e01b      	b.n	80025b2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800257a:	f7fe ff67 	bl	800144c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b19      	cmp	r3, #25
 8002586:	d914      	bls.n	80025b2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d1dc      	bne.n	800257a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	d003      	beq.n	80025d6 <I2C_IsErrorOccurred+0xfa>
 80025ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d09d      	beq.n	8002512 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2220      	movs	r2, #32
 80025e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002616:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00b      	beq.n	8002640 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	f043 0308 	orr.w	r3, r3, #8
 800262e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002638:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01c      	beq.n	80026a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f7ff fe56 	bl	800231c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <I2C_IsErrorOccurred+0x1d4>)
 800267c:	400b      	ands	r3, r1
 800267e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	431a      	orrs	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3728      	adds	r7, #40	; 0x28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	fe00e800 	.word	0xfe00e800

080026b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	817b      	strh	r3, [r7, #10]
 80026c2:	4613      	mov	r3, r2
 80026c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026cc:	7a7b      	ldrb	r3, [r7, #9]
 80026ce:	041b      	lsls	r3, r3, #16
 80026d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026d4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	4313      	orrs	r3, r2
 80026de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026e2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	0d5b      	lsrs	r3, r3, #21
 80026ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <I2C_TransferConfig+0x60>)
 80026f4:	430b      	orrs	r3, r1
 80026f6:	43db      	mvns	r3, r3
 80026f8:	ea02 0103 	and.w	r1, r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	03ff63ff 	.word	0x03ff63ff

08002718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b20      	cmp	r3, #32
 800272c:	d138      	bne.n	80027a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002738:	2302      	movs	r3, #2
 800273a:	e032      	b.n	80027a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	; 0x24
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800276a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d139      	bne.n	8002838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e033      	b.n	800283a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2224      	movs	r2, #36	; 0x24
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d141      	bne.n	80028da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002856:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002862:	d131      	bne.n	80028c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002864:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800286a:	4a46      	ldr	r2, [pc, #280]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002874:	4b43      	ldr	r3, [pc, #268]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800287c:	4a41      	ldr	r2, [pc, #260]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002882:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002884:	4b40      	ldr	r3, [pc, #256]	; (8002988 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2232      	movs	r2, #50	; 0x32
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	4a3f      	ldr	r2, [pc, #252]	; (800298c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	0c9b      	lsrs	r3, r3, #18
 8002896:	3301      	adds	r3, #1
 8002898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800289a:	e002      	b.n	80028a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3b01      	subs	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a2:	4b38      	ldr	r3, [pc, #224]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ae:	d102      	bne.n	80028b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f2      	bne.n	800289c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028b6:	4b33      	ldr	r3, [pc, #204]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c2:	d158      	bne.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e057      	b.n	8002978 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028c8:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ce:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80028d8:	e04d      	b.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e0:	d141      	bne.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028e2:	4b28      	ldr	r3, [pc, #160]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ee:	d131      	bne.n	8002954 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028f0:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f6:	4a23      	ldr	r2, [pc, #140]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002900:	4b20      	ldr	r3, [pc, #128]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002908:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2232      	movs	r2, #50	; 0x32
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	4a1c      	ldr	r2, [pc, #112]	; (800298c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800291c:	fba2 2303 	umull	r2, r3, r2, r3
 8002920:	0c9b      	lsrs	r3, r3, #18
 8002922:	3301      	adds	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002926:	e002      	b.n	800292e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3b01      	subs	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293a:	d102      	bne.n	8002942 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f2      	bne.n	8002928 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294e:	d112      	bne.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e011      	b.n	8002978 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002960:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002964:	e007      	b.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002966:	4b07      	ldr	r3, [pc, #28]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800296e:	4a05      	ldr	r2, [pc, #20]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002970:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002974:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	40007000 	.word	0x40007000
 8002988:	20000000 	.word	0x20000000
 800298c:	431bde83 	.word	0x431bde83

08002990 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800299a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299e:	6093      	str	r3, [r2, #8]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40007000 	.word	0x40007000

080029b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e308      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d075      	beq.n	8002aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ce:	4ba3      	ldr	r3, [pc, #652]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d8:	4ba0      	ldr	r3, [pc, #640]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b0c      	cmp	r3, #12
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_OscConfig+0x3e>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d002      	beq.n	80029f4 <HAL_RCC_OscConfig+0x44>
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d10b      	bne.n	8002a0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	4b99      	ldr	r3, [pc, #612]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d05b      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x108>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d157      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e2e3      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a14:	d106      	bne.n	8002a24 <HAL_RCC_OscConfig+0x74>
 8002a16:	4b91      	ldr	r3, [pc, #580]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a90      	ldr	r2, [pc, #576]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e01d      	b.n	8002a60 <HAL_RCC_OscConfig+0xb0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x98>
 8002a2e:	4b8b      	ldr	r3, [pc, #556]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a8a      	ldr	r2, [pc, #552]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a87      	ldr	r2, [pc, #540]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e00b      	b.n	8002a60 <HAL_RCC_OscConfig+0xb0>
 8002a48:	4b84      	ldr	r3, [pc, #528]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a83      	ldr	r2, [pc, #524]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b81      	ldr	r3, [pc, #516]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a80      	ldr	r2, [pc, #512]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d013      	beq.n	8002a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7fe fcf0 	bl	800144c <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a70:	f7fe fcec 	bl	800144c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e2a8      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a82:	4b76      	ldr	r3, [pc, #472]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0xc0>
 8002a8e:	e014      	b.n	8002aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fcdc 	bl	800144c <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe fcd8 	bl	800144c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e294      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aaa:	4b6c      	ldr	r3, [pc, #432]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0xe8>
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d075      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac6:	4b65      	ldr	r3, [pc, #404]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ad0:	4b62      	ldr	r3, [pc, #392]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d102      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x136>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_OscConfig+0x13c>
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d11f      	bne.n	8002b2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aec:	4b5b      	ldr	r3, [pc, #364]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_OscConfig+0x154>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e267      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	4b55      	ldr	r3, [pc, #340]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	4952      	ldr	r1, [pc, #328]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b18:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <HAL_RCC_OscConfig+0x2b0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fc49 	bl	80013b4 <HAL_InitTick>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d043      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e253      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d023      	beq.n	8002b7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b34:	4b49      	ldr	r3, [pc, #292]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a48      	ldr	r2, [pc, #288]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fc84 	bl	800144c <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b48:	f7fe fc80 	bl	800144c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e23c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b5a:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	061b      	lsls	r3, r3, #24
 8002b74:	4939      	ldr	r1, [pc, #228]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
 8002b7a:	e01a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7c:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a36      	ldr	r2, [pc, #216]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe fc60 	bl	800144c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b90:	f7fe fc5c 	bl	800144c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e218      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba2:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1e0>
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d03c      	beq.n	8002c38 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01c      	beq.n	8002c00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc6:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bcc:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fc39 	bl	800144c <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bde:	f7fe fc35 	bl	800144c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1f1      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ef      	beq.n	8002bde <HAL_RCC_OscConfig+0x22e>
 8002bfe:	e01b      	b.n	8002c38 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c06:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7fe fc1c 	bl	800144c <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c18:	f7fe fc18 	bl	800144c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1d4      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ef      	bne.n	8002c18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80ab 	beq.w	8002d9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2b4>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e005      	b.n	8002c66 <HAL_RCC_OscConfig+0x2b6>
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	20000004 	.word	0x20000004
 8002c64:	2300      	movs	r3, #0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4baf      	ldr	r3, [pc, #700]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	4aae      	ldr	r2, [pc, #696]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	6593      	str	r3, [r2, #88]	; 0x58
 8002c76:	4bac      	ldr	r3, [pc, #688]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c82:	2301      	movs	r3, #1
 8002c84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c86:	4ba9      	ldr	r3, [pc, #676]	; (8002f2c <HAL_RCC_OscConfig+0x57c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c92:	4ba6      	ldr	r3, [pc, #664]	; (8002f2c <HAL_RCC_OscConfig+0x57c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4aa5      	ldr	r2, [pc, #660]	; (8002f2c <HAL_RCC_OscConfig+0x57c>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fbd5 	bl	800144c <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fe fbd1 	bl	800144c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e18d      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb8:	4b9c      	ldr	r3, [pc, #624]	; (8002f2c <HAL_RCC_OscConfig+0x57c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d108      	bne.n	8002cde <HAL_RCC_OscConfig+0x32e>
 8002ccc:	4b96      	ldr	r3, [pc, #600]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	4a95      	ldr	r2, [pc, #596]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cdc:	e024      	b.n	8002d28 <HAL_RCC_OscConfig+0x378>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d110      	bne.n	8002d08 <HAL_RCC_OscConfig+0x358>
 8002ce6:	4b90      	ldr	r3, [pc, #576]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cec:	4a8e      	ldr	r2, [pc, #568]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf6:	4b8c      	ldr	r3, [pc, #560]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	4a8a      	ldr	r2, [pc, #552]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d06:	e00f      	b.n	8002d28 <HAL_RCC_OscConfig+0x378>
 8002d08:	4b87      	ldr	r3, [pc, #540]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	4a86      	ldr	r2, [pc, #536]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d18:	4b83      	ldr	r3, [pc, #524]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	4a82      	ldr	r2, [pc, #520]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002d20:	f023 0304 	bic.w	r3, r3, #4
 8002d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d016      	beq.n	8002d5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe fb8c 	bl	800144c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe fb88 	bl	800144c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e142      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d4e:	4b76      	ldr	r3, [pc, #472]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ed      	beq.n	8002d38 <HAL_RCC_OscConfig+0x388>
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fe fb75 	bl	800144c <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fe fb71 	bl	800144c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e12b      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ed      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d8a:	7ffb      	ldrb	r3, [r7, #31]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d90:	4b65      	ldr	r3, [pc, #404]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	4a64      	ldr	r2, [pc, #400]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d03c      	beq.n	8002e22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01c      	beq.n	8002dea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002db0:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002db6:	4a5c      	ldr	r2, [pc, #368]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe fb44 	bl	800144c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dc8:	f7fe fb40 	bl	800144c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e0fc      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dda:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0ef      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x418>
 8002de8:	e01b      	b.n	8002e22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dea:	4b4f      	ldr	r3, [pc, #316]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df0:	4a4d      	ldr	r2, [pc, #308]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7fe fb27 	bl	800144c <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e02:	f7fe fb23 	bl	800144c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0df      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e14:	4b44      	ldr	r3, [pc, #272]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ef      	bne.n	8002e02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80d3 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e2c:	4b3e      	ldr	r3, [pc, #248]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	f000 808d 	beq.w	8002f54 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d15a      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a38      	ldr	r2, [pc, #224]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4e:	f7fe fafd 	bl	800144c <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e56:	f7fe faf9 	bl	800144c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0b5      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e68:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f0      	bne.n	8002e56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e74:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_RCC_OscConfig+0x580>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6a11      	ldr	r1, [r2, #32]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e84:	3a01      	subs	r2, #1
 8002e86:	0112      	lsls	r2, r2, #4
 8002e88:	4311      	orrs	r1, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e8e:	0212      	lsls	r2, r2, #8
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e96:	0852      	lsrs	r2, r2, #1
 8002e98:	3a01      	subs	r2, #1
 8002e9a:	0552      	lsls	r2, r2, #21
 8002e9c:	4311      	orrs	r1, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ea2:	0852      	lsrs	r2, r2, #1
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	0652      	lsls	r2, r2, #25
 8002ea8:	4311      	orrs	r1, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002eae:	06d2      	lsls	r2, r2, #27
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	491d      	ldr	r1, [pc, #116]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1a      	ldr	r2, [pc, #104]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ece:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fabc 	bl	800144c <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe fab8 	bl	800144c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e074      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x528>
 8002ef6:	e06c      	b.n	8002fd2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f02:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <HAL_RCC_OscConfig+0x578>)
 8002f16:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe fa94 	bl	800144c <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f26:	e00e      	b.n	8002f46 <HAL_RCC_OscConfig+0x596>
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40007000 	.word	0x40007000
 8002f30:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f34:	f7fe fa8a 	bl	800144c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e046      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f46:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <HAL_RCC_OscConfig+0x62c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x584>
 8002f52:	e03e      	b.n	8002fd2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e039      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f60:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <HAL_RCC_OscConfig+0x62c>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0203 	and.w	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d12c      	bne.n	8002fce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d123      	bne.n	8002fce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d11b      	bne.n	8002fce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d113      	bne.n	8002fce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	085b      	lsrs	r3, r3, #1
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d109      	bne.n	8002fce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3720      	adds	r7, #32
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e11e      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b91      	ldr	r3, [pc, #580]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d910      	bls.n	8003028 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b8e      	ldr	r3, [pc, #568]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 020f 	bic.w	r2, r3, #15
 800300e:	498c      	ldr	r1, [pc, #560]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b8a      	ldr	r3, [pc, #552]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e106      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d073      	beq.n	800311c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d129      	bne.n	8003090 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303c:	4b81      	ldr	r3, [pc, #516]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0f4      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800304c:	f000 f99e 	bl	800338c <RCC_GetSysClockFreqFromPLLSource>
 8003050:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4a7c      	ldr	r2, [pc, #496]	; (8003248 <HAL_RCC_ClockConfig+0x268>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d93f      	bls.n	80030da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800305a:	4b7a      	ldr	r3, [pc, #488]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800306e:	2b00      	cmp	r3, #0
 8003070:	d033      	beq.n	80030da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003076:	2b00      	cmp	r3, #0
 8003078:	d12f      	bne.n	80030da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800307a:	4b72      	ldr	r3, [pc, #456]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003082:	4a70      	ldr	r2, [pc, #448]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 8003084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003088:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	e024      	b.n	80030da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003098:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d109      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0c6      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a8:	4b66      	ldr	r3, [pc, #408]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0be      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80030b8:	f000 f8ce 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4a61      	ldr	r2, [pc, #388]	; (8003248 <HAL_RCC_ClockConfig+0x268>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d909      	bls.n	80030da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030c6:	4b5f      	ldr	r3, [pc, #380]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ce:	4a5d      	ldr	r2, [pc, #372]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80030d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030da:	4b5a      	ldr	r3, [pc, #360]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f023 0203 	bic.w	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4957      	ldr	r1, [pc, #348]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fe f9ae 	bl	800144c <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f2:	e00a      	b.n	800310a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f4:	f7fe f9aa 	bl	800144c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e095      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	4b4e      	ldr	r3, [pc, #312]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 020c 	and.w	r2, r3, #12
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	429a      	cmp	r2, r3
 800311a:	d1eb      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d023      	beq.n	8003170 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003134:	4b43      	ldr	r3, [pc, #268]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a42      	ldr	r2, [pc, #264]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800313a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800313e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800314c:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003154:	4a3b      	ldr	r2, [pc, #236]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 8003156:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800315a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4936      	ldr	r1, [pc, #216]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
 800316e:	e008      	b.n	8003182 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d105      	bne.n	8003182 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003176:	4b33      	ldr	r3, [pc, #204]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	4a32      	ldr	r2, [pc, #200]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 800317c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003180:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003182:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d21d      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 020f 	bic.w	r2, r3, #15
 8003198:	4929      	ldr	r1, [pc, #164]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031a0:	f7fe f954 	bl	800144c <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	e00a      	b.n	80031be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a8:	f7fe f950 	bl	800144c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e03b      	b.n	8003236 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <HAL_RCC_ClockConfig+0x260>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1ed      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4917      	ldr	r1, [pc, #92]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490f      	ldr	r1, [pc, #60]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800320a:	f000 f825 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <HAL_RCC_ClockConfig+0x264>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490c      	ldr	r1, [pc, #48]	; (800324c <HAL_RCC_ClockConfig+0x26c>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x270>)
 8003228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x274>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe f8c0 	bl	80013b4 <HAL_InitTick>
 8003234:	4603      	mov	r3, r0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40022000 	.word	0x40022000
 8003244:	40021000 	.word	0x40021000
 8003248:	04c4b400 	.word	0x04c4b400
 800324c:	080044a0 	.word	0x080044a0
 8003250:	20000000 	.word	0x20000000
 8003254:	20000004 	.word	0x20000004

08003258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800325e:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b04      	cmp	r3, #4
 8003268:	d102      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800326a:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_RCC_GetSysClockFreq+0xbc>)
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	e047      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	d102      	bne.n	8003282 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800327c:	4b26      	ldr	r3, [pc, #152]	; (8003318 <HAL_RCC_GetSysClockFreq+0xc0>)
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e03e      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003282:	4b23      	ldr	r3, [pc, #140]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b0c      	cmp	r3, #12
 800328c:	d136      	bne.n	80032fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	3301      	adds	r3, #1
 80032a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d10c      	bne.n	80032c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032ac:	4a1a      	ldr	r2, [pc, #104]	; (8003318 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	4a16      	ldr	r2, [pc, #88]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032b6:	68d2      	ldr	r2, [r2, #12]
 80032b8:	0a12      	lsrs	r2, r2, #8
 80032ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	617b      	str	r3, [r7, #20]
      break;
 80032c4:	e00c      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032c6:	4a13      	ldr	r2, [pc, #76]	; (8003314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	4a10      	ldr	r2, [pc, #64]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d0:	68d2      	ldr	r2, [r2, #12]
 80032d2:	0a12      	lsrs	r2, r2, #8
 80032d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]
      break;
 80032de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0e5b      	lsrs	r3, r3, #25
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	3301      	adds	r3, #1
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	e001      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003300:	693b      	ldr	r3, [r7, #16]
}
 8003302:	4618      	mov	r0, r3
 8003304:	371c      	adds	r7, #28
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	00f42400 	.word	0x00f42400
 8003318:	016e3600 	.word	0x016e3600

0800331c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b03      	ldr	r3, [pc, #12]	; (8003330 <HAL_RCC_GetHCLKFreq+0x14>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000000 	.word	0x20000000

08003334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003338:	f7ff fff0 	bl	800331c <HAL_RCC_GetHCLKFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	4904      	ldr	r1, [pc, #16]	; (800335c <HAL_RCC_GetPCLK1Freq+0x28>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000
 800335c:	080044b0 	.word	0x080044b0

08003360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003364:	f7ff ffda 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCC_GetPCLK2Freq+0x24>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	0adb      	lsrs	r3, r3, #11
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	4904      	ldr	r1, [pc, #16]	; (8003388 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003376:	5ccb      	ldrb	r3, [r1, r3]
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40021000 	.word	0x40021000
 8003388:	080044b0 	.word	0x080044b0

0800338c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003392:	4b1e      	ldr	r3, [pc, #120]	; (800340c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	3301      	adds	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d10c      	bne.n	80033ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033b0:	4a17      	ldr	r2, [pc, #92]	; (8003410 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	4a14      	ldr	r2, [pc, #80]	; (800340c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033ba:	68d2      	ldr	r2, [r2, #12]
 80033bc:	0a12      	lsrs	r2, r2, #8
 80033be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	617b      	str	r3, [r7, #20]
    break;
 80033c8:	e00c      	b.n	80033e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033ca:	4a12      	ldr	r2, [pc, #72]	; (8003414 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	4a0e      	ldr	r2, [pc, #56]	; (800340c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033d4:	68d2      	ldr	r2, [r2, #12]
 80033d6:	0a12      	lsrs	r2, r2, #8
 80033d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033dc:	fb02 f303 	mul.w	r3, r2, r3
 80033e0:	617b      	str	r3, [r7, #20]
    break;
 80033e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	0e5b      	lsrs	r3, r3, #25
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	3301      	adds	r3, #1
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80033fe:	687b      	ldr	r3, [r7, #4]
}
 8003400:	4618      	mov	r0, r3
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	40021000 	.word	0x40021000
 8003410:	016e3600 	.word	0x016e3600
 8003414:	00f42400 	.word	0x00f42400

08003418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003420:	2300      	movs	r3, #0
 8003422:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003424:	2300      	movs	r3, #0
 8003426:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8098 	beq.w	8003566 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003436:	2300      	movs	r3, #0
 8003438:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343a:	4b43      	ldr	r3, [pc, #268]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10d      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	4b40      	ldr	r3, [pc, #256]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	4a3f      	ldr	r2, [pc, #252]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800344c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003450:	6593      	str	r3, [r2, #88]	; 0x58
 8003452:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345e:	2301      	movs	r3, #1
 8003460:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003462:	4b3a      	ldr	r3, [pc, #232]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a39      	ldr	r2, [pc, #228]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800346e:	f7fd ffed 	bl	800144c <HAL_GetTick>
 8003472:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003474:	e009      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003476:	f7fd ffe9 	bl	800144c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d902      	bls.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	74fb      	strb	r3, [r7, #19]
        break;
 8003488:	e005      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800348a:	4b30      	ldr	r3, [pc, #192]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0ef      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d159      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800349c:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01e      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d019      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034b8:	4b23      	ldr	r3, [pc, #140]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034c4:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	4a1f      	ldr	r2, [pc, #124]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034d4:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034e4:	4a18      	ldr	r2, [pc, #96]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d016      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fd ffa9 	bl	800144c <HAL_GetTick>
 80034fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034fc:	e00b      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fd ffa5 	bl	800144c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	; 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d902      	bls.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	74fb      	strb	r3, [r7, #19]
            break;
 8003514:	e006      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ec      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10b      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003538:	4903      	ldr	r1, [pc, #12]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003540:	e008      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	74bb      	strb	r3, [r7, #18]
 8003546:	e005      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003548:	40021000 	.word	0x40021000
 800354c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003554:	7c7b      	ldrb	r3, [r7, #17]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d105      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355a:	4bac      	ldr	r3, [pc, #688]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800355c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355e:	4aab      	ldr	r2, [pc, #684]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003564:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003572:	4ba6      	ldr	r3, [pc, #664]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f023 0203 	bic.w	r2, r3, #3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	49a2      	ldr	r1, [pc, #648]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003594:	4b9d      	ldr	r3, [pc, #628]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f023 020c 	bic.w	r2, r3, #12
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	499a      	ldr	r1, [pc, #616]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035b6:	4b95      	ldr	r3, [pc, #596]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4991      	ldr	r1, [pc, #580]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035d8:	4b8c      	ldr	r3, [pc, #560]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	4989      	ldr	r1, [pc, #548]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035fa:	4b84      	ldr	r3, [pc, #528]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	4980      	ldr	r1, [pc, #512]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800361c:	4b7b      	ldr	r3, [pc, #492]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	4978      	ldr	r1, [pc, #480]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800363e:	4b73      	ldr	r3, [pc, #460]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	496f      	ldr	r1, [pc, #444]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003660:	4b6a      	ldr	r3, [pc, #424]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4967      	ldr	r1, [pc, #412]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003682:	4b62      	ldr	r3, [pc, #392]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	495e      	ldr	r1, [pc, #376]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036a4:	4b59      	ldr	r3, [pc, #356]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	4956      	ldr	r1, [pc, #344]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d015      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036c6:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	494d      	ldr	r1, [pc, #308]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e4:	d105      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e6:	4b49      	ldr	r3, [pc, #292]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	4a48      	ldr	r2, [pc, #288]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80036ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d015      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036fe:	4b43      	ldr	r3, [pc, #268]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	493f      	ldr	r1, [pc, #252]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800371c:	d105      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800371e:	4b3b      	ldr	r3, [pc, #236]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	4a3a      	ldr	r2, [pc, #232]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003728:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d015      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003736:	4b35      	ldr	r3, [pc, #212]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003744:	4931      	ldr	r1, [pc, #196]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003754:	d105      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003756:	4b2d      	ldr	r3, [pc, #180]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	4a2c      	ldr	r2, [pc, #176]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800375c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003760:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d015      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800376e:	4b27      	ldr	r3, [pc, #156]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	4923      	ldr	r1, [pc, #140]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800378c:	d105      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378e:	4b1f      	ldr	r3, [pc, #124]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	4a1e      	ldr	r2, [pc, #120]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003798:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d015      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	4915      	ldr	r1, [pc, #84]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037c4:	d105      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d018      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	4907      	ldr	r1, [pc, #28]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037fc:	d108      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037fe:	4b03      	ldr	r3, [pc, #12]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	4a02      	ldr	r2, [pc, #8]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003808:	60d3      	str	r3, [r2, #12]
 800380a:	e001      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800380c:	40021000 	.word	0x40021000
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d015      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	4918      	ldr	r1, [pc, #96]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d105      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800383c:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a12      	ldr	r2, [pc, #72]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003846:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d015      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003854:	4b0d      	ldr	r3, [pc, #52]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800385a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	490a      	ldr	r1, [pc, #40]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003872:	d105      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4a04      	ldr	r2, [pc, #16]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800387a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800387e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003880:	7cbb      	ldrb	r3, [r7, #18]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000

08003890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e042      	b.n	8003928 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fd fbb3 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2224      	movs	r2, #36	; 0x24
 80038be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f82c 	bl	8003930 <UART_SetConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e022      	b.n	8003928 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fae8 	bl	8003ec0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800390e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fb6f 	bl	8004004 <UART_CheckIdleState>
 8003926:	4603      	mov	r3, r0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003930:	b5b0      	push	{r4, r5, r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	4313      	orrs	r3, r2
 8003952:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4bb1      	ldr	r3, [pc, #708]	; (8003c20 <UART_SetConfig+0x2f0>)
 800395c:	4013      	ands	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	69f9      	ldr	r1, [r7, #28]
 8003964:	430b      	orrs	r3, r1
 8003966:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4aa6      	ldr	r2, [pc, #664]	; (8003c24 <UART_SetConfig+0x2f4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d004      	beq.n	8003998 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	4313      	orrs	r3, r2
 8003996:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80039a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	69f9      	ldr	r1, [r7, #28]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	f023 010f 	bic.w	r1, r3, #15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a97      	ldr	r2, [pc, #604]	; (8003c28 <UART_SetConfig+0x2f8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d120      	bne.n	8003a12 <UART_SetConfig+0xe2>
 80039d0:	4b96      	ldr	r3, [pc, #600]	; (8003c2c <UART_SetConfig+0x2fc>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d816      	bhi.n	8003a0c <UART_SetConfig+0xdc>
 80039de:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <UART_SetConfig+0xb4>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003a01 	.word	0x08003a01
 80039ec:	080039fb 	.word	0x080039fb
 80039f0:	08003a07 	.word	0x08003a07
 80039f4:	2301      	movs	r3, #1
 80039f6:	76fb      	strb	r3, [r7, #27]
 80039f8:	e0e7      	b.n	8003bca <UART_SetConfig+0x29a>
 80039fa:	2302      	movs	r3, #2
 80039fc:	76fb      	strb	r3, [r7, #27]
 80039fe:	e0e4      	b.n	8003bca <UART_SetConfig+0x29a>
 8003a00:	2304      	movs	r3, #4
 8003a02:	76fb      	strb	r3, [r7, #27]
 8003a04:	e0e1      	b.n	8003bca <UART_SetConfig+0x29a>
 8003a06:	2308      	movs	r3, #8
 8003a08:	76fb      	strb	r3, [r7, #27]
 8003a0a:	e0de      	b.n	8003bca <UART_SetConfig+0x29a>
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	76fb      	strb	r3, [r7, #27]
 8003a10:	e0db      	b.n	8003bca <UART_SetConfig+0x29a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a86      	ldr	r2, [pc, #536]	; (8003c30 <UART_SetConfig+0x300>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d132      	bne.n	8003a82 <UART_SetConfig+0x152>
 8003a1c:	4b83      	ldr	r3, [pc, #524]	; (8003c2c <UART_SetConfig+0x2fc>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d828      	bhi.n	8003a7c <UART_SetConfig+0x14c>
 8003a2a:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <UART_SetConfig+0x100>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a65 	.word	0x08003a65
 8003a34:	08003a7d 	.word	0x08003a7d
 8003a38:	08003a7d 	.word	0x08003a7d
 8003a3c:	08003a7d 	.word	0x08003a7d
 8003a40:	08003a71 	.word	0x08003a71
 8003a44:	08003a7d 	.word	0x08003a7d
 8003a48:	08003a7d 	.word	0x08003a7d
 8003a4c:	08003a7d 	.word	0x08003a7d
 8003a50:	08003a6b 	.word	0x08003a6b
 8003a54:	08003a7d 	.word	0x08003a7d
 8003a58:	08003a7d 	.word	0x08003a7d
 8003a5c:	08003a7d 	.word	0x08003a7d
 8003a60:	08003a77 	.word	0x08003a77
 8003a64:	2300      	movs	r3, #0
 8003a66:	76fb      	strb	r3, [r7, #27]
 8003a68:	e0af      	b.n	8003bca <UART_SetConfig+0x29a>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	76fb      	strb	r3, [r7, #27]
 8003a6e:	e0ac      	b.n	8003bca <UART_SetConfig+0x29a>
 8003a70:	2304      	movs	r3, #4
 8003a72:	76fb      	strb	r3, [r7, #27]
 8003a74:	e0a9      	b.n	8003bca <UART_SetConfig+0x29a>
 8003a76:	2308      	movs	r3, #8
 8003a78:	76fb      	strb	r3, [r7, #27]
 8003a7a:	e0a6      	b.n	8003bca <UART_SetConfig+0x29a>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	76fb      	strb	r3, [r7, #27]
 8003a80:	e0a3      	b.n	8003bca <UART_SetConfig+0x29a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a6b      	ldr	r2, [pc, #428]	; (8003c34 <UART_SetConfig+0x304>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d120      	bne.n	8003ace <UART_SetConfig+0x19e>
 8003a8c:	4b67      	ldr	r3, [pc, #412]	; (8003c2c <UART_SetConfig+0x2fc>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a96:	2b30      	cmp	r3, #48	; 0x30
 8003a98:	d013      	beq.n	8003ac2 <UART_SetConfig+0x192>
 8003a9a:	2b30      	cmp	r3, #48	; 0x30
 8003a9c:	d814      	bhi.n	8003ac8 <UART_SetConfig+0x198>
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d009      	beq.n	8003ab6 <UART_SetConfig+0x186>
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d810      	bhi.n	8003ac8 <UART_SetConfig+0x198>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <UART_SetConfig+0x180>
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d006      	beq.n	8003abc <UART_SetConfig+0x18c>
 8003aae:	e00b      	b.n	8003ac8 <UART_SetConfig+0x198>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	76fb      	strb	r3, [r7, #27]
 8003ab4:	e089      	b.n	8003bca <UART_SetConfig+0x29a>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	76fb      	strb	r3, [r7, #27]
 8003aba:	e086      	b.n	8003bca <UART_SetConfig+0x29a>
 8003abc:	2304      	movs	r3, #4
 8003abe:	76fb      	strb	r3, [r7, #27]
 8003ac0:	e083      	b.n	8003bca <UART_SetConfig+0x29a>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	76fb      	strb	r3, [r7, #27]
 8003ac6:	e080      	b.n	8003bca <UART_SetConfig+0x29a>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	76fb      	strb	r3, [r7, #27]
 8003acc:	e07d      	b.n	8003bca <UART_SetConfig+0x29a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a59      	ldr	r2, [pc, #356]	; (8003c38 <UART_SetConfig+0x308>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d120      	bne.n	8003b1a <UART_SetConfig+0x1ea>
 8003ad8:	4b54      	ldr	r3, [pc, #336]	; (8003c2c <UART_SetConfig+0x2fc>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ae4:	d013      	beq.n	8003b0e <UART_SetConfig+0x1de>
 8003ae6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ae8:	d814      	bhi.n	8003b14 <UART_SetConfig+0x1e4>
 8003aea:	2b80      	cmp	r3, #128	; 0x80
 8003aec:	d009      	beq.n	8003b02 <UART_SetConfig+0x1d2>
 8003aee:	2b80      	cmp	r3, #128	; 0x80
 8003af0:	d810      	bhi.n	8003b14 <UART_SetConfig+0x1e4>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <UART_SetConfig+0x1cc>
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	d006      	beq.n	8003b08 <UART_SetConfig+0x1d8>
 8003afa:	e00b      	b.n	8003b14 <UART_SetConfig+0x1e4>
 8003afc:	2300      	movs	r3, #0
 8003afe:	76fb      	strb	r3, [r7, #27]
 8003b00:	e063      	b.n	8003bca <UART_SetConfig+0x29a>
 8003b02:	2302      	movs	r3, #2
 8003b04:	76fb      	strb	r3, [r7, #27]
 8003b06:	e060      	b.n	8003bca <UART_SetConfig+0x29a>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	76fb      	strb	r3, [r7, #27]
 8003b0c:	e05d      	b.n	8003bca <UART_SetConfig+0x29a>
 8003b0e:	2308      	movs	r3, #8
 8003b10:	76fb      	strb	r3, [r7, #27]
 8003b12:	e05a      	b.n	8003bca <UART_SetConfig+0x29a>
 8003b14:	2310      	movs	r3, #16
 8003b16:	76fb      	strb	r3, [r7, #27]
 8003b18:	e057      	b.n	8003bca <UART_SetConfig+0x29a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a47      	ldr	r2, [pc, #284]	; (8003c3c <UART_SetConfig+0x30c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d125      	bne.n	8003b70 <UART_SetConfig+0x240>
 8003b24:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <UART_SetConfig+0x2fc>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b32:	d017      	beq.n	8003b64 <UART_SetConfig+0x234>
 8003b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b38:	d817      	bhi.n	8003b6a <UART_SetConfig+0x23a>
 8003b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b3e:	d00b      	beq.n	8003b58 <UART_SetConfig+0x228>
 8003b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b44:	d811      	bhi.n	8003b6a <UART_SetConfig+0x23a>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <UART_SetConfig+0x222>
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4e:	d006      	beq.n	8003b5e <UART_SetConfig+0x22e>
 8003b50:	e00b      	b.n	8003b6a <UART_SetConfig+0x23a>
 8003b52:	2300      	movs	r3, #0
 8003b54:	76fb      	strb	r3, [r7, #27]
 8003b56:	e038      	b.n	8003bca <UART_SetConfig+0x29a>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	76fb      	strb	r3, [r7, #27]
 8003b5c:	e035      	b.n	8003bca <UART_SetConfig+0x29a>
 8003b5e:	2304      	movs	r3, #4
 8003b60:	76fb      	strb	r3, [r7, #27]
 8003b62:	e032      	b.n	8003bca <UART_SetConfig+0x29a>
 8003b64:	2308      	movs	r3, #8
 8003b66:	76fb      	strb	r3, [r7, #27]
 8003b68:	e02f      	b.n	8003bca <UART_SetConfig+0x29a>
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	76fb      	strb	r3, [r7, #27]
 8003b6e:	e02c      	b.n	8003bca <UART_SetConfig+0x29a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <UART_SetConfig+0x2f4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d125      	bne.n	8003bc6 <UART_SetConfig+0x296>
 8003b7a:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <UART_SetConfig+0x2fc>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b88:	d017      	beq.n	8003bba <UART_SetConfig+0x28a>
 8003b8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b8e:	d817      	bhi.n	8003bc0 <UART_SetConfig+0x290>
 8003b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b94:	d00b      	beq.n	8003bae <UART_SetConfig+0x27e>
 8003b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9a:	d811      	bhi.n	8003bc0 <UART_SetConfig+0x290>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <UART_SetConfig+0x278>
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba4:	d006      	beq.n	8003bb4 <UART_SetConfig+0x284>
 8003ba6:	e00b      	b.n	8003bc0 <UART_SetConfig+0x290>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	76fb      	strb	r3, [r7, #27]
 8003bac:	e00d      	b.n	8003bca <UART_SetConfig+0x29a>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	76fb      	strb	r3, [r7, #27]
 8003bb2:	e00a      	b.n	8003bca <UART_SetConfig+0x29a>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	76fb      	strb	r3, [r7, #27]
 8003bb8:	e007      	b.n	8003bca <UART_SetConfig+0x29a>
 8003bba:	2308      	movs	r3, #8
 8003bbc:	76fb      	strb	r3, [r7, #27]
 8003bbe:	e004      	b.n	8003bca <UART_SetConfig+0x29a>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	76fb      	strb	r3, [r7, #27]
 8003bc4:	e001      	b.n	8003bca <UART_SetConfig+0x29a>
 8003bc6:	2310      	movs	r3, #16
 8003bc8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <UART_SetConfig+0x2f4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	f040 809f 	bne.w	8003d14 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bd6:	7efb      	ldrb	r3, [r7, #27]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d837      	bhi.n	8003c4c <UART_SetConfig+0x31c>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <UART_SetConfig+0x2b4>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c4d 	.word	0x08003c4d
 8003bf4:	08003c17 	.word	0x08003c17
 8003bf8:	08003c4d 	.word	0x08003c4d
 8003bfc:	08003c4d 	.word	0x08003c4d
 8003c00:	08003c4d 	.word	0x08003c4d
 8003c04:	08003c45 	.word	0x08003c45
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7ff fb94 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8003c0c:	6178      	str	r0, [r7, #20]
        break;
 8003c0e:	e022      	b.n	8003c56 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <UART_SetConfig+0x310>)
 8003c12:	617b      	str	r3, [r7, #20]
        break;
 8003c14:	e01f      	b.n	8003c56 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c16:	f7ff fb1f 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003c1a:	6178      	str	r0, [r7, #20]
        break;
 8003c1c:	e01b      	b.n	8003c56 <UART_SetConfig+0x326>
 8003c1e:	bf00      	nop
 8003c20:	cfff69f3 	.word	0xcfff69f3
 8003c24:	40008000 	.word	0x40008000
 8003c28:	40013800 	.word	0x40013800
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40004400 	.word	0x40004400
 8003c34:	40004800 	.word	0x40004800
 8003c38:	40004c00 	.word	0x40004c00
 8003c3c:	40005000 	.word	0x40005000
 8003c40:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c48:	617b      	str	r3, [r7, #20]
        break;
 8003c4a:	e004      	b.n	8003c56 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	76bb      	strb	r3, [r7, #26]
        break;
 8003c54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8119 	beq.w	8003e90 <UART_SetConfig+0x560>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	4a95      	ldr	r2, [pc, #596]	; (8003eb8 <UART_SetConfig+0x588>)
 8003c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c70:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d305      	bcc.n	8003c8e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d902      	bls.n	8003c94 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	76bb      	strb	r3, [r7, #26]
 8003c92:	e0fd      	b.n	8003e90 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	4a85      	ldr	r2, [pc, #532]	; (8003eb8 <UART_SetConfig+0x588>)
 8003ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	f7fc fdba 	bl	8000824 <__aeabi_uldivmod>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	020b      	lsls	r3, r1, #8
 8003cc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003cc6:	0202      	lsls	r2, r0, #8
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	6849      	ldr	r1, [r1, #4]
 8003ccc:	0849      	lsrs	r1, r1, #1
 8003cce:	4608      	mov	r0, r1
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	1814      	adds	r4, r2, r0
 8003cd6:	eb43 0501 	adc.w	r5, r3, r1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	f7fc fd9c 	bl	8000824 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cfa:	d308      	bcc.n	8003d0e <UART_SetConfig+0x3de>
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d02:	d204      	bcs.n	8003d0e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	60da      	str	r2, [r3, #12]
 8003d0c:	e0c0      	b.n	8003e90 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	76bb      	strb	r3, [r7, #26]
 8003d12:	e0bd      	b.n	8003e90 <UART_SetConfig+0x560>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1c:	d164      	bne.n	8003de8 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8003d1e:	7efb      	ldrb	r3, [r7, #27]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d828      	bhi.n	8003d76 <UART_SetConfig+0x446>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <UART_SetConfig+0x3fc>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d51 	.word	0x08003d51
 8003d30:	08003d59 	.word	0x08003d59
 8003d34:	08003d61 	.word	0x08003d61
 8003d38:	08003d77 	.word	0x08003d77
 8003d3c:	08003d67 	.word	0x08003d67
 8003d40:	08003d77 	.word	0x08003d77
 8003d44:	08003d77 	.word	0x08003d77
 8003d48:	08003d77 	.word	0x08003d77
 8003d4c:	08003d6f 	.word	0x08003d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d50:	f7ff faf0 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8003d54:	6178      	str	r0, [r7, #20]
        break;
 8003d56:	e013      	b.n	8003d80 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d58:	f7ff fb02 	bl	8003360 <HAL_RCC_GetPCLK2Freq>
 8003d5c:	6178      	str	r0, [r7, #20]
        break;
 8003d5e:	e00f      	b.n	8003d80 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d60:	4b56      	ldr	r3, [pc, #344]	; (8003ebc <UART_SetConfig+0x58c>)
 8003d62:	617b      	str	r3, [r7, #20]
        break;
 8003d64:	e00c      	b.n	8003d80 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d66:	f7ff fa77 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003d6a:	6178      	str	r0, [r7, #20]
        break;
 8003d6c:	e008      	b.n	8003d80 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d72:	617b      	str	r3, [r7, #20]
        break;
 8003d74:	e004      	b.n	8003d80 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	76bb      	strb	r3, [r7, #26]
        break;
 8003d7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8084 	beq.w	8003e90 <UART_SetConfig+0x560>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	4a4a      	ldr	r2, [pc, #296]	; (8003eb8 <UART_SetConfig+0x588>)
 8003d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d92:	461a      	mov	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d9a:	005a      	lsls	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	441a      	add	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b0f      	cmp	r3, #15
 8003db2:	d916      	bls.n	8003de2 <UART_SetConfig+0x4b2>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dba:	d212      	bcs.n	8003de2 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f023 030f 	bic.w	r3, r3, #15
 8003dc4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	89fb      	ldrh	r3, [r7, #14]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	89fa      	ldrh	r2, [r7, #14]
 8003dde:	60da      	str	r2, [r3, #12]
 8003de0:	e056      	b.n	8003e90 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	76bb      	strb	r3, [r7, #26]
 8003de6:	e053      	b.n	8003e90 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003de8:	7efb      	ldrb	r3, [r7, #27]
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d827      	bhi.n	8003e3e <UART_SetConfig+0x50e>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <UART_SetConfig+0x4c4>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e21 	.word	0x08003e21
 8003dfc:	08003e29 	.word	0x08003e29
 8003e00:	08003e3f 	.word	0x08003e3f
 8003e04:	08003e2f 	.word	0x08003e2f
 8003e08:	08003e3f 	.word	0x08003e3f
 8003e0c:	08003e3f 	.word	0x08003e3f
 8003e10:	08003e3f 	.word	0x08003e3f
 8003e14:	08003e37 	.word	0x08003e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7ff fa8c 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8003e1c:	6178      	str	r0, [r7, #20]
        break;
 8003e1e:	e013      	b.n	8003e48 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7ff fa9e 	bl	8003360 <HAL_RCC_GetPCLK2Freq>
 8003e24:	6178      	str	r0, [r7, #20]
        break;
 8003e26:	e00f      	b.n	8003e48 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e28:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <UART_SetConfig+0x58c>)
 8003e2a:	617b      	str	r3, [r7, #20]
        break;
 8003e2c:	e00c      	b.n	8003e48 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2e:	f7ff fa13 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003e32:	6178      	str	r0, [r7, #20]
        break;
 8003e34:	e008      	b.n	8003e48 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3a:	617b      	str	r3, [r7, #20]
        break;
 8003e3c:	e004      	b.n	8003e48 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	76bb      	strb	r3, [r7, #26]
        break;
 8003e46:	bf00      	nop
    }

    if (pclk != 0U)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d020      	beq.n	8003e90 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	4a19      	ldr	r2, [pc, #100]	; (8003eb8 <UART_SetConfig+0x588>)
 8003e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	441a      	add	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b0f      	cmp	r3, #15
 8003e76:	d909      	bls.n	8003e8c <UART_SetConfig+0x55c>
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7e:	d205      	bcs.n	8003e8c <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	e001      	b.n	8003e90 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003eac:	7ebb      	ldrb	r3, [r7, #26]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	080044b8 	.word	0x080044b8
 8003ebc:	00f42400 	.word	0x00f42400

08003ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01a      	beq.n	8003fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fbe:	d10a      	bne.n	8003fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af02      	add	r7, sp, #8
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004014:	f7fd fa1a 	bl	800144c <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b08      	cmp	r3, #8
 8004026:	d10e      	bne.n	8004046 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f82f 	bl	800409a <UART_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e025      	b.n	8004092 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b04      	cmp	r3, #4
 8004052:	d10e      	bne.n	8004072 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f819 	bl	800409a <UART_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e00f      	b.n	8004092 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b09c      	sub	sp, #112	; 0x70
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	4613      	mov	r3, r2
 80040a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040aa:	e0a9      	b.n	8004200 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	f000 80a5 	beq.w	8004200 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b6:	f7fd f9c9 	bl	800144c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d302      	bcc.n	80040cc <UART_WaitOnFlagUntilTimeout+0x32>
 80040c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d140      	bne.n	800414e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040e0:	667b      	str	r3, [r7, #100]	; 0x64
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e6      	bne.n	80040cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3308      	adds	r3, #8
 8004104:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	663b      	str	r3, [r7, #96]	; 0x60
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3308      	adds	r3, #8
 800411c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800411e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004120:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800412c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e5      	bne.n	80040fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e069      	b.n	8004222 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d051      	beq.n	8004200 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416a:	d149      	bne.n	8004200 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004174:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800418a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
 8004196:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800419a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	613b      	str	r3, [r7, #16]
   return(result);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f023 0301 	bic.w	r3, r3, #1
 80041be:	66bb      	str	r3, [r7, #104]	; 0x68
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3308      	adds	r3, #8
 80041c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041c8:	623a      	str	r2, [r7, #32]
 80041ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	69f9      	ldr	r1, [r7, #28]
 80041ce:	6a3a      	ldr	r2, [r7, #32]
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e5      	bne.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e010      	b.n	8004222 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	4013      	ands	r3, r2
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	429a      	cmp	r2, r3
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	461a      	mov	r2, r3
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	429a      	cmp	r2, r3
 800421c:	f43f af46 	beq.w	80040ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3770      	adds	r7, #112	; 0x70
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_UARTEx_DisableFifoMode+0x16>
 800423c:	2302      	movs	r3, #2
 800423e:	e027      	b.n	8004290 <HAL_UARTEx_DisableFifoMode+0x66>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2224      	movs	r2, #36	; 0x24
 800424c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800426e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e02d      	b.n	8004310 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2224      	movs	r2, #36	; 0x24
 80042c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f84f 	bl	8004394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800432c:	2302      	movs	r3, #2
 800432e:	e02d      	b.n	800438c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	; 0x24
 800433c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f811 	bl	8004394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d108      	bne.n	80043b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80043b4:	e031      	b.n	800441a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80043b6:	2308      	movs	r3, #8
 80043b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80043ba:	2308      	movs	r3, #8
 80043bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	0e5b      	lsrs	r3, r3, #25
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	0f5b      	lsrs	r3, r3, #29
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043de:	7bbb      	ldrb	r3, [r7, #14]
 80043e0:	7b3a      	ldrb	r2, [r7, #12]
 80043e2:	4911      	ldr	r1, [pc, #68]	; (8004428 <UARTEx_SetNbDataToProcess+0x94>)
 80043e4:	5c8a      	ldrb	r2, [r1, r2]
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80043ea:	7b3a      	ldrb	r2, [r7, #12]
 80043ec:	490f      	ldr	r1, [pc, #60]	; (800442c <UARTEx_SetNbDataToProcess+0x98>)
 80043ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	7b7a      	ldrb	r2, [r7, #13]
 8004400:	4909      	ldr	r1, [pc, #36]	; (8004428 <UARTEx_SetNbDataToProcess+0x94>)
 8004402:	5c8a      	ldrb	r2, [r1, r2]
 8004404:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004408:	7b7a      	ldrb	r2, [r7, #13]
 800440a:	4908      	ldr	r1, [pc, #32]	; (800442c <UARTEx_SetNbDataToProcess+0x98>)
 800440c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800440e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004412:	b29a      	uxth	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800441a:	bf00      	nop
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	080044d0 	.word	0x080044d0
 800442c:	080044d8 	.word	0x080044d8

08004430 <__libc_init_array>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	4d0d      	ldr	r5, [pc, #52]	; (8004468 <__libc_init_array+0x38>)
 8004434:	4c0d      	ldr	r4, [pc, #52]	; (800446c <__libc_init_array+0x3c>)
 8004436:	1b64      	subs	r4, r4, r5
 8004438:	10a4      	asrs	r4, r4, #2
 800443a:	2600      	movs	r6, #0
 800443c:	42a6      	cmp	r6, r4
 800443e:	d109      	bne.n	8004454 <__libc_init_array+0x24>
 8004440:	4d0b      	ldr	r5, [pc, #44]	; (8004470 <__libc_init_array+0x40>)
 8004442:	4c0c      	ldr	r4, [pc, #48]	; (8004474 <__libc_init_array+0x44>)
 8004444:	f000 f820 	bl	8004488 <_init>
 8004448:	1b64      	subs	r4, r4, r5
 800444a:	10a4      	asrs	r4, r4, #2
 800444c:	2600      	movs	r6, #0
 800444e:	42a6      	cmp	r6, r4
 8004450:	d105      	bne.n	800445e <__libc_init_array+0x2e>
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	f855 3b04 	ldr.w	r3, [r5], #4
 8004458:	4798      	blx	r3
 800445a:	3601      	adds	r6, #1
 800445c:	e7ee      	b.n	800443c <__libc_init_array+0xc>
 800445e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004462:	4798      	blx	r3
 8004464:	3601      	adds	r6, #1
 8004466:	e7f2      	b.n	800444e <__libc_init_array+0x1e>
 8004468:	080044e8 	.word	0x080044e8
 800446c:	080044e8 	.word	0x080044e8
 8004470:	080044e8 	.word	0x080044e8
 8004474:	080044ec 	.word	0x080044ec

08004478 <memset>:
 8004478:	4402      	add	r2, r0
 800447a:	4603      	mov	r3, r0
 800447c:	4293      	cmp	r3, r2
 800447e:	d100      	bne.n	8004482 <memset+0xa>
 8004480:	4770      	bx	lr
 8004482:	f803 1b01 	strb.w	r1, [r3], #1
 8004486:	e7f9      	b.n	800447c <memset+0x4>

08004488 <_init>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	bf00      	nop
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr

08004494 <_fini>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	bf00      	nop
 8004498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449a:	bc08      	pop	{r3}
 800449c:	469e      	mov	lr, r3
 800449e:	4770      	bx	lr
